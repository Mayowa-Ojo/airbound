// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/address"
	"airbound/internal/ent/airport"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/frontdesk"
	"airbound/internal/ent/itenerary"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AirportCreate is the builder for creating a Airport entity.
type AirportCreate struct {
	config
	mutation *AirportMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AirportCreate) SetName(s string) *AirportCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetIataCode sets the "iata_code" field.
func (ac *AirportCreate) SetIataCode(s string) *AirportCreate {
	ac.mutation.SetIataCode(s)
	return ac
}

// SetIcaoCode sets the "icao_code" field.
func (ac *AirportCreate) SetIcaoCode(s string) *AirportCreate {
	ac.mutation.SetIcaoCode(s)
	return ac
}

// SetElevation sets the "elevation" field.
func (ac *AirportCreate) SetElevation(i int) *AirportCreate {
	ac.mutation.SetElevation(i)
	return ac
}

// SetTerminals sets the "terminals" field.
func (ac *AirportCreate) SetTerminals(i int) *AirportCreate {
	ac.mutation.SetTerminals(i)
	return ac
}

// SetRunways sets the "runways" field.
func (ac *AirportCreate) SetRunways(i int) *AirportCreate {
	ac.mutation.SetRunways(i)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AirportCreate) SetCreatedAt(t time.Time) *AirportCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AirportCreate) SetNillableCreatedAt(t *time.Time) *AirportCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AirportCreate) SetUpdatedAt(t time.Time) *AirportCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AirportCreate) SetNillableUpdatedAt(t *time.Time) *AirportCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AirportCreate) SetID(u uuid.UUID) *AirportCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AirportCreate) SetNillableID(u *uuid.UUID) *AirportCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (ac *AirportCreate) SetAddressID(id uuid.UUID) *AirportCreate {
	ac.mutation.SetAddressID(id)
	return ac
}

// SetNillableAddressID sets the "address" edge to the Address entity by ID if the given value is not nil.
func (ac *AirportCreate) SetNillableAddressID(id *uuid.UUID) *AirportCreate {
	if id != nil {
		ac = ac.SetAddressID(*id)
	}
	return ac
}

// SetAddress sets the "address" edge to the Address entity.
func (ac *AirportCreate) SetAddress(a *Address) *AirportCreate {
	return ac.SetAddressID(a.ID)
}

// AddFrontDeskIDs adds the "front_desks" edge to the FrontDesk entity by IDs.
func (ac *AirportCreate) AddFrontDeskIDs(ids ...uuid.UUID) *AirportCreate {
	ac.mutation.AddFrontDeskIDs(ids...)
	return ac
}

// AddFrontDesks adds the "front_desks" edges to the FrontDesk entity.
func (ac *AirportCreate) AddFrontDesks(f ...*FrontDesk) *AirportCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddFrontDeskIDs(ids...)
}

// AddDepartureFlightIDs adds the "departure_flights" edge to the Flight entity by IDs.
func (ac *AirportCreate) AddDepartureFlightIDs(ids ...uuid.UUID) *AirportCreate {
	ac.mutation.AddDepartureFlightIDs(ids...)
	return ac
}

// AddDepartureFlights adds the "departure_flights" edges to the Flight entity.
func (ac *AirportCreate) AddDepartureFlights(f ...*Flight) *AirportCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddDepartureFlightIDs(ids...)
}

// AddArrivalFlightIDs adds the "arrival_flights" edge to the Flight entity by IDs.
func (ac *AirportCreate) AddArrivalFlightIDs(ids ...uuid.UUID) *AirportCreate {
	ac.mutation.AddArrivalFlightIDs(ids...)
	return ac
}

// AddArrivalFlights adds the "arrival_flights" edges to the Flight entity.
func (ac *AirportCreate) AddArrivalFlights(f ...*Flight) *AirportCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddArrivalFlightIDs(ids...)
}

// AddOriginIteneraryIDs adds the "origin_iteneraries" edge to the Itenerary entity by IDs.
func (ac *AirportCreate) AddOriginIteneraryIDs(ids ...uuid.UUID) *AirportCreate {
	ac.mutation.AddOriginIteneraryIDs(ids...)
	return ac
}

// AddOriginIteneraries adds the "origin_iteneraries" edges to the Itenerary entity.
func (ac *AirportCreate) AddOriginIteneraries(i ...*Itenerary) *AirportCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ac.AddOriginIteneraryIDs(ids...)
}

// AddDestinationIteneraryIDs adds the "destination_iteneraries" edge to the Itenerary entity by IDs.
func (ac *AirportCreate) AddDestinationIteneraryIDs(ids ...uuid.UUID) *AirportCreate {
	ac.mutation.AddDestinationIteneraryIDs(ids...)
	return ac
}

// AddDestinationIteneraries adds the "destination_iteneraries" edges to the Itenerary entity.
func (ac *AirportCreate) AddDestinationIteneraries(i ...*Itenerary) *AirportCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ac.AddDestinationIteneraryIDs(ids...)
}

// Mutation returns the AirportMutation object of the builder.
func (ac *AirportCreate) Mutation() *AirportMutation {
	return ac.mutation
}

// Save creates the Airport in the database.
func (ac *AirportCreate) Save(ctx context.Context) (*Airport, error) {
	var (
		err  error
		node *Airport
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AirportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AirportCreate) SaveX(ctx context.Context) *Airport {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AirportCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AirportCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AirportCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := airport.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := airport.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := airport.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AirportCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Airport.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := airport.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Airport.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IataCode(); !ok {
		return &ValidationError{Name: "iata_code", err: errors.New(`ent: missing required field "Airport.iata_code"`)}
	}
	if v, ok := ac.mutation.IataCode(); ok {
		if err := airport.IataCodeValidator(v); err != nil {
			return &ValidationError{Name: "iata_code", err: fmt.Errorf(`ent: validator failed for field "Airport.iata_code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IcaoCode(); !ok {
		return &ValidationError{Name: "icao_code", err: errors.New(`ent: missing required field "Airport.icao_code"`)}
	}
	if v, ok := ac.mutation.IcaoCode(); ok {
		if err := airport.IcaoCodeValidator(v); err != nil {
			return &ValidationError{Name: "icao_code", err: fmt.Errorf(`ent: validator failed for field "Airport.icao_code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Elevation(); !ok {
		return &ValidationError{Name: "elevation", err: errors.New(`ent: missing required field "Airport.elevation"`)}
	}
	if v, ok := ac.mutation.Elevation(); ok {
		if err := airport.ElevationValidator(v); err != nil {
			return &ValidationError{Name: "elevation", err: fmt.Errorf(`ent: validator failed for field "Airport.elevation": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Terminals(); !ok {
		return &ValidationError{Name: "terminals", err: errors.New(`ent: missing required field "Airport.terminals"`)}
	}
	if v, ok := ac.mutation.Terminals(); ok {
		if err := airport.TerminalsValidator(v); err != nil {
			return &ValidationError{Name: "terminals", err: fmt.Errorf(`ent: validator failed for field "Airport.terminals": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Runways(); !ok {
		return &ValidationError{Name: "runways", err: errors.New(`ent: missing required field "Airport.runways"`)}
	}
	if v, ok := ac.mutation.Runways(); ok {
		if err := airport.RunwaysValidator(v); err != nil {
			return &ValidationError{Name: "runways", err: fmt.Errorf(`ent: validator failed for field "Airport.runways": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Airport.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Airport.updated_at"`)}
	}
	return nil
}

func (ac *AirportCreate) sqlSave(ctx context.Context) (*Airport, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AirportCreate) createSpec() (*Airport, *sqlgraph.CreateSpec) {
	var (
		_node = &Airport{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: airport.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: airport.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.IataCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIataCode,
		})
		_node.IataCode = value
	}
	if value, ok := ac.mutation.IcaoCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airport.FieldIcaoCode,
		})
		_node.IcaoCode = value
	}
	if value, ok := ac.mutation.Elevation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldElevation,
		})
		_node.Elevation = value
	}
	if value, ok := ac.mutation.Terminals(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldTerminals,
		})
		_node.Terminals = value
	}
	if value, ok := ac.mutation.Runways(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: airport.FieldRunways,
		})
		_node.Runways = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airport.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airport.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ac.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   airport.AddressTable,
			Columns: []string{airport.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.address_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FrontDesksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.FrontDesksTable,
			Columns: []string{airport.FrontDesksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: frontdesk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DepartureFlightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.DepartureFlightsTable,
			Columns: []string{airport.DepartureFlightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ArrivalFlightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.ArrivalFlightsTable,
			Columns: []string{airport.ArrivalFlightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OriginItenerariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.OriginItenerariesTable,
			Columns: []string{airport.OriginItenerariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itenerary.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DestinationItenerariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airport.DestinationItenerariesTable,
			Columns: []string{airport.DestinationItenerariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itenerary.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AirportCreateBulk is the builder for creating many Airport entities in bulk.
type AirportCreateBulk struct {
	config
	builders []*AirportCreate
}

// Save creates the Airport entities in the database.
func (acb *AirportCreateBulk) Save(ctx context.Context) ([]*Airport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Airport, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AirportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AirportCreateBulk) SaveX(ctx context.Context) []*Airport {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AirportCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AirportCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
