// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/flightseat"
	"airbound/internal/ent/passenger"
	"airbound/internal/ent/seat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightSeatCreate is the builder for creating a FlightSeat entity.
type FlightSeatCreate struct {
	config
	mutation *FlightSeatMutation
	hooks    []Hook
}

// SetFare sets the "fare" field.
func (fsc *FlightSeatCreate) SetFare(f float64) *FlightSeatCreate {
	fsc.mutation.SetFare(f)
	return fsc
}

// SetCreatedAt sets the "created_at" field.
func (fsc *FlightSeatCreate) SetCreatedAt(t time.Time) *FlightSeatCreate {
	fsc.mutation.SetCreatedAt(t)
	return fsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsc *FlightSeatCreate) SetNillableCreatedAt(t *time.Time) *FlightSeatCreate {
	if t != nil {
		fsc.SetCreatedAt(*t)
	}
	return fsc
}

// SetUpdatedAt sets the "updated_at" field.
func (fsc *FlightSeatCreate) SetUpdatedAt(t time.Time) *FlightSeatCreate {
	fsc.mutation.SetUpdatedAt(t)
	return fsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsc *FlightSeatCreate) SetNillableUpdatedAt(t *time.Time) *FlightSeatCreate {
	if t != nil {
		fsc.SetUpdatedAt(*t)
	}
	return fsc
}

// SetID sets the "id" field.
func (fsc *FlightSeatCreate) SetID(u uuid.UUID) *FlightSeatCreate {
	fsc.mutation.SetID(u)
	return fsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fsc *FlightSeatCreate) SetNillableID(u *uuid.UUID) *FlightSeatCreate {
	if u != nil {
		fsc.SetID(*u)
	}
	return fsc
}

// SetFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID.
func (fsc *FlightSeatCreate) SetFlightInstanceID(id uuid.UUID) *FlightSeatCreate {
	fsc.mutation.SetFlightInstanceID(id)
	return fsc
}

// SetNillableFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID if the given value is not nil.
func (fsc *FlightSeatCreate) SetNillableFlightInstanceID(id *uuid.UUID) *FlightSeatCreate {
	if id != nil {
		fsc = fsc.SetFlightInstanceID(*id)
	}
	return fsc
}

// SetFlightInstance sets the "flight_instance" edge to the FlightInstance entity.
func (fsc *FlightSeatCreate) SetFlightInstance(f *FlightInstance) *FlightSeatCreate {
	return fsc.SetFlightInstanceID(f.ID)
}

// SetSeatID sets the "seat" edge to the Seat entity by ID.
func (fsc *FlightSeatCreate) SetSeatID(id uuid.UUID) *FlightSeatCreate {
	fsc.mutation.SetSeatID(id)
	return fsc
}

// SetSeat sets the "seat" edge to the Seat entity.
func (fsc *FlightSeatCreate) SetSeat(s *Seat) *FlightSeatCreate {
	return fsc.SetSeatID(s.ID)
}

// SetPassengerID sets the "passenger" edge to the Passenger entity by ID.
func (fsc *FlightSeatCreate) SetPassengerID(id uuid.UUID) *FlightSeatCreate {
	fsc.mutation.SetPassengerID(id)
	return fsc
}

// SetNillablePassengerID sets the "passenger" edge to the Passenger entity by ID if the given value is not nil.
func (fsc *FlightSeatCreate) SetNillablePassengerID(id *uuid.UUID) *FlightSeatCreate {
	if id != nil {
		fsc = fsc.SetPassengerID(*id)
	}
	return fsc
}

// SetPassenger sets the "passenger" edge to the Passenger entity.
func (fsc *FlightSeatCreate) SetPassenger(p *Passenger) *FlightSeatCreate {
	return fsc.SetPassengerID(p.ID)
}

// Mutation returns the FlightSeatMutation object of the builder.
func (fsc *FlightSeatCreate) Mutation() *FlightSeatMutation {
	return fsc.mutation
}

// Save creates the FlightSeat in the database.
func (fsc *FlightSeatCreate) Save(ctx context.Context) (*FlightSeat, error) {
	var (
		err  error
		node *FlightSeat
	)
	fsc.defaults()
	if len(fsc.hooks) == 0 {
		if err = fsc.check(); err != nil {
			return nil, err
		}
		node, err = fsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightSeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fsc.check(); err != nil {
				return nil, err
			}
			fsc.mutation = mutation
			if node, err = fsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fsc.hooks) - 1; i >= 0; i-- {
			if fsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FlightSeatCreate) SaveX(ctx context.Context) *FlightSeat {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FlightSeatCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FlightSeatCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsc *FlightSeatCreate) defaults() {
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		v := flightseat.DefaultCreatedAt()
		fsc.mutation.SetCreatedAt(v)
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		v := flightseat.DefaultUpdatedAt()
		fsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fsc.mutation.ID(); !ok {
		v := flightseat.DefaultID()
		fsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FlightSeatCreate) check() error {
	if _, ok := fsc.mutation.Fare(); !ok {
		return &ValidationError{Name: "fare", err: errors.New(`ent: missing required field "FlightSeat.fare"`)}
	}
	if v, ok := fsc.mutation.Fare(); ok {
		if err := flightseat.FareValidator(v); err != nil {
			return &ValidationError{Name: "fare", err: fmt.Errorf(`ent: validator failed for field "FlightSeat.fare": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FlightSeat.created_at"`)}
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FlightSeat.updated_at"`)}
	}
	if _, ok := fsc.mutation.SeatID(); !ok {
		return &ValidationError{Name: "seat", err: errors.New(`ent: missing required edge "FlightSeat.seat"`)}
	}
	return nil
}

func (fsc *FlightSeatCreate) sqlSave(ctx context.Context) (*FlightSeat, error) {
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (fsc *FlightSeatCreate) createSpec() (*FlightSeat, *sqlgraph.CreateSpec) {
	var (
		_node = &FlightSeat{config: fsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flightseat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightseat.FieldID,
			},
		}
	)
	if id, ok := fsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fsc.mutation.Fare(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: flightseat.FieldFare,
		})
		_node.Fare = value
	}
	if value, ok := fsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightseat.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightseat.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := fsc.mutation.FlightInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightseat.FlightInstanceTable,
			Columns: []string{flightseat.FlightInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.flight_instance_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fsc.mutation.SeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flightseat.SeatTable,
			Columns: []string{flightseat.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seat_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fsc.mutation.PassengerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flightseat.PassengerTable,
			Columns: []string{flightseat.PassengerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.passenger_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FlightSeatCreateBulk is the builder for creating many FlightSeat entities in bulk.
type FlightSeatCreateBulk struct {
	config
	builders []*FlightSeatCreate
}

// Save creates the FlightSeat entities in the database.
func (fscb *FlightSeatCreateBulk) Save(ctx context.Context) ([]*FlightSeat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FlightSeat, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlightSeatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FlightSeatCreateBulk) SaveX(ctx context.Context) []*FlightSeat {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FlightSeatCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FlightSeatCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}
