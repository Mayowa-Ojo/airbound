// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/airline"
	"airbound/internal/ent/airport"
	"airbound/internal/ent/crew"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/flightschedule"
	"airbound/internal/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightUpdate is the builder for updating Flight entities.
type FlightUpdate struct {
	config
	hooks    []Hook
	mutation *FlightMutation
}

// Where appends a list predicates to the FlightUpdate builder.
func (fu *FlightUpdate) Where(ps ...predicate.Flight) *FlightUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFlightNumber sets the "flight_number" field.
func (fu *FlightUpdate) SetFlightNumber(s string) *FlightUpdate {
	fu.mutation.SetFlightNumber(s)
	return fu
}

// SetDuration sets the "duration" field.
func (fu *FlightUpdate) SetDuration(i int) *FlightUpdate {
	fu.mutation.ResetDuration()
	fu.mutation.SetDuration(i)
	return fu
}

// AddDuration adds i to the "duration" field.
func (fu *FlightUpdate) AddDuration(i int) *FlightUpdate {
	fu.mutation.AddDuration(i)
	return fu
}

// SetDistance sets the "distance" field.
func (fu *FlightUpdate) SetDistance(i int) *FlightUpdate {
	fu.mutation.ResetDistance()
	fu.mutation.SetDistance(i)
	return fu
}

// AddDistance adds i to the "distance" field.
func (fu *FlightUpdate) AddDistance(i int) *FlightUpdate {
	fu.mutation.AddDistance(i)
	return fu
}

// SetBoardingPolicy sets the "boarding_policy" field.
func (fu *FlightUpdate) SetBoardingPolicy(ep enums.BoardingPolicy) *FlightUpdate {
	fu.mutation.SetBoardingPolicy(ep)
	return fu
}

// SetTripType sets the "trip_type" field.
func (fu *FlightUpdate) SetTripType(et enums.TripType) *FlightUpdate {
	fu.mutation.SetTripType(et)
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FlightUpdate) SetCreatedAt(t time.Time) *FlightUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FlightUpdate) SetNillableCreatedAt(t *time.Time) *FlightUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FlightUpdate) SetUpdatedAt(t time.Time) *FlightUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// AddFlightInstanceIDs adds the "flight_instances" edge to the FlightInstance entity by IDs.
func (fu *FlightUpdate) AddFlightInstanceIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.AddFlightInstanceIDs(ids...)
	return fu
}

// AddFlightInstances adds the "flight_instances" edges to the FlightInstance entity.
func (fu *FlightUpdate) AddFlightInstances(f ...*FlightInstance) *FlightUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFlightInstanceIDs(ids...)
}

// AddFlightScheduleIDs adds the "flight_schedules" edge to the FlightSchedule entity by IDs.
func (fu *FlightUpdate) AddFlightScheduleIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.AddFlightScheduleIDs(ids...)
	return fu
}

// AddFlightSchedules adds the "flight_schedules" edges to the FlightSchedule entity.
func (fu *FlightUpdate) AddFlightSchedules(f ...*FlightSchedule) *FlightUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFlightScheduleIDs(ids...)
}

// AddCrewIDs adds the "crews" edge to the Crew entity by IDs.
func (fu *FlightUpdate) AddCrewIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.AddCrewIDs(ids...)
	return fu
}

// AddCrews adds the "crews" edges to the Crew entity.
func (fu *FlightUpdate) AddCrews(c ...*Crew) *FlightUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.AddCrewIDs(ids...)
}

// SetDepartureAirportID sets the "departure_airport" edge to the Airport entity by ID.
func (fu *FlightUpdate) SetDepartureAirportID(id uuid.UUID) *FlightUpdate {
	fu.mutation.SetDepartureAirportID(id)
	return fu
}

// SetNillableDepartureAirportID sets the "departure_airport" edge to the Airport entity by ID if the given value is not nil.
func (fu *FlightUpdate) SetNillableDepartureAirportID(id *uuid.UUID) *FlightUpdate {
	if id != nil {
		fu = fu.SetDepartureAirportID(*id)
	}
	return fu
}

// SetDepartureAirport sets the "departure_airport" edge to the Airport entity.
func (fu *FlightUpdate) SetDepartureAirport(a *Airport) *FlightUpdate {
	return fu.SetDepartureAirportID(a.ID)
}

// SetArrivalAirportID sets the "arrival_airport" edge to the Airport entity by ID.
func (fu *FlightUpdate) SetArrivalAirportID(id uuid.UUID) *FlightUpdate {
	fu.mutation.SetArrivalAirportID(id)
	return fu
}

// SetNillableArrivalAirportID sets the "arrival_airport" edge to the Airport entity by ID if the given value is not nil.
func (fu *FlightUpdate) SetNillableArrivalAirportID(id *uuid.UUID) *FlightUpdate {
	if id != nil {
		fu = fu.SetArrivalAirportID(*id)
	}
	return fu
}

// SetArrivalAirport sets the "arrival_airport" edge to the Airport entity.
func (fu *FlightUpdate) SetArrivalAirport(a *Airport) *FlightUpdate {
	return fu.SetArrivalAirportID(a.ID)
}

// SetAirlineID sets the "airline" edge to the Airline entity by ID.
func (fu *FlightUpdate) SetAirlineID(id uuid.UUID) *FlightUpdate {
	fu.mutation.SetAirlineID(id)
	return fu
}

// SetNillableAirlineID sets the "airline" edge to the Airline entity by ID if the given value is not nil.
func (fu *FlightUpdate) SetNillableAirlineID(id *uuid.UUID) *FlightUpdate {
	if id != nil {
		fu = fu.SetAirlineID(*id)
	}
	return fu
}

// SetAirline sets the "airline" edge to the Airline entity.
func (fu *FlightUpdate) SetAirline(a *Airline) *FlightUpdate {
	return fu.SetAirlineID(a.ID)
}

// Mutation returns the FlightMutation object of the builder.
func (fu *FlightUpdate) Mutation() *FlightMutation {
	return fu.mutation
}

// ClearFlightInstances clears all "flight_instances" edges to the FlightInstance entity.
func (fu *FlightUpdate) ClearFlightInstances() *FlightUpdate {
	fu.mutation.ClearFlightInstances()
	return fu
}

// RemoveFlightInstanceIDs removes the "flight_instances" edge to FlightInstance entities by IDs.
func (fu *FlightUpdate) RemoveFlightInstanceIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.RemoveFlightInstanceIDs(ids...)
	return fu
}

// RemoveFlightInstances removes "flight_instances" edges to FlightInstance entities.
func (fu *FlightUpdate) RemoveFlightInstances(f ...*FlightInstance) *FlightUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFlightInstanceIDs(ids...)
}

// ClearFlightSchedules clears all "flight_schedules" edges to the FlightSchedule entity.
func (fu *FlightUpdate) ClearFlightSchedules() *FlightUpdate {
	fu.mutation.ClearFlightSchedules()
	return fu
}

// RemoveFlightScheduleIDs removes the "flight_schedules" edge to FlightSchedule entities by IDs.
func (fu *FlightUpdate) RemoveFlightScheduleIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.RemoveFlightScheduleIDs(ids...)
	return fu
}

// RemoveFlightSchedules removes "flight_schedules" edges to FlightSchedule entities.
func (fu *FlightUpdate) RemoveFlightSchedules(f ...*FlightSchedule) *FlightUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFlightScheduleIDs(ids...)
}

// ClearCrews clears all "crews" edges to the Crew entity.
func (fu *FlightUpdate) ClearCrews() *FlightUpdate {
	fu.mutation.ClearCrews()
	return fu
}

// RemoveCrewIDs removes the "crews" edge to Crew entities by IDs.
func (fu *FlightUpdate) RemoveCrewIDs(ids ...uuid.UUID) *FlightUpdate {
	fu.mutation.RemoveCrewIDs(ids...)
	return fu
}

// RemoveCrews removes "crews" edges to Crew entities.
func (fu *FlightUpdate) RemoveCrews(c ...*Crew) *FlightUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.RemoveCrewIDs(ids...)
}

// ClearDepartureAirport clears the "departure_airport" edge to the Airport entity.
func (fu *FlightUpdate) ClearDepartureAirport() *FlightUpdate {
	fu.mutation.ClearDepartureAirport()
	return fu
}

// ClearArrivalAirport clears the "arrival_airport" edge to the Airport entity.
func (fu *FlightUpdate) ClearArrivalAirport() *FlightUpdate {
	fu.mutation.ClearArrivalAirport()
	return fu
}

// ClearAirline clears the "airline" edge to the Airline entity.
func (fu *FlightUpdate) ClearAirline() *FlightUpdate {
	fu.mutation.ClearAirline()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FlightUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FlightUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FlightUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FlightUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FlightUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := flight.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FlightUpdate) check() error {
	if v, ok := fu.mutation.FlightNumber(); ok {
		if err := flight.FlightNumberValidator(v); err != nil {
			return &ValidationError{Name: "flight_number", err: fmt.Errorf(`ent: validator failed for field "Flight.flight_number": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Duration(); ok {
		if err := flight.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "Flight.duration": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Distance(); ok {
		if err := flight.DistanceValidator(v); err != nil {
			return &ValidationError{Name: "distance", err: fmt.Errorf(`ent: validator failed for field "Flight.distance": %w`, err)}
		}
	}
	if v, ok := fu.mutation.BoardingPolicy(); ok {
		if err := flight.BoardingPolicyValidator(v); err != nil {
			return &ValidationError{Name: "boarding_policy", err: fmt.Errorf(`ent: validator failed for field "Flight.boarding_policy": %w`, err)}
		}
	}
	if v, ok := fu.mutation.TripType(); ok {
		if err := flight.TripTypeValidator(v); err != nil {
			return &ValidationError{Name: "trip_type", err: fmt.Errorf(`ent: validator failed for field "Flight.trip_type": %w`, err)}
		}
	}
	return nil
}

func (fu *FlightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flight.Table,
			Columns: flight.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flight.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FlightNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flight.FieldFlightNumber,
		})
	}
	if value, ok := fu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDuration,
		})
	}
	if value, ok := fu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDuration,
		})
	}
	if value, ok := fu.mutation.Distance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDistance,
		})
	}
	if value, ok := fu.mutation.AddedDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDistance,
		})
	}
	if value, ok := fu.mutation.BoardingPolicy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flight.FieldBoardingPolicy,
		})
	}
	if value, ok := fu.mutation.TripType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flight.FieldTripType,
		})
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flight.FieldCreatedAt,
		})
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flight.FieldUpdatedAt,
		})
	}
	if fu.mutation.FlightInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightInstancesTable,
			Columns: []string{flight.FlightInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFlightInstancesIDs(); len(nodes) > 0 && !fu.mutation.FlightInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightInstancesTable,
			Columns: []string{flight.FlightInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FlightInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightInstancesTable,
			Columns: []string{flight.FlightInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FlightSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightSchedulesTable,
			Columns: []string{flight.FlightSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightschedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFlightSchedulesIDs(); len(nodes) > 0 && !fu.mutation.FlightSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightSchedulesTable,
			Columns: []string{flight.FlightSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightschedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FlightSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightSchedulesTable,
			Columns: []string{flight.FlightSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightschedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.CrewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   flight.CrewsTable,
			Columns: flight.CrewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crew.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedCrewsIDs(); len(nodes) > 0 && !fu.mutation.CrewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   flight.CrewsTable,
			Columns: flight.CrewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CrewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   flight.CrewsTable,
			Columns: flight.CrewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.DepartureAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.DepartureAirportTable,
			Columns: []string{flight.DepartureAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.DepartureAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.DepartureAirportTable,
			Columns: []string{flight.DepartureAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ArrivalAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ArrivalAirportTable,
			Columns: []string{flight.ArrivalAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ArrivalAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ArrivalAirportTable,
			Columns: []string{flight.ArrivalAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.AirlineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.AirlineTable,
			Columns: []string{flight.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AirlineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.AirlineTable,
			Columns: []string{flight.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlightUpdateOne is the builder for updating a single Flight entity.
type FlightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightMutation
}

// SetFlightNumber sets the "flight_number" field.
func (fuo *FlightUpdateOne) SetFlightNumber(s string) *FlightUpdateOne {
	fuo.mutation.SetFlightNumber(s)
	return fuo
}

// SetDuration sets the "duration" field.
func (fuo *FlightUpdateOne) SetDuration(i int) *FlightUpdateOne {
	fuo.mutation.ResetDuration()
	fuo.mutation.SetDuration(i)
	return fuo
}

// AddDuration adds i to the "duration" field.
func (fuo *FlightUpdateOne) AddDuration(i int) *FlightUpdateOne {
	fuo.mutation.AddDuration(i)
	return fuo
}

// SetDistance sets the "distance" field.
func (fuo *FlightUpdateOne) SetDistance(i int) *FlightUpdateOne {
	fuo.mutation.ResetDistance()
	fuo.mutation.SetDistance(i)
	return fuo
}

// AddDistance adds i to the "distance" field.
func (fuo *FlightUpdateOne) AddDistance(i int) *FlightUpdateOne {
	fuo.mutation.AddDistance(i)
	return fuo
}

// SetBoardingPolicy sets the "boarding_policy" field.
func (fuo *FlightUpdateOne) SetBoardingPolicy(ep enums.BoardingPolicy) *FlightUpdateOne {
	fuo.mutation.SetBoardingPolicy(ep)
	return fuo
}

// SetTripType sets the "trip_type" field.
func (fuo *FlightUpdateOne) SetTripType(et enums.TripType) *FlightUpdateOne {
	fuo.mutation.SetTripType(et)
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FlightUpdateOne) SetCreatedAt(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableCreatedAt(t *time.Time) *FlightUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FlightUpdateOne) SetUpdatedAt(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// AddFlightInstanceIDs adds the "flight_instances" edge to the FlightInstance entity by IDs.
func (fuo *FlightUpdateOne) AddFlightInstanceIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.AddFlightInstanceIDs(ids...)
	return fuo
}

// AddFlightInstances adds the "flight_instances" edges to the FlightInstance entity.
func (fuo *FlightUpdateOne) AddFlightInstances(f ...*FlightInstance) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFlightInstanceIDs(ids...)
}

// AddFlightScheduleIDs adds the "flight_schedules" edge to the FlightSchedule entity by IDs.
func (fuo *FlightUpdateOne) AddFlightScheduleIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.AddFlightScheduleIDs(ids...)
	return fuo
}

// AddFlightSchedules adds the "flight_schedules" edges to the FlightSchedule entity.
func (fuo *FlightUpdateOne) AddFlightSchedules(f ...*FlightSchedule) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFlightScheduleIDs(ids...)
}

// AddCrewIDs adds the "crews" edge to the Crew entity by IDs.
func (fuo *FlightUpdateOne) AddCrewIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.AddCrewIDs(ids...)
	return fuo
}

// AddCrews adds the "crews" edges to the Crew entity.
func (fuo *FlightUpdateOne) AddCrews(c ...*Crew) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.AddCrewIDs(ids...)
}

// SetDepartureAirportID sets the "departure_airport" edge to the Airport entity by ID.
func (fuo *FlightUpdateOne) SetDepartureAirportID(id uuid.UUID) *FlightUpdateOne {
	fuo.mutation.SetDepartureAirportID(id)
	return fuo
}

// SetNillableDepartureAirportID sets the "departure_airport" edge to the Airport entity by ID if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableDepartureAirportID(id *uuid.UUID) *FlightUpdateOne {
	if id != nil {
		fuo = fuo.SetDepartureAirportID(*id)
	}
	return fuo
}

// SetDepartureAirport sets the "departure_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) SetDepartureAirport(a *Airport) *FlightUpdateOne {
	return fuo.SetDepartureAirportID(a.ID)
}

// SetArrivalAirportID sets the "arrival_airport" edge to the Airport entity by ID.
func (fuo *FlightUpdateOne) SetArrivalAirportID(id uuid.UUID) *FlightUpdateOne {
	fuo.mutation.SetArrivalAirportID(id)
	return fuo
}

// SetNillableArrivalAirportID sets the "arrival_airport" edge to the Airport entity by ID if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableArrivalAirportID(id *uuid.UUID) *FlightUpdateOne {
	if id != nil {
		fuo = fuo.SetArrivalAirportID(*id)
	}
	return fuo
}

// SetArrivalAirport sets the "arrival_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) SetArrivalAirport(a *Airport) *FlightUpdateOne {
	return fuo.SetArrivalAirportID(a.ID)
}

// SetAirlineID sets the "airline" edge to the Airline entity by ID.
func (fuo *FlightUpdateOne) SetAirlineID(id uuid.UUID) *FlightUpdateOne {
	fuo.mutation.SetAirlineID(id)
	return fuo
}

// SetNillableAirlineID sets the "airline" edge to the Airline entity by ID if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableAirlineID(id *uuid.UUID) *FlightUpdateOne {
	if id != nil {
		fuo = fuo.SetAirlineID(*id)
	}
	return fuo
}

// SetAirline sets the "airline" edge to the Airline entity.
func (fuo *FlightUpdateOne) SetAirline(a *Airline) *FlightUpdateOne {
	return fuo.SetAirlineID(a.ID)
}

// Mutation returns the FlightMutation object of the builder.
func (fuo *FlightUpdateOne) Mutation() *FlightMutation {
	return fuo.mutation
}

// ClearFlightInstances clears all "flight_instances" edges to the FlightInstance entity.
func (fuo *FlightUpdateOne) ClearFlightInstances() *FlightUpdateOne {
	fuo.mutation.ClearFlightInstances()
	return fuo
}

// RemoveFlightInstanceIDs removes the "flight_instances" edge to FlightInstance entities by IDs.
func (fuo *FlightUpdateOne) RemoveFlightInstanceIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.RemoveFlightInstanceIDs(ids...)
	return fuo
}

// RemoveFlightInstances removes "flight_instances" edges to FlightInstance entities.
func (fuo *FlightUpdateOne) RemoveFlightInstances(f ...*FlightInstance) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFlightInstanceIDs(ids...)
}

// ClearFlightSchedules clears all "flight_schedules" edges to the FlightSchedule entity.
func (fuo *FlightUpdateOne) ClearFlightSchedules() *FlightUpdateOne {
	fuo.mutation.ClearFlightSchedules()
	return fuo
}

// RemoveFlightScheduleIDs removes the "flight_schedules" edge to FlightSchedule entities by IDs.
func (fuo *FlightUpdateOne) RemoveFlightScheduleIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.RemoveFlightScheduleIDs(ids...)
	return fuo
}

// RemoveFlightSchedules removes "flight_schedules" edges to FlightSchedule entities.
func (fuo *FlightUpdateOne) RemoveFlightSchedules(f ...*FlightSchedule) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFlightScheduleIDs(ids...)
}

// ClearCrews clears all "crews" edges to the Crew entity.
func (fuo *FlightUpdateOne) ClearCrews() *FlightUpdateOne {
	fuo.mutation.ClearCrews()
	return fuo
}

// RemoveCrewIDs removes the "crews" edge to Crew entities by IDs.
func (fuo *FlightUpdateOne) RemoveCrewIDs(ids ...uuid.UUID) *FlightUpdateOne {
	fuo.mutation.RemoveCrewIDs(ids...)
	return fuo
}

// RemoveCrews removes "crews" edges to Crew entities.
func (fuo *FlightUpdateOne) RemoveCrews(c ...*Crew) *FlightUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.RemoveCrewIDs(ids...)
}

// ClearDepartureAirport clears the "departure_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) ClearDepartureAirport() *FlightUpdateOne {
	fuo.mutation.ClearDepartureAirport()
	return fuo
}

// ClearArrivalAirport clears the "arrival_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) ClearArrivalAirport() *FlightUpdateOne {
	fuo.mutation.ClearArrivalAirport()
	return fuo
}

// ClearAirline clears the "airline" edge to the Airline entity.
func (fuo *FlightUpdateOne) ClearAirline() *FlightUpdateOne {
	fuo.mutation.ClearAirline()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FlightUpdateOne) Select(field string, fields ...string) *FlightUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Flight entity.
func (fuo *FlightUpdateOne) Save(ctx context.Context) (*Flight, error) {
	var (
		err  error
		node *Flight
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FlightUpdateOne) SaveX(ctx context.Context) *Flight {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FlightUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FlightUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FlightUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := flight.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FlightUpdateOne) check() error {
	if v, ok := fuo.mutation.FlightNumber(); ok {
		if err := flight.FlightNumberValidator(v); err != nil {
			return &ValidationError{Name: "flight_number", err: fmt.Errorf(`ent: validator failed for field "Flight.flight_number": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Duration(); ok {
		if err := flight.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "Flight.duration": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Distance(); ok {
		if err := flight.DistanceValidator(v); err != nil {
			return &ValidationError{Name: "distance", err: fmt.Errorf(`ent: validator failed for field "Flight.distance": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.BoardingPolicy(); ok {
		if err := flight.BoardingPolicyValidator(v); err != nil {
			return &ValidationError{Name: "boarding_policy", err: fmt.Errorf(`ent: validator failed for field "Flight.boarding_policy": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.TripType(); ok {
		if err := flight.TripTypeValidator(v); err != nil {
			return &ValidationError{Name: "trip_type", err: fmt.Errorf(`ent: validator failed for field "Flight.trip_type": %w`, err)}
		}
	}
	return nil
}

func (fuo *FlightUpdateOne) sqlSave(ctx context.Context) (_node *Flight, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flight.Table,
			Columns: flight.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flight.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Flight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flight.FieldID)
		for _, f := range fields {
			if !flight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FlightNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flight.FieldFlightNumber,
		})
	}
	if value, ok := fuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDuration,
		})
	}
	if value, ok := fuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDuration,
		})
	}
	if value, ok := fuo.mutation.Distance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDistance,
		})
	}
	if value, ok := fuo.mutation.AddedDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flight.FieldDistance,
		})
	}
	if value, ok := fuo.mutation.BoardingPolicy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flight.FieldBoardingPolicy,
		})
	}
	if value, ok := fuo.mutation.TripType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flight.FieldTripType,
		})
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flight.FieldCreatedAt,
		})
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flight.FieldUpdatedAt,
		})
	}
	if fuo.mutation.FlightInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightInstancesTable,
			Columns: []string{flight.FlightInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFlightInstancesIDs(); len(nodes) > 0 && !fuo.mutation.FlightInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightInstancesTable,
			Columns: []string{flight.FlightInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FlightInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightInstancesTable,
			Columns: []string{flight.FlightInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FlightSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightSchedulesTable,
			Columns: []string{flight.FlightSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightschedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFlightSchedulesIDs(); len(nodes) > 0 && !fuo.mutation.FlightSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightSchedulesTable,
			Columns: []string{flight.FlightSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightschedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FlightSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.FlightSchedulesTable,
			Columns: []string{flight.FlightSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightschedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.CrewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   flight.CrewsTable,
			Columns: flight.CrewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crew.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedCrewsIDs(); len(nodes) > 0 && !fuo.mutation.CrewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   flight.CrewsTable,
			Columns: flight.CrewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CrewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   flight.CrewsTable,
			Columns: flight.CrewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.DepartureAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.DepartureAirportTable,
			Columns: []string{flight.DepartureAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.DepartureAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.DepartureAirportTable,
			Columns: []string{flight.DepartureAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ArrivalAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ArrivalAirportTable,
			Columns: []string{flight.ArrivalAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ArrivalAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ArrivalAirportTable,
			Columns: []string{flight.ArrivalAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.AirlineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.AirlineTable,
			Columns: []string{flight.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AirlineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.AirlineTable,
			Columns: []string{flight.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Flight{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
