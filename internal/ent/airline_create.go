// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/aircraft"
	"airbound/internal/ent/airline"
	"airbound/internal/ent/crew"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/pilot"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AirlineCreate is the builder for creating a Airline entity.
type AirlineCreate struct {
	config
	mutation *AirlineMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AirlineCreate) SetName(s string) *AirlineCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetIataCode sets the "iata_code" field.
func (ac *AirlineCreate) SetIataCode(s string) *AirlineCreate {
	ac.mutation.SetIataCode(s)
	return ac
}

// SetIcaoCode sets the "icao_code" field.
func (ac *AirlineCreate) SetIcaoCode(s string) *AirlineCreate {
	ac.mutation.SetIcaoCode(s)
	return ac
}

// SetCallSign sets the "call_sign" field.
func (ac *AirlineCreate) SetCallSign(s string) *AirlineCreate {
	ac.mutation.SetCallSign(s)
	return ac
}

// SetCountry sets the "country" field.
func (ac *AirlineCreate) SetCountry(s string) *AirlineCreate {
	ac.mutation.SetCountry(s)
	return ac
}

// SetLicenseCode sets the "license_code" field.
func (ac *AirlineCreate) SetLicenseCode(s string) *AirlineCreate {
	ac.mutation.SetLicenseCode(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AirlineCreate) SetCreatedAt(t time.Time) *AirlineCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AirlineCreate) SetNillableCreatedAt(t *time.Time) *AirlineCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AirlineCreate) SetUpdatedAt(t time.Time) *AirlineCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AirlineCreate) SetNillableUpdatedAt(t *time.Time) *AirlineCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AirlineCreate) SetID(u uuid.UUID) *AirlineCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AirlineCreate) SetNillableID(u *uuid.UUID) *AirlineCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// AddAircraftIDs adds the "aircrafts" edge to the Aircraft entity by IDs.
func (ac *AirlineCreate) AddAircraftIDs(ids ...uuid.UUID) *AirlineCreate {
	ac.mutation.AddAircraftIDs(ids...)
	return ac
}

// AddAircrafts adds the "aircrafts" edges to the Aircraft entity.
func (ac *AirlineCreate) AddAircrafts(a ...*Aircraft) *AirlineCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAircraftIDs(ids...)
}

// AddCrewIDs adds the "crews" edge to the Crew entity by IDs.
func (ac *AirlineCreate) AddCrewIDs(ids ...uuid.UUID) *AirlineCreate {
	ac.mutation.AddCrewIDs(ids...)
	return ac
}

// AddCrews adds the "crews" edges to the Crew entity.
func (ac *AirlineCreate) AddCrews(c ...*Crew) *AirlineCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ac.AddCrewIDs(ids...)
}

// AddPilotIDs adds the "pilots" edge to the Pilot entity by IDs.
func (ac *AirlineCreate) AddPilotIDs(ids ...uuid.UUID) *AirlineCreate {
	ac.mutation.AddPilotIDs(ids...)
	return ac
}

// AddPilots adds the "pilots" edges to the Pilot entity.
func (ac *AirlineCreate) AddPilots(p ...*Pilot) *AirlineCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPilotIDs(ids...)
}

// AddFlightIDs adds the "flights" edge to the Flight entity by IDs.
func (ac *AirlineCreate) AddFlightIDs(ids ...uuid.UUID) *AirlineCreate {
	ac.mutation.AddFlightIDs(ids...)
	return ac
}

// AddFlights adds the "flights" edges to the Flight entity.
func (ac *AirlineCreate) AddFlights(f ...*Flight) *AirlineCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ac.AddFlightIDs(ids...)
}

// Mutation returns the AirlineMutation object of the builder.
func (ac *AirlineCreate) Mutation() *AirlineMutation {
	return ac.mutation
}

// Save creates the Airline in the database.
func (ac *AirlineCreate) Save(ctx context.Context) (*Airline, error) {
	var (
		err  error
		node *Airline
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AirlineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AirlineCreate) SaveX(ctx context.Context) *Airline {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AirlineCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AirlineCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AirlineCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := airline.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := airline.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := airline.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AirlineCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Airline.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := airline.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Airline.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IataCode(); !ok {
		return &ValidationError{Name: "iata_code", err: errors.New(`ent: missing required field "Airline.iata_code"`)}
	}
	if v, ok := ac.mutation.IataCode(); ok {
		if err := airline.IataCodeValidator(v); err != nil {
			return &ValidationError{Name: "iata_code", err: fmt.Errorf(`ent: validator failed for field "Airline.iata_code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IcaoCode(); !ok {
		return &ValidationError{Name: "icao_code", err: errors.New(`ent: missing required field "Airline.icao_code"`)}
	}
	if v, ok := ac.mutation.IcaoCode(); ok {
		if err := airline.IcaoCodeValidator(v); err != nil {
			return &ValidationError{Name: "icao_code", err: fmt.Errorf(`ent: validator failed for field "Airline.icao_code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CallSign(); !ok {
		return &ValidationError{Name: "call_sign", err: errors.New(`ent: missing required field "Airline.call_sign"`)}
	}
	if v, ok := ac.mutation.CallSign(); ok {
		if err := airline.CallSignValidator(v); err != nil {
			return &ValidationError{Name: "call_sign", err: fmt.Errorf(`ent: validator failed for field "Airline.call_sign": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Airline.country"`)}
	}
	if v, ok := ac.mutation.Country(); ok {
		if err := airline.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Airline.country": %w`, err)}
		}
	}
	if _, ok := ac.mutation.LicenseCode(); !ok {
		return &ValidationError{Name: "license_code", err: errors.New(`ent: missing required field "Airline.license_code"`)}
	}
	if v, ok := ac.mutation.LicenseCode(); ok {
		if err := airline.LicenseCodeValidator(v); err != nil {
			return &ValidationError{Name: "license_code", err: fmt.Errorf(`ent: validator failed for field "Airline.license_code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Airline.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Airline.updated_at"`)}
	}
	return nil
}

func (ac *AirlineCreate) sqlSave(ctx context.Context) (*Airline, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AirlineCreate) createSpec() (*Airline, *sqlgraph.CreateSpec) {
	var (
		_node = &Airline{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: airline.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: airline.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airline.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.IataCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airline.FieldIataCode,
		})
		_node.IataCode = value
	}
	if value, ok := ac.mutation.IcaoCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airline.FieldIcaoCode,
		})
		_node.IcaoCode = value
	}
	if value, ok := ac.mutation.CallSign(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airline.FieldCallSign,
		})
		_node.CallSign = value
	}
	if value, ok := ac.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airline.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := ac.mutation.LicenseCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: airline.FieldLicenseCode,
		})
		_node.LicenseCode = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airline.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: airline.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ac.mutation.AircraftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airline.AircraftsTable,
			Columns: []string{airline.AircraftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: aircraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CrewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airline.CrewsTable,
			Columns: []string{airline.CrewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crew.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PilotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airline.PilotsTable,
			Columns: []string{airline.PilotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pilot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FlightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   airline.FlightsTable,
			Columns: []string{airline.FlightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AirlineCreateBulk is the builder for creating many Airline entities in bulk.
type AirlineCreateBulk struct {
	config
	builders []*AirlineCreate
}

// Save creates the Airline entities in the database.
func (acb *AirlineCreateBulk) Save(ctx context.Context) ([]*Airline, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Airline, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AirlineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AirlineCreateBulk) SaveX(ctx context.Context) []*Airline {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AirlineCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AirlineCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
