// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/airport"
	"airbound/internal/ent/frontdesk"
	"airbound/internal/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FrontDesk is the model entity for the FrontDesk schema.
type FrontDesk struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID string `json:"employee_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FrontDeskQuery when eager-loading is set.
	Edges      FrontDeskEdges `json:"edges"`
	airport_id *uuid.UUID
	user_id    *uuid.UUID
}

// FrontDeskEdges holds the relations/edges for other nodes in the graph.
type FrontDeskEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Airport holds the value of the airport edge.
	Airport *Airport `json:"airport,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FrontDeskEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AirportOrErr returns the Airport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FrontDeskEdges) AirportOrErr() (*Airport, error) {
	if e.loadedTypes[1] {
		if e.Airport == nil {
			// The edge airport was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: airport.Label}
		}
		return e.Airport, nil
	}
	return nil, &NotLoadedError{edge: "airport"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FrontDesk) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case frontdesk.FieldEmployeeID:
			values[i] = new(sql.NullString)
		case frontdesk.FieldCreatedAt, frontdesk.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case frontdesk.FieldID:
			values[i] = new(uuid.UUID)
		case frontdesk.ForeignKeys[0]: // airport_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case frontdesk.ForeignKeys[1]: // user_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type FrontDesk", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FrontDesk fields.
func (fd *FrontDesk) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case frontdesk.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fd.ID = *value
			}
		case frontdesk.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				fd.EmployeeID = value.String
			}
		case frontdesk.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fd.CreatedAt = value.Time
			}
		case frontdesk.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fd.UpdatedAt = value.Time
			}
		case frontdesk.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field airport_id", values[i])
			} else if value.Valid {
				fd.airport_id = new(uuid.UUID)
				*fd.airport_id = *value.S.(*uuid.UUID)
			}
		case frontdesk.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				fd.user_id = new(uuid.UUID)
				*fd.user_id = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the FrontDesk entity.
func (fd *FrontDesk) QueryUser() *UserQuery {
	return (&FrontDeskClient{config: fd.config}).QueryUser(fd)
}

// QueryAirport queries the "airport" edge of the FrontDesk entity.
func (fd *FrontDesk) QueryAirport() *AirportQuery {
	return (&FrontDeskClient{config: fd.config}).QueryAirport(fd)
}

// Update returns a builder for updating this FrontDesk.
// Note that you need to call FrontDesk.Unwrap() before calling this method if this FrontDesk
// was returned from a transaction, and the transaction was committed or rolled back.
func (fd *FrontDesk) Update() *FrontDeskUpdateOne {
	return (&FrontDeskClient{config: fd.config}).UpdateOne(fd)
}

// Unwrap unwraps the FrontDesk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fd *FrontDesk) Unwrap() *FrontDesk {
	tx, ok := fd.config.driver.(*txDriver)
	if !ok {
		panic("ent: FrontDesk is not a transactional entity")
	}
	fd.config.driver = tx.drv
	return fd
}

// String implements the fmt.Stringer.
func (fd *FrontDesk) String() string {
	var builder strings.Builder
	builder.WriteString("FrontDesk(")
	builder.WriteString(fmt.Sprintf("id=%v", fd.ID))
	builder.WriteString(", employee_id=")
	builder.WriteString(fd.EmployeeID)
	builder.WriteString(", created_at=")
	builder.WriteString(fd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(fd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FrontDesks is a parsable slice of FrontDesk.
type FrontDesks []*FrontDesk

func (fd FrontDesks) config(cfg config) {
	for _i := range fd {
		fd[_i].config = cfg
	}
}
