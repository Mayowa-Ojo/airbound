// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/customtypes"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/flightschedule"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightScheduleCreate is the builder for creating a FlightSchedule entity.
type FlightScheduleCreate struct {
	config
	mutation *FlightScheduleMutation
	hooks    []Hook
}

// SetWeekDay sets the "week_day" field.
func (fsc *FlightScheduleCreate) SetWeekDay(cd customtypes.WeekDay) *FlightScheduleCreate {
	fsc.mutation.SetWeekDay(cd)
	return fsc
}

// SetNillableWeekDay sets the "week_day" field if the given value is not nil.
func (fsc *FlightScheduleCreate) SetNillableWeekDay(cd *customtypes.WeekDay) *FlightScheduleCreate {
	if cd != nil {
		fsc.SetWeekDay(*cd)
	}
	return fsc
}

// SetScheduleType sets the "schedule_type" field.
func (fsc *FlightScheduleCreate) SetScheduleType(est enums.FlightScheduleType) *FlightScheduleCreate {
	fsc.mutation.SetScheduleType(est)
	return fsc
}

// SetCustomDate sets the "custom_date" field.
func (fsc *FlightScheduleCreate) SetCustomDate(c customtypes.Date) *FlightScheduleCreate {
	fsc.mutation.SetCustomDate(c)
	return fsc
}

// SetNillableCustomDate sets the "custom_date" field if the given value is not nil.
func (fsc *FlightScheduleCreate) SetNillableCustomDate(c *customtypes.Date) *FlightScheduleCreate {
	if c != nil {
		fsc.SetCustomDate(*c)
	}
	return fsc
}

// SetDepartsAt sets the "departs_at" field.
func (fsc *FlightScheduleCreate) SetDepartsAt(c customtypes.Time) *FlightScheduleCreate {
	fsc.mutation.SetDepartsAt(c)
	return fsc
}

// SetArrivesAt sets the "arrives_at" field.
func (fsc *FlightScheduleCreate) SetArrivesAt(c customtypes.Time) *FlightScheduleCreate {
	fsc.mutation.SetArrivesAt(c)
	return fsc
}

// SetCreatedAt sets the "created_at" field.
func (fsc *FlightScheduleCreate) SetCreatedAt(t time.Time) *FlightScheduleCreate {
	fsc.mutation.SetCreatedAt(t)
	return fsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsc *FlightScheduleCreate) SetNillableCreatedAt(t *time.Time) *FlightScheduleCreate {
	if t != nil {
		fsc.SetCreatedAt(*t)
	}
	return fsc
}

// SetUpdatedAt sets the "updated_at" field.
func (fsc *FlightScheduleCreate) SetUpdatedAt(t time.Time) *FlightScheduleCreate {
	fsc.mutation.SetUpdatedAt(t)
	return fsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsc *FlightScheduleCreate) SetNillableUpdatedAt(t *time.Time) *FlightScheduleCreate {
	if t != nil {
		fsc.SetUpdatedAt(*t)
	}
	return fsc
}

// SetID sets the "id" field.
func (fsc *FlightScheduleCreate) SetID(u uuid.UUID) *FlightScheduleCreate {
	fsc.mutation.SetID(u)
	return fsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fsc *FlightScheduleCreate) SetNillableID(u *uuid.UUID) *FlightScheduleCreate {
	if u != nil {
		fsc.SetID(*u)
	}
	return fsc
}

// SetFlightID sets the "flight" edge to the Flight entity by ID.
func (fsc *FlightScheduleCreate) SetFlightID(id uuid.UUID) *FlightScheduleCreate {
	fsc.mutation.SetFlightID(id)
	return fsc
}

// SetNillableFlightID sets the "flight" edge to the Flight entity by ID if the given value is not nil.
func (fsc *FlightScheduleCreate) SetNillableFlightID(id *uuid.UUID) *FlightScheduleCreate {
	if id != nil {
		fsc = fsc.SetFlightID(*id)
	}
	return fsc
}

// SetFlight sets the "flight" edge to the Flight entity.
func (fsc *FlightScheduleCreate) SetFlight(f *Flight) *FlightScheduleCreate {
	return fsc.SetFlightID(f.ID)
}

// AddFlightInstanceIDs adds the "flight_instances" edge to the FlightInstance entity by IDs.
func (fsc *FlightScheduleCreate) AddFlightInstanceIDs(ids ...uuid.UUID) *FlightScheduleCreate {
	fsc.mutation.AddFlightInstanceIDs(ids...)
	return fsc
}

// AddFlightInstances adds the "flight_instances" edges to the FlightInstance entity.
func (fsc *FlightScheduleCreate) AddFlightInstances(f ...*FlightInstance) *FlightScheduleCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fsc.AddFlightInstanceIDs(ids...)
}

// Mutation returns the FlightScheduleMutation object of the builder.
func (fsc *FlightScheduleCreate) Mutation() *FlightScheduleMutation {
	return fsc.mutation
}

// Save creates the FlightSchedule in the database.
func (fsc *FlightScheduleCreate) Save(ctx context.Context) (*FlightSchedule, error) {
	var (
		err  error
		node *FlightSchedule
	)
	fsc.defaults()
	if len(fsc.hooks) == 0 {
		if err = fsc.check(); err != nil {
			return nil, err
		}
		node, err = fsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fsc.check(); err != nil {
				return nil, err
			}
			fsc.mutation = mutation
			if node, err = fsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fsc.hooks) - 1; i >= 0; i-- {
			if fsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FlightScheduleCreate) SaveX(ctx context.Context) *FlightSchedule {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FlightScheduleCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FlightScheduleCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsc *FlightScheduleCreate) defaults() {
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		v := flightschedule.DefaultCreatedAt()
		fsc.mutation.SetCreatedAt(v)
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		v := flightschedule.DefaultUpdatedAt()
		fsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fsc.mutation.ID(); !ok {
		v := flightschedule.DefaultID()
		fsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FlightScheduleCreate) check() error {
	if _, ok := fsc.mutation.ScheduleType(); !ok {
		return &ValidationError{Name: "schedule_type", err: errors.New(`ent: missing required field "FlightSchedule.schedule_type"`)}
	}
	if v, ok := fsc.mutation.ScheduleType(); ok {
		if err := flightschedule.ScheduleTypeValidator(v); err != nil {
			return &ValidationError{Name: "schedule_type", err: fmt.Errorf(`ent: validator failed for field "FlightSchedule.schedule_type": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.DepartsAt(); !ok {
		return &ValidationError{Name: "departs_at", err: errors.New(`ent: missing required field "FlightSchedule.departs_at"`)}
	}
	if _, ok := fsc.mutation.ArrivesAt(); !ok {
		return &ValidationError{Name: "arrives_at", err: errors.New(`ent: missing required field "FlightSchedule.arrives_at"`)}
	}
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FlightSchedule.created_at"`)}
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FlightSchedule.updated_at"`)}
	}
	return nil
}

func (fsc *FlightScheduleCreate) sqlSave(ctx context.Context) (*FlightSchedule, error) {
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (fsc *FlightScheduleCreate) createSpec() (*FlightSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &FlightSchedule{config: fsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flightschedule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightschedule.FieldID,
			},
		}
	)
	if id, ok := fsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fsc.mutation.WeekDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightschedule.FieldWeekDay,
		})
		_node.WeekDay = value
	}
	if value, ok := fsc.mutation.ScheduleType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightschedule.FieldScheduleType,
		})
		_node.ScheduleType = value
	}
	if value, ok := fsc.mutation.CustomDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldCustomDate,
		})
		_node.CustomDate = value
	}
	if value, ok := fsc.mutation.DepartsAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldDepartsAt,
		})
		_node.DepartsAt = value
	}
	if value, ok := fsc.mutation.ArrivesAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldArrivesAt,
		})
		_node.ArrivesAt = value
	}
	if value, ok := fsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightschedule.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightschedule.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := fsc.mutation.FlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightschedule.FlightTable,
			Columns: []string{flightschedule.FlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.flight_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fsc.mutation.FlightInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightschedule.FlightInstancesTable,
			Columns: []string{flightschedule.FlightInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FlightScheduleCreateBulk is the builder for creating many FlightSchedule entities in bulk.
type FlightScheduleCreateBulk struct {
	config
	builders []*FlightScheduleCreate
}

// Save creates the FlightSchedule entities in the database.
func (fscb *FlightScheduleCreateBulk) Save(ctx context.Context) ([]*FlightSchedule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FlightSchedule, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlightScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FlightScheduleCreateBulk) SaveX(ctx context.Context) []*FlightSchedule {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FlightScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FlightScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}
