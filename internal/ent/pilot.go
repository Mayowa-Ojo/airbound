// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/pilot"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Pilot is the model entity for the Pilot schema.
type Pilot struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID string `json:"employee_id,omitempty"`
	// LicenceNumber holds the value of the "licence_number" field.
	LicenceNumber string `json:"licence_number,omitempty"`
	// FlightHours holds the value of the "flight_hours" field.
	FlightHours int `json:"flight_hours,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pilot) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pilot.FieldFlightHours:
			values[i] = new(sql.NullInt64)
		case pilot.FieldEmployeeID, pilot.FieldLicenceNumber:
			values[i] = new(sql.NullString)
		case pilot.FieldCreatedAt, pilot.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case pilot.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pilot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pilot fields.
func (pi *Pilot) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pilot.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pi.ID = *value
			}
		case pilot.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				pi.EmployeeID = value.String
			}
		case pilot.FieldLicenceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field licence_number", values[i])
			} else if value.Valid {
				pi.LicenceNumber = value.String
			}
		case pilot.FieldFlightHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field flight_hours", values[i])
			} else if value.Valid {
				pi.FlightHours = int(value.Int64)
			}
		case pilot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case pilot.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pilot.
// Note that you need to call Pilot.Unwrap() before calling this method if this Pilot
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Pilot) Update() *PilotUpdateOne {
	return (&PilotClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the Pilot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Pilot) Unwrap() *Pilot {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pilot is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Pilot) String() string {
	var builder strings.Builder
	builder.WriteString("Pilot(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", employee_id=")
	builder.WriteString(pi.EmployeeID)
	builder.WriteString(", licence_number=")
	builder.WriteString(pi.LicenceNumber)
	builder.WriteString(", flight_hours=")
	builder.WriteString(fmt.Sprintf("%v", pi.FlightHours))
	builder.WriteString(", created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pilots is a parsable slice of Pilot.
type Pilots []*Pilot

func (pi Pilots) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
