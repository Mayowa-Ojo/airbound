// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/pilot"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PilotCreate is the builder for creating a Pilot entity.
type PilotCreate struct {
	config
	mutation *PilotMutation
	hooks    []Hook
}

// SetEmployeeID sets the "employee_id" field.
func (pc *PilotCreate) SetEmployeeID(s string) *PilotCreate {
	pc.mutation.SetEmployeeID(s)
	return pc
}

// SetLicenceNumber sets the "licence_number" field.
func (pc *PilotCreate) SetLicenceNumber(s string) *PilotCreate {
	pc.mutation.SetLicenceNumber(s)
	return pc
}

// SetFlightHours sets the "flight_hours" field.
func (pc *PilotCreate) SetFlightHours(i int) *PilotCreate {
	pc.mutation.SetFlightHours(i)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PilotCreate) SetCreatedAt(t time.Time) *PilotCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PilotCreate) SetNillableCreatedAt(t *time.Time) *PilotCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PilotCreate) SetUpdatedAt(t time.Time) *PilotCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PilotCreate) SetNillableUpdatedAt(t *time.Time) *PilotCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PilotCreate) SetID(u uuid.UUID) *PilotCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the PilotMutation object of the builder.
func (pc *PilotCreate) Mutation() *PilotMutation {
	return pc.mutation
}

// Save creates the Pilot in the database.
func (pc *PilotCreate) Save(ctx context.Context) (*Pilot, error) {
	var (
		err  error
		node *Pilot
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PilotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PilotCreate) SaveX(ctx context.Context) *Pilot {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PilotCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PilotCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PilotCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pilot.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := pilot.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := pilot.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PilotCreate) check() error {
	if _, ok := pc.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "employee_id"`)}
	}
	if v, ok := pc.mutation.EmployeeID(); ok {
		if err := pilot.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf(`ent: validator failed for field "employee_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.LicenceNumber(); !ok {
		return &ValidationError{Name: "licence_number", err: errors.New(`ent: missing required field "licence_number"`)}
	}
	if v, ok := pc.mutation.LicenceNumber(); ok {
		if err := pilot.LicenceNumberValidator(v); err != nil {
			return &ValidationError{Name: "licence_number", err: fmt.Errorf(`ent: validator failed for field "licence_number": %w`, err)}
		}
	}
	if _, ok := pc.mutation.FlightHours(); !ok {
		return &ValidationError{Name: "flight_hours", err: errors.New(`ent: missing required field "flight_hours"`)}
	}
	if v, ok := pc.mutation.FlightHours(); ok {
		if err := pilot.FlightHoursValidator(v); err != nil {
			return &ValidationError{Name: "flight_hours", err: fmt.Errorf(`ent: validator failed for field "flight_hours": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (pc *PilotCreate) sqlSave(ctx context.Context) (*Pilot, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (pc *PilotCreate) createSpec() (*Pilot, *sqlgraph.CreateSpec) {
	var (
		_node = &Pilot{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pilot.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pilot.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.EmployeeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pilot.FieldEmployeeID,
		})
		_node.EmployeeID = value
	}
	if value, ok := pc.mutation.LicenceNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pilot.FieldLicenceNumber,
		})
		_node.LicenceNumber = value
	}
	if value, ok := pc.mutation.FlightHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pilot.FieldFlightHours,
		})
		_node.FlightHours = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pilot.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pilot.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// PilotCreateBulk is the builder for creating many Pilot entities in bulk.
type PilotCreateBulk struct {
	config
	builders []*PilotCreate
}

// Save creates the Pilot entities in the database.
func (pcb *PilotCreateBulk) Save(ctx context.Context) ([]*Pilot, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pilot, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PilotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PilotCreateBulk) SaveX(ctx context.Context) []*Pilot {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PilotCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PilotCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
