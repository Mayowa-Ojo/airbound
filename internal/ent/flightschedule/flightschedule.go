// Code generated by entc, DO NOT EDIT.

package flightschedule

import (
	"airbound/internal/ent/enums"
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the flightschedule type in the database.
	Label = "flight_schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWeekday holds the string denoting the weekday field in the database.
	FieldWeekday = "weekday"
	// FieldScheduleType holds the string denoting the schedule_type field in the database.
	FieldScheduleType = "schedule_type"
	// FieldCustomDate holds the string denoting the custom_date field in the database.
	FieldCustomDate = "custom_date"
	// FieldDepartsAt holds the string denoting the departs_at field in the database.
	FieldDepartsAt = "departs_at"
	// FieldArrivesAt holds the string denoting the arrives_at field in the database.
	FieldArrivesAt = "arrives_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFlight holds the string denoting the flight edge name in mutations.
	EdgeFlight = "flight"
	// EdgeFlightInstances holds the string denoting the flight_instances edge name in mutations.
	EdgeFlightInstances = "flight_instances"
	// Table holds the table name of the flightschedule in the database.
	Table = "flight_schedules"
	// FlightTable is the table that holds the flight relation/edge.
	FlightTable = "flight_schedules"
	// FlightInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	FlightInverseTable = "flights"
	// FlightColumn is the table column denoting the flight relation/edge.
	FlightColumn = "flight_id"
	// FlightInstancesTable is the table that holds the flight_instances relation/edge.
	FlightInstancesTable = "flight_instances"
	// FlightInstancesInverseTable is the table name for the FlightInstance entity.
	// It exists in this package in order to avoid circular dependency with the "flightinstance" package.
	FlightInstancesInverseTable = "flight_instances"
	// FlightInstancesColumn is the table column denoting the flight_instances relation/edge.
	FlightInstancesColumn = "flight_schedule_id"
)

// Columns holds all SQL columns for flightschedule fields.
var Columns = []string{
	FieldID,
	FieldWeekday,
	FieldScheduleType,
	FieldCustomDate,
	FieldDepartsAt,
	FieldArrivesAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "flight_schedules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"flight_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// WeekdayValidator is a validator for the "weekday" field enum values. It is called by the builders before save.
func WeekdayValidator(w enums.WeekDay) error {
	switch w.String() {
	case "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY":
		return nil
	default:
		return fmt.Errorf("flightschedule: invalid enum value for weekday field: %q", w)
	}
}

// ScheduleTypeValidator is a validator for the "schedule_type" field enum values. It is called by the builders before save.
func ScheduleTypeValidator(st enums.FlightScheduleType) error {
	switch st {
	case "WEEKLY", "CUSTOM":
		return nil
	default:
		return fmt.Errorf("flightschedule: invalid enum value for schedule_type field: %q", st)
	}
}
