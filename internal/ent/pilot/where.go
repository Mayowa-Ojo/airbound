// Code generated by entc, DO NOT EDIT.

package pilot

import (
	"airbound/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// LicenceNumber applies equality check predicate on the "licence_number" field. It's identical to LicenceNumberEQ.
func LicenceNumber(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLicenceNumber), v))
	})
}

// FlightHours applies equality check predicate on the "flight_hours" field. It's identical to FlightHoursEQ.
func FlightHours(v int) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlightHours), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...string) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...string) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDGT applies the GT predicate on the "employee_id" field.
func EmployeeIDGT(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDGTE applies the GTE predicate on the "employee_id" field.
func EmployeeIDGTE(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDLT applies the LT predicate on the "employee_id" field.
func EmployeeIDLT(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDLTE applies the LTE predicate on the "employee_id" field.
func EmployeeIDLTE(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDContains applies the Contains predicate on the "employee_id" field.
func EmployeeIDContains(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDHasPrefix applies the HasPrefix predicate on the "employee_id" field.
func EmployeeIDHasPrefix(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDHasSuffix applies the HasSuffix predicate on the "employee_id" field.
func EmployeeIDHasSuffix(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDEqualFold applies the EqualFold predicate on the "employee_id" field.
func EmployeeIDEqualFold(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDContainsFold applies the ContainsFold predicate on the "employee_id" field.
func EmployeeIDContainsFold(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmployeeID), v))
	})
}

// LicenceNumberEQ applies the EQ predicate on the "licence_number" field.
func LicenceNumberEQ(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberNEQ applies the NEQ predicate on the "licence_number" field.
func LicenceNumberNEQ(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberIn applies the In predicate on the "licence_number" field.
func LicenceNumberIn(vs ...string) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLicenceNumber), v...))
	})
}

// LicenceNumberNotIn applies the NotIn predicate on the "licence_number" field.
func LicenceNumberNotIn(vs ...string) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLicenceNumber), v...))
	})
}

// LicenceNumberGT applies the GT predicate on the "licence_number" field.
func LicenceNumberGT(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberGTE applies the GTE predicate on the "licence_number" field.
func LicenceNumberGTE(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberLT applies the LT predicate on the "licence_number" field.
func LicenceNumberLT(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberLTE applies the LTE predicate on the "licence_number" field.
func LicenceNumberLTE(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberContains applies the Contains predicate on the "licence_number" field.
func LicenceNumberContains(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberHasPrefix applies the HasPrefix predicate on the "licence_number" field.
func LicenceNumberHasPrefix(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberHasSuffix applies the HasSuffix predicate on the "licence_number" field.
func LicenceNumberHasSuffix(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberEqualFold applies the EqualFold predicate on the "licence_number" field.
func LicenceNumberEqualFold(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLicenceNumber), v))
	})
}

// LicenceNumberContainsFold applies the ContainsFold predicate on the "licence_number" field.
func LicenceNumberContainsFold(v string) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLicenceNumber), v))
	})
}

// FlightHoursEQ applies the EQ predicate on the "flight_hours" field.
func FlightHoursEQ(v int) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlightHours), v))
	})
}

// FlightHoursNEQ applies the NEQ predicate on the "flight_hours" field.
func FlightHoursNEQ(v int) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlightHours), v))
	})
}

// FlightHoursIn applies the In predicate on the "flight_hours" field.
func FlightHoursIn(vs ...int) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlightHours), v...))
	})
}

// FlightHoursNotIn applies the NotIn predicate on the "flight_hours" field.
func FlightHoursNotIn(vs ...int) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlightHours), v...))
	})
}

// FlightHoursGT applies the GT predicate on the "flight_hours" field.
func FlightHoursGT(v int) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlightHours), v))
	})
}

// FlightHoursGTE applies the GTE predicate on the "flight_hours" field.
func FlightHoursGTE(v int) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlightHours), v))
	})
}

// FlightHoursLT applies the LT predicate on the "flight_hours" field.
func FlightHoursLT(v int) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlightHours), v))
	})
}

// FlightHoursLTE applies the LTE predicate on the "flight_hours" field.
func FlightHoursLTE(v int) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlightHours), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Pilot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pilot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pilot) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pilot) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pilot) predicate.Pilot {
	return predicate.Pilot(func(s *sql.Selector) {
		p(s.Not())
	})
}
