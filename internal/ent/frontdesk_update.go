// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/frontdesk"
	"airbound/internal/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FrontDeskUpdate is the builder for updating FrontDesk entities.
type FrontDeskUpdate struct {
	config
	hooks    []Hook
	mutation *FrontDeskMutation
}

// Where appends a list predicates to the FrontDeskUpdate builder.
func (fdu *FrontDeskUpdate) Where(ps ...predicate.FrontDesk) *FrontDeskUpdate {
	fdu.mutation.Where(ps...)
	return fdu
}

// SetEmployeeID sets the "employee_id" field.
func (fdu *FrontDeskUpdate) SetEmployeeID(s string) *FrontDeskUpdate {
	fdu.mutation.SetEmployeeID(s)
	return fdu
}

// SetCreatedAt sets the "created_at" field.
func (fdu *FrontDeskUpdate) SetCreatedAt(t time.Time) *FrontDeskUpdate {
	fdu.mutation.SetCreatedAt(t)
	return fdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fdu *FrontDeskUpdate) SetNillableCreatedAt(t *time.Time) *FrontDeskUpdate {
	if t != nil {
		fdu.SetCreatedAt(*t)
	}
	return fdu
}

// SetUpdatedAt sets the "updated_at" field.
func (fdu *FrontDeskUpdate) SetUpdatedAt(t time.Time) *FrontDeskUpdate {
	fdu.mutation.SetUpdatedAt(t)
	return fdu
}

// Mutation returns the FrontDeskMutation object of the builder.
func (fdu *FrontDeskUpdate) Mutation() *FrontDeskMutation {
	return fdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdu *FrontDeskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fdu.defaults()
	if len(fdu.hooks) == 0 {
		if err = fdu.check(); err != nil {
			return 0, err
		}
		affected, err = fdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrontDeskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fdu.check(); err != nil {
				return 0, err
			}
			fdu.mutation = mutation
			affected, err = fdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fdu.hooks) - 1; i >= 0; i-- {
			if fdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FrontDeskUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FrontDeskUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FrontDeskUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdu *FrontDeskUpdate) defaults() {
	if _, ok := fdu.mutation.UpdatedAt(); !ok {
		v := frontdesk.UpdateDefaultUpdatedAt()
		fdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdu *FrontDeskUpdate) check() error {
	if v, ok := fdu.mutation.EmployeeID(); ok {
		if err := frontdesk.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf("ent: validator failed for field \"employee_id\": %w", err)}
		}
	}
	return nil
}

func (fdu *FrontDeskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frontdesk.Table,
			Columns: frontdesk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: frontdesk.FieldID,
			},
		},
	}
	if ps := fdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.EmployeeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontdesk.FieldEmployeeID,
		})
	}
	if value, ok := fdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frontdesk.FieldCreatedAt,
		})
	}
	if value, ok := fdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frontdesk.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frontdesk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FrontDeskUpdateOne is the builder for updating a single FrontDesk entity.
type FrontDeskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FrontDeskMutation
}

// SetEmployeeID sets the "employee_id" field.
func (fduo *FrontDeskUpdateOne) SetEmployeeID(s string) *FrontDeskUpdateOne {
	fduo.mutation.SetEmployeeID(s)
	return fduo
}

// SetCreatedAt sets the "created_at" field.
func (fduo *FrontDeskUpdateOne) SetCreatedAt(t time.Time) *FrontDeskUpdateOne {
	fduo.mutation.SetCreatedAt(t)
	return fduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fduo *FrontDeskUpdateOne) SetNillableCreatedAt(t *time.Time) *FrontDeskUpdateOne {
	if t != nil {
		fduo.SetCreatedAt(*t)
	}
	return fduo
}

// SetUpdatedAt sets the "updated_at" field.
func (fduo *FrontDeskUpdateOne) SetUpdatedAt(t time.Time) *FrontDeskUpdateOne {
	fduo.mutation.SetUpdatedAt(t)
	return fduo
}

// Mutation returns the FrontDeskMutation object of the builder.
func (fduo *FrontDeskUpdateOne) Mutation() *FrontDeskMutation {
	return fduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fduo *FrontDeskUpdateOne) Select(field string, fields ...string) *FrontDeskUpdateOne {
	fduo.fields = append([]string{field}, fields...)
	return fduo
}

// Save executes the query and returns the updated FrontDesk entity.
func (fduo *FrontDeskUpdateOne) Save(ctx context.Context) (*FrontDesk, error) {
	var (
		err  error
		node *FrontDesk
	)
	fduo.defaults()
	if len(fduo.hooks) == 0 {
		if err = fduo.check(); err != nil {
			return nil, err
		}
		node, err = fduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrontDeskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fduo.check(); err != nil {
				return nil, err
			}
			fduo.mutation = mutation
			node, err = fduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fduo.hooks) - 1; i >= 0; i-- {
			if fduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FrontDeskUpdateOne) SaveX(ctx context.Context) *FrontDesk {
	node, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fduo *FrontDeskUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FrontDeskUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fduo *FrontDeskUpdateOne) defaults() {
	if _, ok := fduo.mutation.UpdatedAt(); !ok {
		v := frontdesk.UpdateDefaultUpdatedAt()
		fduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fduo *FrontDeskUpdateOne) check() error {
	if v, ok := fduo.mutation.EmployeeID(); ok {
		if err := frontdesk.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf("ent: validator failed for field \"employee_id\": %w", err)}
		}
	}
	return nil
}

func (fduo *FrontDeskUpdateOne) sqlSave(ctx context.Context) (_node *FrontDesk, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frontdesk.Table,
			Columns: frontdesk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: frontdesk.FieldID,
			},
		},
	}
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FrontDesk.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, frontdesk.FieldID)
		for _, f := range fields {
			if !frontdesk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != frontdesk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fduo.mutation.EmployeeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontdesk.FieldEmployeeID,
		})
	}
	if value, ok := fduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frontdesk.FieldCreatedAt,
		})
	}
	if value, ok := fduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frontdesk.FieldUpdatedAt,
		})
	}
	_node = &FrontDesk{config: fduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frontdesk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
