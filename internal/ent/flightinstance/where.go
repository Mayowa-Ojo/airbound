// Code generated by entc, DO NOT EDIT.

package flightinstance

import (
	"airbound/internal/ent/enums"
	"airbound/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DepartureGate applies equality check predicate on the "departure_gate" field. It's identical to DepartureGateEQ.
func DepartureGate(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartureGate), v))
	})
}

// ArrivalGate applies equality check predicate on the "arrival_gate" field. It's identical to ArrivalGateEQ.
func ArrivalGate(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArrivalGate), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DepartureGateEQ applies the EQ predicate on the "departure_gate" field.
func DepartureGateEQ(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartureGate), v))
	})
}

// DepartureGateNEQ applies the NEQ predicate on the "departure_gate" field.
func DepartureGateNEQ(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepartureGate), v))
	})
}

// DepartureGateIn applies the In predicate on the "departure_gate" field.
func DepartureGateIn(vs ...int) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepartureGate), v...))
	})
}

// DepartureGateNotIn applies the NotIn predicate on the "departure_gate" field.
func DepartureGateNotIn(vs ...int) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepartureGate), v...))
	})
}

// DepartureGateGT applies the GT predicate on the "departure_gate" field.
func DepartureGateGT(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepartureGate), v))
	})
}

// DepartureGateGTE applies the GTE predicate on the "departure_gate" field.
func DepartureGateGTE(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepartureGate), v))
	})
}

// DepartureGateLT applies the LT predicate on the "departure_gate" field.
func DepartureGateLT(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepartureGate), v))
	})
}

// DepartureGateLTE applies the LTE predicate on the "departure_gate" field.
func DepartureGateLTE(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepartureGate), v))
	})
}

// ArrivalGateEQ applies the EQ predicate on the "arrival_gate" field.
func ArrivalGateEQ(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArrivalGate), v))
	})
}

// ArrivalGateNEQ applies the NEQ predicate on the "arrival_gate" field.
func ArrivalGateNEQ(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArrivalGate), v))
	})
}

// ArrivalGateIn applies the In predicate on the "arrival_gate" field.
func ArrivalGateIn(vs ...int) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArrivalGate), v...))
	})
}

// ArrivalGateNotIn applies the NotIn predicate on the "arrival_gate" field.
func ArrivalGateNotIn(vs ...int) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArrivalGate), v...))
	})
}

// ArrivalGateGT applies the GT predicate on the "arrival_gate" field.
func ArrivalGateGT(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArrivalGate), v))
	})
}

// ArrivalGateGTE applies the GTE predicate on the "arrival_gate" field.
func ArrivalGateGTE(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArrivalGate), v))
	})
}

// ArrivalGateLT applies the LT predicate on the "arrival_gate" field.
func ArrivalGateLT(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArrivalGate), v))
	})
}

// ArrivalGateLTE applies the LTE predicate on the "arrival_gate" field.
func ArrivalGateLTE(v int) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArrivalGate), v))
	})
}

// FlightStatusEQ applies the EQ predicate on the "flight_status" field.
func FlightStatusEQ(v enums.FlightStatus) predicate.FlightInstance {
	vc := v
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlightStatus), vc))
	})
}

// FlightStatusNEQ applies the NEQ predicate on the "flight_status" field.
func FlightStatusNEQ(v enums.FlightStatus) predicate.FlightInstance {
	vc := v
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlightStatus), vc))
	})
}

// FlightStatusIn applies the In predicate on the "flight_status" field.
func FlightStatusIn(vs ...enums.FlightStatus) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlightStatus), v...))
	})
}

// FlightStatusNotIn applies the NotIn predicate on the "flight_status" field.
func FlightStatusNotIn(vs ...enums.FlightStatus) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlightStatus), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FlightInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlightInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasFlight applies the HasEdge predicate on the "flight" edge.
func HasFlight() predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlightTable, FlightColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlightWith applies the HasEdge predicate on the "flight" edge with a given conditions (other predicates).
func HasFlightWith(preds ...predicate.Flight) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlightTable, FlightColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAircraft applies the HasEdge predicate on the "aircraft" edge.
func HasAircraft() predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AircraftTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AircraftTable, AircraftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAircraftWith applies the HasEdge predicate on the "aircraft" edge with a given conditions (other predicates).
func HasAircraftWith(preds ...predicate.Aircraft) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AircraftInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AircraftTable, AircraftColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFlightReservations applies the HasEdge predicate on the "flight_reservations" edge.
func HasFlightReservations() predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightReservationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlightReservationsTable, FlightReservationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlightReservationsWith applies the HasEdge predicate on the "flight_reservations" edge with a given conditions (other predicates).
func HasFlightReservationsWith(preds ...predicate.FlightReservation) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightReservationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlightReservationsTable, FlightReservationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFlightSeats applies the HasEdge predicate on the "flight_seats" edge.
func HasFlightSeats() predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightSeatsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlightSeatsTable, FlightSeatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlightSeatsWith applies the HasEdge predicate on the "flight_seats" edge with a given conditions (other predicates).
func HasFlightSeatsWith(preds ...predicate.FlightSeat) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlightSeatsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlightSeatsTable, FlightSeatsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FlightInstance) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FlightInstance) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FlightInstance) predicate.FlightInstance {
	return predicate.FlightInstance(func(s *sql.Selector) {
		p(s.Not())
	})
}
