// Code generated by entc, DO NOT EDIT.

package flightinstance

import (
	"airbound/internal/ent/enums"
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the flightinstance type in the database.
	Label = "flight_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDepartureGate holds the string denoting the departure_gate field in the database.
	FieldDepartureGate = "departure_gate"
	// FieldArrivalGate holds the string denoting the arrival_gate field in the database.
	FieldArrivalGate = "arrival_gate"
	// FieldFlightStatus holds the string denoting the flight_status field in the database.
	FieldFlightStatus = "flight_status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFlight holds the string denoting the flight edge name in mutations.
	EdgeFlight = "flight"
	// EdgeAircraft holds the string denoting the aircraft edge name in mutations.
	EdgeAircraft = "aircraft"
	// EdgeFlightReservations holds the string denoting the flight_reservations edge name in mutations.
	EdgeFlightReservations = "flight_reservations"
	// EdgeFlightSeats holds the string denoting the flight_seats edge name in mutations.
	EdgeFlightSeats = "flight_seats"
	// Table holds the table name of the flightinstance in the database.
	Table = "flight_instances"
	// FlightTable is the table that holds the flight relation/edge.
	FlightTable = "flight_instances"
	// FlightInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	FlightInverseTable = "flights"
	// FlightColumn is the table column denoting the flight relation/edge.
	FlightColumn = "flight_id"
	// AircraftTable is the table that holds the aircraft relation/edge.
	AircraftTable = "aircrafts"
	// AircraftInverseTable is the table name for the Aircraft entity.
	// It exists in this package in order to avoid circular dependency with the "aircraft" package.
	AircraftInverseTable = "aircrafts"
	// AircraftColumn is the table column denoting the aircraft relation/edge.
	AircraftColumn = "flight_instance_id"
	// FlightReservationsTable is the table that holds the flight_reservations relation/edge.
	FlightReservationsTable = "flight_reservations"
	// FlightReservationsInverseTable is the table name for the FlightReservation entity.
	// It exists in this package in order to avoid circular dependency with the "flightreservation" package.
	FlightReservationsInverseTable = "flight_reservations"
	// FlightReservationsColumn is the table column denoting the flight_reservations relation/edge.
	FlightReservationsColumn = "flight_instance_id"
	// FlightSeatsTable is the table that holds the flight_seats relation/edge.
	FlightSeatsTable = "flight_seats"
	// FlightSeatsInverseTable is the table name for the FlightSeat entity.
	// It exists in this package in order to avoid circular dependency with the "flightseat" package.
	FlightSeatsInverseTable = "flight_seats"
	// FlightSeatsColumn is the table column denoting the flight_seats relation/edge.
	FlightSeatsColumn = "flight_instance_id"
)

// Columns holds all SQL columns for flightinstance fields.
var Columns = []string{
	FieldID,
	FieldDepartureGate,
	FieldArrivalGate,
	FieldFlightStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "flight_instances"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"flight_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DepartureGateValidator is a validator for the "departure_gate" field. It is called by the builders before save.
	DepartureGateValidator func(int) error
	// ArrivalGateValidator is a validator for the "arrival_gate" field. It is called by the builders before save.
	ArrivalGateValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// FlightStatusValidator is a validator for the "flight_status" field enum values. It is called by the builders before save.
func FlightStatusValidator(fs enums.FlightStatus) error {
	switch fs {
	case "ACTIVE", "SCHEDULED", "DELAYED", "DEPARTED", "ARRIVED", "CANCELED":
		return nil
	default:
		return fmt.Errorf("flightinstance: invalid enum value for flight_status field: %q", fs)
	}
}
