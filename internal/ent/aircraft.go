// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/aircraft"
	"airbound/internal/ent/airline"
	"airbound/internal/ent/flightinstance"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Aircraft is the model entity for the Aircraft schema.
type Aircraft struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TailNumber holds the value of the "tail_number" field.
	TailNumber string `json:"tail_number,omitempty"`
	// Manufacturer holds the value of the "manufacturer" field.
	Manufacturer string `json:"manufacturer,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// Range holds the value of the "range" field.
	Range int `json:"range,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AircraftQuery when eager-loading is set.
	Edges                    AircraftEdges `json:"edges"`
	airline_id               *uuid.UUID
	flight_instance_aircraft *uuid.UUID
}

// AircraftEdges holds the relations/edges for other nodes in the graph.
type AircraftEdges struct {
	// Airline holds the value of the airline edge.
	Airline *Airline `json:"airline,omitempty"`
	// FlightInstance holds the value of the flight_instance edge.
	FlightInstance *FlightInstance `json:"flight_instance,omitempty"`
	// Seats holds the value of the seats edge.
	Seats []*Seat `json:"seats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AirlineOrErr returns the Airline value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AircraftEdges) AirlineOrErr() (*Airline, error) {
	if e.loadedTypes[0] {
		if e.Airline == nil {
			// The edge airline was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: airline.Label}
		}
		return e.Airline, nil
	}
	return nil, &NotLoadedError{edge: "airline"}
}

// FlightInstanceOrErr returns the FlightInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AircraftEdges) FlightInstanceOrErr() (*FlightInstance, error) {
	if e.loadedTypes[1] {
		if e.FlightInstance == nil {
			// The edge flight_instance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flightinstance.Label}
		}
		return e.FlightInstance, nil
	}
	return nil, &NotLoadedError{edge: "flight_instance"}
}

// SeatsOrErr returns the Seats value or an error if the edge
// was not loaded in eager-loading.
func (e AircraftEdges) SeatsOrErr() ([]*Seat, error) {
	if e.loadedTypes[2] {
		return e.Seats, nil
	}
	return nil, &NotLoadedError{edge: "seats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Aircraft) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case aircraft.FieldCapacity, aircraft.FieldRange:
			values[i] = new(sql.NullInt64)
		case aircraft.FieldTailNumber, aircraft.FieldManufacturer, aircraft.FieldModel:
			values[i] = new(sql.NullString)
		case aircraft.FieldCreatedAt, aircraft.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case aircraft.FieldID:
			values[i] = new(uuid.UUID)
		case aircraft.ForeignKeys[0]: // airline_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case aircraft.ForeignKeys[1]: // flight_instance_aircraft
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Aircraft", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Aircraft fields.
func (a *Aircraft) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aircraft.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case aircraft.FieldTailNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tail_number", values[i])
			} else if value.Valid {
				a.TailNumber = value.String
			}
		case aircraft.FieldManufacturer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manufacturer", values[i])
			} else if value.Valid {
				a.Manufacturer = value.String
			}
		case aircraft.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				a.Model = value.String
			}
		case aircraft.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				a.Capacity = int(value.Int64)
			}
		case aircraft.FieldRange:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field range", values[i])
			} else if value.Valid {
				a.Range = int(value.Int64)
			}
		case aircraft.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case aircraft.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case aircraft.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field airline_id", values[i])
			} else if value.Valid {
				a.airline_id = new(uuid.UUID)
				*a.airline_id = *value.S.(*uuid.UUID)
			}
		case aircraft.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field flight_instance_aircraft", values[i])
			} else if value.Valid {
				a.flight_instance_aircraft = new(uuid.UUID)
				*a.flight_instance_aircraft = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryAirline queries the "airline" edge of the Aircraft entity.
func (a *Aircraft) QueryAirline() *AirlineQuery {
	return (&AircraftClient{config: a.config}).QueryAirline(a)
}

// QueryFlightInstance queries the "flight_instance" edge of the Aircraft entity.
func (a *Aircraft) QueryFlightInstance() *FlightInstanceQuery {
	return (&AircraftClient{config: a.config}).QueryFlightInstance(a)
}

// QuerySeats queries the "seats" edge of the Aircraft entity.
func (a *Aircraft) QuerySeats() *SeatQuery {
	return (&AircraftClient{config: a.config}).QuerySeats(a)
}

// Update returns a builder for updating this Aircraft.
// Note that you need to call Aircraft.Unwrap() before calling this method if this Aircraft
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Aircraft) Update() *AircraftUpdateOne {
	return (&AircraftClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Aircraft entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Aircraft) Unwrap() *Aircraft {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Aircraft is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Aircraft) String() string {
	var builder strings.Builder
	builder.WriteString("Aircraft(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", tail_number=")
	builder.WriteString(a.TailNumber)
	builder.WriteString(", manufacturer=")
	builder.WriteString(a.Manufacturer)
	builder.WriteString(", model=")
	builder.WriteString(a.Model)
	builder.WriteString(", capacity=")
	builder.WriteString(fmt.Sprintf("%v", a.Capacity))
	builder.WriteString(", range=")
	builder.WriteString(fmt.Sprintf("%v", a.Range))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Aircrafts is a parsable slice of Aircraft.
type Aircrafts []*Aircraft

func (a Aircrafts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
