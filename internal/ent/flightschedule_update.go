// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/customtypes"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flightschedule"
	"airbound/internal/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FlightScheduleUpdate is the builder for updating FlightSchedule entities.
type FlightScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *FlightScheduleMutation
}

// Where appends a list predicates to the FlightScheduleUpdate builder.
func (fsu *FlightScheduleUpdate) Where(ps ...predicate.FlightSchedule) *FlightScheduleUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetWeekday sets the "weekday" field.
func (fsu *FlightScheduleUpdate) SetWeekday(ed enums.WeekDay) *FlightScheduleUpdate {
	fsu.mutation.SetWeekday(ed)
	return fsu
}

// SetNillableWeekday sets the "weekday" field if the given value is not nil.
func (fsu *FlightScheduleUpdate) SetNillableWeekday(ed *enums.WeekDay) *FlightScheduleUpdate {
	if ed != nil {
		fsu.SetWeekday(*ed)
	}
	return fsu
}

// ClearWeekday clears the value of the "weekday" field.
func (fsu *FlightScheduleUpdate) ClearWeekday() *FlightScheduleUpdate {
	fsu.mutation.ClearWeekday()
	return fsu
}

// SetScheduleType sets the "schedule_type" field.
func (fsu *FlightScheduleUpdate) SetScheduleType(est enums.FlightScheduleType) *FlightScheduleUpdate {
	fsu.mutation.SetScheduleType(est)
	return fsu
}

// SetCustomDate sets the "custom_date" field.
func (fsu *FlightScheduleUpdate) SetCustomDate(c customtypes.Date) *FlightScheduleUpdate {
	fsu.mutation.SetCustomDate(c)
	return fsu
}

// SetNillableCustomDate sets the "custom_date" field if the given value is not nil.
func (fsu *FlightScheduleUpdate) SetNillableCustomDate(c *customtypes.Date) *FlightScheduleUpdate {
	if c != nil {
		fsu.SetCustomDate(*c)
	}
	return fsu
}

// ClearCustomDate clears the value of the "custom_date" field.
func (fsu *FlightScheduleUpdate) ClearCustomDate() *FlightScheduleUpdate {
	fsu.mutation.ClearCustomDate()
	return fsu
}

// SetDepartsAt sets the "departs_at" field.
func (fsu *FlightScheduleUpdate) SetDepartsAt(c customtypes.Time) *FlightScheduleUpdate {
	fsu.mutation.SetDepartsAt(c)
	return fsu
}

// SetArrivesAt sets the "arrives_at" field.
func (fsu *FlightScheduleUpdate) SetArrivesAt(c customtypes.Time) *FlightScheduleUpdate {
	fsu.mutation.SetArrivesAt(c)
	return fsu
}

// SetCreatedAt sets the "created_at" field.
func (fsu *FlightScheduleUpdate) SetCreatedAt(t time.Time) *FlightScheduleUpdate {
	fsu.mutation.SetCreatedAt(t)
	return fsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsu *FlightScheduleUpdate) SetNillableCreatedAt(t *time.Time) *FlightScheduleUpdate {
	if t != nil {
		fsu.SetCreatedAt(*t)
	}
	return fsu
}

// SetUpdatedAt sets the "updated_at" field.
func (fsu *FlightScheduleUpdate) SetUpdatedAt(t time.Time) *FlightScheduleUpdate {
	fsu.mutation.SetUpdatedAt(t)
	return fsu
}

// Mutation returns the FlightScheduleMutation object of the builder.
func (fsu *FlightScheduleUpdate) Mutation() *FlightScheduleMutation {
	return fsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FlightScheduleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fsu.defaults()
	if len(fsu.hooks) == 0 {
		if err = fsu.check(); err != nil {
			return 0, err
		}
		affected, err = fsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fsu.check(); err != nil {
				return 0, err
			}
			fsu.mutation = mutation
			affected, err = fsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fsu.hooks) - 1; i >= 0; i-- {
			if fsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FlightScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FlightScheduleUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FlightScheduleUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsu *FlightScheduleUpdate) defaults() {
	if _, ok := fsu.mutation.UpdatedAt(); !ok {
		v := flightschedule.UpdateDefaultUpdatedAt()
		fsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsu *FlightScheduleUpdate) check() error {
	if v, ok := fsu.mutation.Weekday(); ok {
		if err := flightschedule.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf("ent: validator failed for field \"weekday\": %w", err)}
		}
	}
	if v, ok := fsu.mutation.ScheduleType(); ok {
		if err := flightschedule.ScheduleTypeValidator(v); err != nil {
			return &ValidationError{Name: "schedule_type", err: fmt.Errorf("ent: validator failed for field \"schedule_type\": %w", err)}
		}
	}
	return nil
}

func (fsu *FlightScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightschedule.Table,
			Columns: flightschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightschedule.FieldID,
			},
		},
	}
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.Weekday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightschedule.FieldWeekday,
		})
	}
	if fsu.mutation.WeekdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: flightschedule.FieldWeekday,
		})
	}
	if value, ok := fsu.mutation.ScheduleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightschedule.FieldScheduleType,
		})
	}
	if value, ok := fsu.mutation.CustomDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldCustomDate,
		})
	}
	if fsu.mutation.CustomDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flightschedule.FieldCustomDate,
		})
	}
	if value, ok := fsu.mutation.DepartsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldDepartsAt,
		})
	}
	if value, ok := fsu.mutation.ArrivesAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldArrivesAt,
		})
	}
	if value, ok := fsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightschedule.FieldCreatedAt,
		})
	}
	if value, ok := fsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightschedule.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlightScheduleUpdateOne is the builder for updating a single FlightSchedule entity.
type FlightScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightScheduleMutation
}

// SetWeekday sets the "weekday" field.
func (fsuo *FlightScheduleUpdateOne) SetWeekday(ed enums.WeekDay) *FlightScheduleUpdateOne {
	fsuo.mutation.SetWeekday(ed)
	return fsuo
}

// SetNillableWeekday sets the "weekday" field if the given value is not nil.
func (fsuo *FlightScheduleUpdateOne) SetNillableWeekday(ed *enums.WeekDay) *FlightScheduleUpdateOne {
	if ed != nil {
		fsuo.SetWeekday(*ed)
	}
	return fsuo
}

// ClearWeekday clears the value of the "weekday" field.
func (fsuo *FlightScheduleUpdateOne) ClearWeekday() *FlightScheduleUpdateOne {
	fsuo.mutation.ClearWeekday()
	return fsuo
}

// SetScheduleType sets the "schedule_type" field.
func (fsuo *FlightScheduleUpdateOne) SetScheduleType(est enums.FlightScheduleType) *FlightScheduleUpdateOne {
	fsuo.mutation.SetScheduleType(est)
	return fsuo
}

// SetCustomDate sets the "custom_date" field.
func (fsuo *FlightScheduleUpdateOne) SetCustomDate(c customtypes.Date) *FlightScheduleUpdateOne {
	fsuo.mutation.SetCustomDate(c)
	return fsuo
}

// SetNillableCustomDate sets the "custom_date" field if the given value is not nil.
func (fsuo *FlightScheduleUpdateOne) SetNillableCustomDate(c *customtypes.Date) *FlightScheduleUpdateOne {
	if c != nil {
		fsuo.SetCustomDate(*c)
	}
	return fsuo
}

// ClearCustomDate clears the value of the "custom_date" field.
func (fsuo *FlightScheduleUpdateOne) ClearCustomDate() *FlightScheduleUpdateOne {
	fsuo.mutation.ClearCustomDate()
	return fsuo
}

// SetDepartsAt sets the "departs_at" field.
func (fsuo *FlightScheduleUpdateOne) SetDepartsAt(c customtypes.Time) *FlightScheduleUpdateOne {
	fsuo.mutation.SetDepartsAt(c)
	return fsuo
}

// SetArrivesAt sets the "arrives_at" field.
func (fsuo *FlightScheduleUpdateOne) SetArrivesAt(c customtypes.Time) *FlightScheduleUpdateOne {
	fsuo.mutation.SetArrivesAt(c)
	return fsuo
}

// SetCreatedAt sets the "created_at" field.
func (fsuo *FlightScheduleUpdateOne) SetCreatedAt(t time.Time) *FlightScheduleUpdateOne {
	fsuo.mutation.SetCreatedAt(t)
	return fsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsuo *FlightScheduleUpdateOne) SetNillableCreatedAt(t *time.Time) *FlightScheduleUpdateOne {
	if t != nil {
		fsuo.SetCreatedAt(*t)
	}
	return fsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fsuo *FlightScheduleUpdateOne) SetUpdatedAt(t time.Time) *FlightScheduleUpdateOne {
	fsuo.mutation.SetUpdatedAt(t)
	return fsuo
}

// Mutation returns the FlightScheduleMutation object of the builder.
func (fsuo *FlightScheduleUpdateOne) Mutation() *FlightScheduleMutation {
	return fsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FlightScheduleUpdateOne) Select(field string, fields ...string) *FlightScheduleUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FlightSchedule entity.
func (fsuo *FlightScheduleUpdateOne) Save(ctx context.Context) (*FlightSchedule, error) {
	var (
		err  error
		node *FlightSchedule
	)
	fsuo.defaults()
	if len(fsuo.hooks) == 0 {
		if err = fsuo.check(); err != nil {
			return nil, err
		}
		node, err = fsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fsuo.check(); err != nil {
				return nil, err
			}
			fsuo.mutation = mutation
			node, err = fsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fsuo.hooks) - 1; i >= 0; i-- {
			if fsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FlightScheduleUpdateOne) SaveX(ctx context.Context) *FlightSchedule {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FlightScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FlightScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsuo *FlightScheduleUpdateOne) defaults() {
	if _, ok := fsuo.mutation.UpdatedAt(); !ok {
		v := flightschedule.UpdateDefaultUpdatedAt()
		fsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsuo *FlightScheduleUpdateOne) check() error {
	if v, ok := fsuo.mutation.Weekday(); ok {
		if err := flightschedule.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf("ent: validator failed for field \"weekday\": %w", err)}
		}
	}
	if v, ok := fsuo.mutation.ScheduleType(); ok {
		if err := flightschedule.ScheduleTypeValidator(v); err != nil {
			return &ValidationError{Name: "schedule_type", err: fmt.Errorf("ent: validator failed for field \"schedule_type\": %w", err)}
		}
	}
	return nil
}

func (fsuo *FlightScheduleUpdateOne) sqlSave(ctx context.Context) (_node *FlightSchedule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightschedule.Table,
			Columns: flightschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightschedule.FieldID,
			},
		},
	}
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FlightSchedule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flightschedule.FieldID)
		for _, f := range fields {
			if !flightschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flightschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.Weekday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightschedule.FieldWeekday,
		})
	}
	if fsuo.mutation.WeekdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: flightschedule.FieldWeekday,
		})
	}
	if value, ok := fsuo.mutation.ScheduleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightschedule.FieldScheduleType,
		})
	}
	if value, ok := fsuo.mutation.CustomDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldCustomDate,
		})
	}
	if fsuo.mutation.CustomDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flightschedule.FieldCustomDate,
		})
	}
	if value, ok := fsuo.mutation.DepartsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldDepartsAt,
		})
	}
	if value, ok := fsuo.mutation.ArrivesAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightschedule.FieldArrivesAt,
		})
	}
	if value, ok := fsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightschedule.FieldCreatedAt,
		})
	}
	if value, ok := fsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightschedule.FieldUpdatedAt,
		})
	}
	_node = &FlightSchedule{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
