// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/flightseat"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FlightSeat is the model entity for the FlightSeat schema.
type FlightSeat struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Fare holds the value of the "fare" field.
	Fare float64 `json:"fare,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlightSeat) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case flightseat.FieldFare:
			values[i] = new(sql.NullFloat64)
		case flightseat.FieldCreatedAt, flightseat.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case flightseat.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FlightSeat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlightSeat fields.
func (fs *FlightSeat) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flightseat.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fs.ID = *value
			}
		case flightseat.FieldFare:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fare", values[i])
			} else if value.Valid {
				fs.Fare = value.Float64
			}
		case flightseat.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fs.CreatedAt = value.Time
			}
		case flightseat.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fs.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FlightSeat.
// Note that you need to call FlightSeat.Unwrap() before calling this method if this FlightSeat
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FlightSeat) Update() *FlightSeatUpdateOne {
	return (&FlightSeatClient{config: fs.config}).UpdateOne(fs)
}

// Unwrap unwraps the FlightSeat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FlightSeat) Unwrap() *FlightSeat {
	tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlightSeat is not a transactional entity")
	}
	fs.config.driver = tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FlightSeat) String() string {
	var builder strings.Builder
	builder.WriteString("FlightSeat(")
	builder.WriteString(fmt.Sprintf("id=%v", fs.ID))
	builder.WriteString(", fare=")
	builder.WriteString(fmt.Sprintf("%v", fs.Fare))
	builder.WriteString(", created_at=")
	builder.WriteString(fs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(fs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FlightSeats is a parsable slice of FlightSeat.
type FlightSeats []*FlightSeat

func (fs FlightSeats) config(cfg config) {
	for _i := range fs {
		fs[_i].config = cfg
	}
}
