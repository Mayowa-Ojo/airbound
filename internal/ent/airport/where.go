// Code generated by entc, DO NOT EDIT.

package airport

import (
	"airbound/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// IataCode applies equality check predicate on the "iata_code" field. It's identical to IataCodeEQ.
func IataCode(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIataCode), v))
	})
}

// IcaoCode applies equality check predicate on the "icao_code" field. It's identical to IcaoCodeEQ.
func IcaoCode(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcaoCode), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// IataCodeEQ applies the EQ predicate on the "iata_code" field.
func IataCodeEQ(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIataCode), v))
	})
}

// IataCodeNEQ applies the NEQ predicate on the "iata_code" field.
func IataCodeNEQ(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIataCode), v))
	})
}

// IataCodeIn applies the In predicate on the "iata_code" field.
func IataCodeIn(vs ...string) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIataCode), v...))
	})
}

// IataCodeNotIn applies the NotIn predicate on the "iata_code" field.
func IataCodeNotIn(vs ...string) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIataCode), v...))
	})
}

// IataCodeGT applies the GT predicate on the "iata_code" field.
func IataCodeGT(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIataCode), v))
	})
}

// IataCodeGTE applies the GTE predicate on the "iata_code" field.
func IataCodeGTE(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIataCode), v))
	})
}

// IataCodeLT applies the LT predicate on the "iata_code" field.
func IataCodeLT(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIataCode), v))
	})
}

// IataCodeLTE applies the LTE predicate on the "iata_code" field.
func IataCodeLTE(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIataCode), v))
	})
}

// IataCodeContains applies the Contains predicate on the "iata_code" field.
func IataCodeContains(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIataCode), v))
	})
}

// IataCodeHasPrefix applies the HasPrefix predicate on the "iata_code" field.
func IataCodeHasPrefix(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIataCode), v))
	})
}

// IataCodeHasSuffix applies the HasSuffix predicate on the "iata_code" field.
func IataCodeHasSuffix(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIataCode), v))
	})
}

// IataCodeEqualFold applies the EqualFold predicate on the "iata_code" field.
func IataCodeEqualFold(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIataCode), v))
	})
}

// IataCodeContainsFold applies the ContainsFold predicate on the "iata_code" field.
func IataCodeContainsFold(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIataCode), v))
	})
}

// IcaoCodeEQ applies the EQ predicate on the "icao_code" field.
func IcaoCodeEQ(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeNEQ applies the NEQ predicate on the "icao_code" field.
func IcaoCodeNEQ(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeIn applies the In predicate on the "icao_code" field.
func IcaoCodeIn(vs ...string) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcaoCode), v...))
	})
}

// IcaoCodeNotIn applies the NotIn predicate on the "icao_code" field.
func IcaoCodeNotIn(vs ...string) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcaoCode), v...))
	})
}

// IcaoCodeGT applies the GT predicate on the "icao_code" field.
func IcaoCodeGT(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeGTE applies the GTE predicate on the "icao_code" field.
func IcaoCodeGTE(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeLT applies the LT predicate on the "icao_code" field.
func IcaoCodeLT(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeLTE applies the LTE predicate on the "icao_code" field.
func IcaoCodeLTE(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeContains applies the Contains predicate on the "icao_code" field.
func IcaoCodeContains(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeHasPrefix applies the HasPrefix predicate on the "icao_code" field.
func IcaoCodeHasPrefix(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeHasSuffix applies the HasSuffix predicate on the "icao_code" field.
func IcaoCodeHasSuffix(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeEqualFold applies the EqualFold predicate on the "icao_code" field.
func IcaoCodeEqualFold(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcaoCode), v))
	})
}

// IcaoCodeContainsFold applies the ContainsFold predicate on the "icao_code" field.
func IcaoCodeContainsFold(v string) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcaoCode), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Airport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Airport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasAddress applies the HasEdge predicate on the "address" edge.
func HasAddress() predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AddressTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressWith applies the HasEdge predicate on the "address" edge with a given conditions (other predicates).
func HasAddressWith(preds ...predicate.Address) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AddressInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFrontDesks applies the HasEdge predicate on the "front_desks" edge.
func HasFrontDesks() predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FrontDesksTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FrontDesksTable, FrontDesksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFrontDesksWith applies the HasEdge predicate on the "front_desks" edge with a given conditions (other predicates).
func HasFrontDesksWith(preds ...predicate.FrontDesk) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FrontDesksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FrontDesksTable, FrontDesksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartureFlights applies the HasEdge predicate on the "departure_flights" edge.
func HasDepartureFlights() predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartureFlightsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DepartureFlightsTable, DepartureFlightsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartureFlightsWith applies the HasEdge predicate on the "departure_flights" edge with a given conditions (other predicates).
func HasDepartureFlightsWith(preds ...predicate.Flight) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartureFlightsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DepartureFlightsTable, DepartureFlightsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArrivalFlights applies the HasEdge predicate on the "arrival_flights" edge.
func HasArrivalFlights() predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArrivalFlightsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArrivalFlightsTable, ArrivalFlightsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArrivalFlightsWith applies the HasEdge predicate on the "arrival_flights" edge with a given conditions (other predicates).
func HasArrivalFlightsWith(preds ...predicate.Flight) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArrivalFlightsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArrivalFlightsTable, ArrivalFlightsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginIteneraries applies the HasEdge predicate on the "origin_iteneraries" edge.
func HasOriginIteneraries() predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginItenerariesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OriginItenerariesTable, OriginItenerariesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginItenerariesWith applies the HasEdge predicate on the "origin_iteneraries" edge with a given conditions (other predicates).
func HasOriginItenerariesWith(preds ...predicate.Itenerary) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OriginItenerariesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OriginItenerariesTable, OriginItenerariesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDestinationIteneraries applies the HasEdge predicate on the "destination_iteneraries" edge.
func HasDestinationIteneraries() predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DestinationItenerariesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DestinationItenerariesTable, DestinationItenerariesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDestinationItenerariesWith applies the HasEdge predicate on the "destination_iteneraries" edge with a given conditions (other predicates).
func HasDestinationItenerariesWith(preds ...predicate.Itenerary) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DestinationItenerariesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DestinationItenerariesTable, DestinationItenerariesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Airport) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Airport) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Airport) predicate.Airport {
	return predicate.Airport(func(s *sql.Selector) {
		p(s.Not())
	})
}
