// Code generated by entc, DO NOT EDIT.

package airport

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the airport type in the database.
	Label = "airport"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIataCode holds the string denoting the iata_code field in the database.
	FieldIataCode = "iata_code"
	// FieldIcaoCode holds the string denoting the icao_code field in the database.
	FieldIcaoCode = "icao_code"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeFrontDesks holds the string denoting the front_desks edge name in mutations.
	EdgeFrontDesks = "front_desks"
	// EdgeDepartureFlights holds the string denoting the departure_flights edge name in mutations.
	EdgeDepartureFlights = "departure_flights"
	// EdgeArrivalFlights holds the string denoting the arrival_flights edge name in mutations.
	EdgeArrivalFlights = "arrival_flights"
	// EdgeOriginIteneraries holds the string denoting the origin_iteneraries edge name in mutations.
	EdgeOriginIteneraries = "origin_iteneraries"
	// EdgeDestinationIteneraries holds the string denoting the destination_iteneraries edge name in mutations.
	EdgeDestinationIteneraries = "destination_iteneraries"
	// Table holds the table name of the airport in the database.
	Table = "airports"
	// AddressTable is the table that holds the address relation/edge.
	AddressTable = "airports"
	// AddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressInverseTable = "addresses"
	// AddressColumn is the table column denoting the address relation/edge.
	AddressColumn = "address_id"
	// FrontDesksTable is the table that holds the front_desks relation/edge.
	FrontDesksTable = "front_desks"
	// FrontDesksInverseTable is the table name for the FrontDesk entity.
	// It exists in this package in order to avoid circular dependency with the "frontdesk" package.
	FrontDesksInverseTable = "front_desks"
	// FrontDesksColumn is the table column denoting the front_desks relation/edge.
	FrontDesksColumn = "airport_id"
	// DepartureFlightsTable is the table that holds the departure_flights relation/edge.
	DepartureFlightsTable = "flights"
	// DepartureFlightsInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	DepartureFlightsInverseTable = "flights"
	// DepartureFlightsColumn is the table column denoting the departure_flights relation/edge.
	DepartureFlightsColumn = "depature_airport_id"
	// ArrivalFlightsTable is the table that holds the arrival_flights relation/edge.
	ArrivalFlightsTable = "flights"
	// ArrivalFlightsInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	ArrivalFlightsInverseTable = "flights"
	// ArrivalFlightsColumn is the table column denoting the arrival_flights relation/edge.
	ArrivalFlightsColumn = "arrival_airport_id"
	// OriginItenerariesTable is the table that holds the origin_iteneraries relation/edge.
	OriginItenerariesTable = "iteneraries"
	// OriginItenerariesInverseTable is the table name for the Itenerary entity.
	// It exists in this package in order to avoid circular dependency with the "itenerary" package.
	OriginItenerariesInverseTable = "iteneraries"
	// OriginItenerariesColumn is the table column denoting the origin_iteneraries relation/edge.
	OriginItenerariesColumn = "origin_airport_id"
	// DestinationItenerariesTable is the table that holds the destination_iteneraries relation/edge.
	DestinationItenerariesTable = "iteneraries"
	// DestinationItenerariesInverseTable is the table name for the Itenerary entity.
	// It exists in this package in order to avoid circular dependency with the "itenerary" package.
	DestinationItenerariesInverseTable = "iteneraries"
	// DestinationItenerariesColumn is the table column denoting the destination_iteneraries relation/edge.
	DestinationItenerariesColumn = "destination_airport_id"
)

// Columns holds all SQL columns for airport fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIataCode,
	FieldIcaoCode,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "airports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"address_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// IataCodeValidator is a validator for the "iata_code" field. It is called by the builders before save.
	IataCodeValidator func(string) error
	// IcaoCodeValidator is a validator for the "icao_code" field. It is called by the builders before save.
	IcaoCodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
