// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flightreservation"
	"airbound/internal/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FlightReservationUpdate is the builder for updating FlightReservation entities.
type FlightReservationUpdate struct {
	config
	hooks    []Hook
	mutation *FlightReservationMutation
}

// Where appends a list predicates to the FlightReservationUpdate builder.
func (fru *FlightReservationUpdate) Where(ps ...predicate.FlightReservation) *FlightReservationUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetReservationNumber sets the "reservation_number" field.
func (fru *FlightReservationUpdate) SetReservationNumber(s string) *FlightReservationUpdate {
	fru.mutation.SetReservationNumber(s)
	return fru
}

// SetReservationStatus sets the "reservation_status" field.
func (fru *FlightReservationUpdate) SetReservationStatus(es enums.ReservationStatus) *FlightReservationUpdate {
	fru.mutation.SetReservationStatus(es)
	return fru
}

// SetCreatedAt sets the "created_at" field.
func (fru *FlightReservationUpdate) SetCreatedAt(t time.Time) *FlightReservationUpdate {
	fru.mutation.SetCreatedAt(t)
	return fru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fru *FlightReservationUpdate) SetNillableCreatedAt(t *time.Time) *FlightReservationUpdate {
	if t != nil {
		fru.SetCreatedAt(*t)
	}
	return fru
}

// SetUpdatedAt sets the "updated_at" field.
func (fru *FlightReservationUpdate) SetUpdatedAt(t time.Time) *FlightReservationUpdate {
	fru.mutation.SetUpdatedAt(t)
	return fru
}

// Mutation returns the FlightReservationMutation object of the builder.
func (fru *FlightReservationUpdate) Mutation() *FlightReservationMutation {
	return fru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FlightReservationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fru.defaults()
	if len(fru.hooks) == 0 {
		if err = fru.check(); err != nil {
			return 0, err
		}
		affected, err = fru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightReservationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fru.check(); err != nil {
				return 0, err
			}
			fru.mutation = mutation
			affected, err = fru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fru.hooks) - 1; i >= 0; i-- {
			if fru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FlightReservationUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FlightReservationUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FlightReservationUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fru *FlightReservationUpdate) defaults() {
	if _, ok := fru.mutation.UpdatedAt(); !ok {
		v := flightreservation.UpdateDefaultUpdatedAt()
		fru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FlightReservationUpdate) check() error {
	if v, ok := fru.mutation.ReservationNumber(); ok {
		if err := flightreservation.ReservationNumberValidator(v); err != nil {
			return &ValidationError{Name: "reservation_number", err: fmt.Errorf("ent: validator failed for field \"reservation_number\": %w", err)}
		}
	}
	if v, ok := fru.mutation.ReservationStatus(); ok {
		if err := flightreservation.ReservationStatusValidator(v); err != nil {
			return &ValidationError{Name: "reservation_status", err: fmt.Errorf("ent: validator failed for field \"reservation_status\": %w", err)}
		}
	}
	return nil
}

func (fru *FlightReservationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightreservation.Table,
			Columns: flightreservation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightreservation.FieldID,
			},
		},
	}
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.ReservationNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightreservation.FieldReservationNumber,
		})
	}
	if value, ok := fru.mutation.ReservationStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightreservation.FieldReservationStatus,
		})
	}
	if value, ok := fru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightreservation.FieldCreatedAt,
		})
	}
	if value, ok := fru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightreservation.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightreservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlightReservationUpdateOne is the builder for updating a single FlightReservation entity.
type FlightReservationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightReservationMutation
}

// SetReservationNumber sets the "reservation_number" field.
func (fruo *FlightReservationUpdateOne) SetReservationNumber(s string) *FlightReservationUpdateOne {
	fruo.mutation.SetReservationNumber(s)
	return fruo
}

// SetReservationStatus sets the "reservation_status" field.
func (fruo *FlightReservationUpdateOne) SetReservationStatus(es enums.ReservationStatus) *FlightReservationUpdateOne {
	fruo.mutation.SetReservationStatus(es)
	return fruo
}

// SetCreatedAt sets the "created_at" field.
func (fruo *FlightReservationUpdateOne) SetCreatedAt(t time.Time) *FlightReservationUpdateOne {
	fruo.mutation.SetCreatedAt(t)
	return fruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fruo *FlightReservationUpdateOne) SetNillableCreatedAt(t *time.Time) *FlightReservationUpdateOne {
	if t != nil {
		fruo.SetCreatedAt(*t)
	}
	return fruo
}

// SetUpdatedAt sets the "updated_at" field.
func (fruo *FlightReservationUpdateOne) SetUpdatedAt(t time.Time) *FlightReservationUpdateOne {
	fruo.mutation.SetUpdatedAt(t)
	return fruo
}

// Mutation returns the FlightReservationMutation object of the builder.
func (fruo *FlightReservationUpdateOne) Mutation() *FlightReservationMutation {
	return fruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FlightReservationUpdateOne) Select(field string, fields ...string) *FlightReservationUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FlightReservation entity.
func (fruo *FlightReservationUpdateOne) Save(ctx context.Context) (*FlightReservation, error) {
	var (
		err  error
		node *FlightReservation
	)
	fruo.defaults()
	if len(fruo.hooks) == 0 {
		if err = fruo.check(); err != nil {
			return nil, err
		}
		node, err = fruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightReservationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fruo.check(); err != nil {
				return nil, err
			}
			fruo.mutation = mutation
			node, err = fruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fruo.hooks) - 1; i >= 0; i-- {
			if fruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FlightReservationUpdateOne) SaveX(ctx context.Context) *FlightReservation {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FlightReservationUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FlightReservationUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fruo *FlightReservationUpdateOne) defaults() {
	if _, ok := fruo.mutation.UpdatedAt(); !ok {
		v := flightreservation.UpdateDefaultUpdatedAt()
		fruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FlightReservationUpdateOne) check() error {
	if v, ok := fruo.mutation.ReservationNumber(); ok {
		if err := flightreservation.ReservationNumberValidator(v); err != nil {
			return &ValidationError{Name: "reservation_number", err: fmt.Errorf("ent: validator failed for field \"reservation_number\": %w", err)}
		}
	}
	if v, ok := fruo.mutation.ReservationStatus(); ok {
		if err := flightreservation.ReservationStatusValidator(v); err != nil {
			return &ValidationError{Name: "reservation_status", err: fmt.Errorf("ent: validator failed for field \"reservation_status\": %w", err)}
		}
	}
	return nil
}

func (fruo *FlightReservationUpdateOne) sqlSave(ctx context.Context) (_node *FlightReservation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightreservation.Table,
			Columns: flightreservation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightreservation.FieldID,
			},
		},
	}
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FlightReservation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flightreservation.FieldID)
		for _, f := range fields {
			if !flightreservation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flightreservation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.ReservationNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightreservation.FieldReservationNumber,
		})
	}
	if value, ok := fruo.mutation.ReservationStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightreservation.FieldReservationStatus,
		})
	}
	if value, ok := fruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightreservation.FieldCreatedAt,
		})
	}
	if value, ok := fruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightreservation.FieldUpdatedAt,
		})
	}
	_node = &FlightReservation{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightreservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
