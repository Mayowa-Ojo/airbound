// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/flightreservation"
	"airbound/internal/ent/itenerary"
	"airbound/internal/ent/passenger"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightReservationCreate is the builder for creating a FlightReservation entity.
type FlightReservationCreate struct {
	config
	mutation *FlightReservationMutation
	hooks    []Hook
}

// SetReservationNumber sets the "reservation_number" field.
func (frc *FlightReservationCreate) SetReservationNumber(s string) *FlightReservationCreate {
	frc.mutation.SetReservationNumber(s)
	return frc
}

// SetReservationStatus sets the "reservation_status" field.
func (frc *FlightReservationCreate) SetReservationStatus(es enums.ReservationStatus) *FlightReservationCreate {
	frc.mutation.SetReservationStatus(es)
	return frc
}

// SetCreatedAt sets the "created_at" field.
func (frc *FlightReservationCreate) SetCreatedAt(t time.Time) *FlightReservationCreate {
	frc.mutation.SetCreatedAt(t)
	return frc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (frc *FlightReservationCreate) SetNillableCreatedAt(t *time.Time) *FlightReservationCreate {
	if t != nil {
		frc.SetCreatedAt(*t)
	}
	return frc
}

// SetUpdatedAt sets the "updated_at" field.
func (frc *FlightReservationCreate) SetUpdatedAt(t time.Time) *FlightReservationCreate {
	frc.mutation.SetUpdatedAt(t)
	return frc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (frc *FlightReservationCreate) SetNillableUpdatedAt(t *time.Time) *FlightReservationCreate {
	if t != nil {
		frc.SetUpdatedAt(*t)
	}
	return frc
}

// SetID sets the "id" field.
func (frc *FlightReservationCreate) SetID(u uuid.UUID) *FlightReservationCreate {
	frc.mutation.SetID(u)
	return frc
}

// SetFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID.
func (frc *FlightReservationCreate) SetFlightInstanceID(id uuid.UUID) *FlightReservationCreate {
	frc.mutation.SetFlightInstanceID(id)
	return frc
}

// SetNillableFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID if the given value is not nil.
func (frc *FlightReservationCreate) SetNillableFlightInstanceID(id *uuid.UUID) *FlightReservationCreate {
	if id != nil {
		frc = frc.SetFlightInstanceID(*id)
	}
	return frc
}

// SetFlightInstance sets the "flight_instance" edge to the FlightInstance entity.
func (frc *FlightReservationCreate) SetFlightInstance(f *FlightInstance) *FlightReservationCreate {
	return frc.SetFlightInstanceID(f.ID)
}

// SetIteneraryID sets the "itenerary" edge to the Itenerary entity by ID.
func (frc *FlightReservationCreate) SetIteneraryID(id uuid.UUID) *FlightReservationCreate {
	frc.mutation.SetIteneraryID(id)
	return frc
}

// SetNillableIteneraryID sets the "itenerary" edge to the Itenerary entity by ID if the given value is not nil.
func (frc *FlightReservationCreate) SetNillableIteneraryID(id *uuid.UUID) *FlightReservationCreate {
	if id != nil {
		frc = frc.SetIteneraryID(*id)
	}
	return frc
}

// SetItenerary sets the "itenerary" edge to the Itenerary entity.
func (frc *FlightReservationCreate) SetItenerary(i *Itenerary) *FlightReservationCreate {
	return frc.SetIteneraryID(i.ID)
}

// AddPassengerIDs adds the "passengers" edge to the Passenger entity by IDs.
func (frc *FlightReservationCreate) AddPassengerIDs(ids ...uuid.UUID) *FlightReservationCreate {
	frc.mutation.AddPassengerIDs(ids...)
	return frc
}

// AddPassengers adds the "passengers" edges to the Passenger entity.
func (frc *FlightReservationCreate) AddPassengers(p ...*Passenger) *FlightReservationCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return frc.AddPassengerIDs(ids...)
}

// Mutation returns the FlightReservationMutation object of the builder.
func (frc *FlightReservationCreate) Mutation() *FlightReservationMutation {
	return frc.mutation
}

// Save creates the FlightReservation in the database.
func (frc *FlightReservationCreate) Save(ctx context.Context) (*FlightReservation, error) {
	var (
		err  error
		node *FlightReservation
	)
	frc.defaults()
	if len(frc.hooks) == 0 {
		if err = frc.check(); err != nil {
			return nil, err
		}
		node, err = frc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightReservationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = frc.check(); err != nil {
				return nil, err
			}
			frc.mutation = mutation
			if node, err = frc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(frc.hooks) - 1; i >= 0; i-- {
			if frc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = frc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, frc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FlightReservationCreate) SaveX(ctx context.Context) *FlightReservation {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FlightReservationCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FlightReservationCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (frc *FlightReservationCreate) defaults() {
	if _, ok := frc.mutation.CreatedAt(); !ok {
		v := flightreservation.DefaultCreatedAt()
		frc.mutation.SetCreatedAt(v)
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		v := flightreservation.DefaultUpdatedAt()
		frc.mutation.SetUpdatedAt(v)
	}
	if _, ok := frc.mutation.ID(); !ok {
		v := flightreservation.DefaultID()
		frc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FlightReservationCreate) check() error {
	if _, ok := frc.mutation.ReservationNumber(); !ok {
		return &ValidationError{Name: "reservation_number", err: errors.New(`ent: missing required field "reservation_number"`)}
	}
	if v, ok := frc.mutation.ReservationNumber(); ok {
		if err := flightreservation.ReservationNumberValidator(v); err != nil {
			return &ValidationError{Name: "reservation_number", err: fmt.Errorf(`ent: validator failed for field "reservation_number": %w`, err)}
		}
	}
	if _, ok := frc.mutation.ReservationStatus(); !ok {
		return &ValidationError{Name: "reservation_status", err: errors.New(`ent: missing required field "reservation_status"`)}
	}
	if v, ok := frc.mutation.ReservationStatus(); ok {
		if err := flightreservation.ReservationStatusValidator(v); err != nil {
			return &ValidationError{Name: "reservation_status", err: fmt.Errorf(`ent: validator failed for field "reservation_status": %w`, err)}
		}
	}
	if _, ok := frc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (frc *FlightReservationCreate) sqlSave(ctx context.Context) (*FlightReservation, error) {
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (frc *FlightReservationCreate) createSpec() (*FlightReservation, *sqlgraph.CreateSpec) {
	var (
		_node = &FlightReservation{config: frc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flightreservation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightreservation.FieldID,
			},
		}
	)
	if id, ok := frc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := frc.mutation.ReservationNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flightreservation.FieldReservationNumber,
		})
		_node.ReservationNumber = value
	}
	if value, ok := frc.mutation.ReservationStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightreservation.FieldReservationStatus,
		})
		_node.ReservationStatus = value
	}
	if value, ok := frc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightreservation.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := frc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightreservation.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := frc.mutation.FlightInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightreservation.FlightInstanceTable,
			Columns: []string{flightreservation.FlightInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.flight_instance_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.IteneraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightreservation.IteneraryTable,
			Columns: []string{flightreservation.IteneraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itenerary.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.itenerary_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.PassengersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightreservation.PassengersTable,
			Columns: []string{flightreservation.PassengersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: passenger.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FlightReservationCreateBulk is the builder for creating many FlightReservation entities in bulk.
type FlightReservationCreateBulk struct {
	config
	builders []*FlightReservationCreate
}

// Save creates the FlightReservation entities in the database.
func (frcb *FlightReservationCreateBulk) Save(ctx context.Context) ([]*FlightReservation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FlightReservation, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlightReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FlightReservationCreateBulk) SaveX(ctx context.Context) []*FlightReservation {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FlightReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FlightReservationCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}
