// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/aircraft"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flightseat"
	"airbound/internal/ent/seat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SeatCreate is the builder for creating a Seat entity.
type SeatCreate struct {
	config
	mutation *SeatMutation
	hooks    []Hook
}

// SetSeatNumber sets the "seat_number" field.
func (sc *SeatCreate) SetSeatNumber(i int) *SeatCreate {
	sc.mutation.SetSeatNumber(i)
	return sc
}

// SetSeatRow sets the "seat_row" field.
func (sc *SeatCreate) SetSeatRow(s string) *SeatCreate {
	sc.mutation.SetSeatRow(s)
	return sc
}

// SetSeatType sets the "seat_type" field.
func (sc *SeatCreate) SetSeatType(et enums.SeatType) *SeatCreate {
	sc.mutation.SetSeatType(et)
	return sc
}

// SetSeatClass sets the "seat_class" field.
func (sc *SeatCreate) SetSeatClass(ec enums.SeatClass) *SeatCreate {
	sc.mutation.SetSeatClass(ec)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SeatCreate) SetCreatedAt(t time.Time) *SeatCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SeatCreate) SetNillableCreatedAt(t *time.Time) *SeatCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SeatCreate) SetUpdatedAt(t time.Time) *SeatCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SeatCreate) SetNillableUpdatedAt(t *time.Time) *SeatCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SeatCreate) SetID(u uuid.UUID) *SeatCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetAircraftID sets the "aircraft" edge to the Aircraft entity by ID.
func (sc *SeatCreate) SetAircraftID(id uuid.UUID) *SeatCreate {
	sc.mutation.SetAircraftID(id)
	return sc
}

// SetNillableAircraftID sets the "aircraft" edge to the Aircraft entity by ID if the given value is not nil.
func (sc *SeatCreate) SetNillableAircraftID(id *uuid.UUID) *SeatCreate {
	if id != nil {
		sc = sc.SetAircraftID(*id)
	}
	return sc
}

// SetAircraft sets the "aircraft" edge to the Aircraft entity.
func (sc *SeatCreate) SetAircraft(a *Aircraft) *SeatCreate {
	return sc.SetAircraftID(a.ID)
}

// SetFlightSeatID sets the "flight_seat" edge to the FlightSeat entity by ID.
func (sc *SeatCreate) SetFlightSeatID(id uuid.UUID) *SeatCreate {
	sc.mutation.SetFlightSeatID(id)
	return sc
}

// SetNillableFlightSeatID sets the "flight_seat" edge to the FlightSeat entity by ID if the given value is not nil.
func (sc *SeatCreate) SetNillableFlightSeatID(id *uuid.UUID) *SeatCreate {
	if id != nil {
		sc = sc.SetFlightSeatID(*id)
	}
	return sc
}

// SetFlightSeat sets the "flight_seat" edge to the FlightSeat entity.
func (sc *SeatCreate) SetFlightSeat(f *FlightSeat) *SeatCreate {
	return sc.SetFlightSeatID(f.ID)
}

// Mutation returns the SeatMutation object of the builder.
func (sc *SeatCreate) Mutation() *SeatMutation {
	return sc.mutation
}

// Save creates the Seat in the database.
func (sc *SeatCreate) Save(ctx context.Context) (*Seat, error) {
	var (
		err  error
		node *Seat
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SeatCreate) SaveX(ctx context.Context) *Seat {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SeatCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SeatCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SeatCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := seat.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := seat.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := seat.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SeatCreate) check() error {
	if _, ok := sc.mutation.SeatNumber(); !ok {
		return &ValidationError{Name: "seat_number", err: errors.New(`ent: missing required field "seat_number"`)}
	}
	if v, ok := sc.mutation.SeatNumber(); ok {
		if err := seat.SeatNumberValidator(v); err != nil {
			return &ValidationError{Name: "seat_number", err: fmt.Errorf(`ent: validator failed for field "seat_number": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SeatRow(); !ok {
		return &ValidationError{Name: "seat_row", err: errors.New(`ent: missing required field "seat_row"`)}
	}
	if v, ok := sc.mutation.SeatRow(); ok {
		if err := seat.SeatRowValidator(v); err != nil {
			return &ValidationError{Name: "seat_row", err: fmt.Errorf(`ent: validator failed for field "seat_row": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SeatType(); !ok {
		return &ValidationError{Name: "seat_type", err: errors.New(`ent: missing required field "seat_type"`)}
	}
	if v, ok := sc.mutation.SeatType(); ok {
		if err := seat.SeatTypeValidator(v); err != nil {
			return &ValidationError{Name: "seat_type", err: fmt.Errorf(`ent: validator failed for field "seat_type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SeatClass(); !ok {
		return &ValidationError{Name: "seat_class", err: errors.New(`ent: missing required field "seat_class"`)}
	}
	if v, ok := sc.mutation.SeatClass(); ok {
		if err := seat.SeatClassValidator(v); err != nil {
			return &ValidationError{Name: "seat_class", err: fmt.Errorf(`ent: validator failed for field "seat_class": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (sc *SeatCreate) sqlSave(ctx context.Context) (*Seat, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (sc *SeatCreate) createSpec() (*Seat, *sqlgraph.CreateSpec) {
	var (
		_node = &Seat{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: seat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: seat.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.SeatNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldSeatNumber,
		})
		_node.SeatNumber = value
	}
	if value, ok := sc.mutation.SeatRow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seat.FieldSeatRow,
		})
		_node.SeatRow = value
	}
	if value, ok := sc.mutation.SeatType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: seat.FieldSeatType,
		})
		_node.SeatType = value
	}
	if value, ok := sc.mutation.SeatClass(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: seat.FieldSeatClass,
		})
		_node.SeatClass = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seat.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seat.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.AircraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.AircraftTable,
			Columns: []string{seat.AircraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: aircraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.aircraft_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FlightSeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   seat.FlightSeatTable,
			Columns: []string{seat.FlightSeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeatCreateBulk is the builder for creating many Seat entities in bulk.
type SeatCreateBulk struct {
	config
	builders []*SeatCreate
}

// Save creates the Seat entities in the database.
func (scb *SeatCreateBulk) Save(ctx context.Context) ([]*Seat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Seat, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SeatCreateBulk) SaveX(ctx context.Context) []*Seat {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SeatCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SeatCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
