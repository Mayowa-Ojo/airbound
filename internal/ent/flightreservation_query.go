// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/flightreservation"
	"airbound/internal/ent/predicate"
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightReservationQuery is the builder for querying FlightReservation entities.
type FlightReservationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.FlightReservation
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FlightReservationQuery builder.
func (frq *FlightReservationQuery) Where(ps ...predicate.FlightReservation) *FlightReservationQuery {
	frq.predicates = append(frq.predicates, ps...)
	return frq
}

// Limit adds a limit step to the query.
func (frq *FlightReservationQuery) Limit(limit int) *FlightReservationQuery {
	frq.limit = &limit
	return frq
}

// Offset adds an offset step to the query.
func (frq *FlightReservationQuery) Offset(offset int) *FlightReservationQuery {
	frq.offset = &offset
	return frq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (frq *FlightReservationQuery) Unique(unique bool) *FlightReservationQuery {
	frq.unique = &unique
	return frq
}

// Order adds an order step to the query.
func (frq *FlightReservationQuery) Order(o ...OrderFunc) *FlightReservationQuery {
	frq.order = append(frq.order, o...)
	return frq
}

// First returns the first FlightReservation entity from the query.
// Returns a *NotFoundError when no FlightReservation was found.
func (frq *FlightReservationQuery) First(ctx context.Context) (*FlightReservation, error) {
	nodes, err := frq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{flightreservation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (frq *FlightReservationQuery) FirstX(ctx context.Context) *FlightReservation {
	node, err := frq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FlightReservation ID from the query.
// Returns a *NotFoundError when no FlightReservation ID was found.
func (frq *FlightReservationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = frq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{flightreservation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (frq *FlightReservationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := frq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FlightReservation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one FlightReservation entity is not found.
// Returns a *NotFoundError when no FlightReservation entities are found.
func (frq *FlightReservationQuery) Only(ctx context.Context) (*FlightReservation, error) {
	nodes, err := frq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{flightreservation.Label}
	default:
		return nil, &NotSingularError{flightreservation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (frq *FlightReservationQuery) OnlyX(ctx context.Context) *FlightReservation {
	node, err := frq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FlightReservation ID in the query.
// Returns a *NotSingularError when exactly one FlightReservation ID is not found.
// Returns a *NotFoundError when no entities are found.
func (frq *FlightReservationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = frq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = &NotSingularError{flightreservation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (frq *FlightReservationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := frq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FlightReservations.
func (frq *FlightReservationQuery) All(ctx context.Context) ([]*FlightReservation, error) {
	if err := frq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return frq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (frq *FlightReservationQuery) AllX(ctx context.Context) []*FlightReservation {
	nodes, err := frq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FlightReservation IDs.
func (frq *FlightReservationQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := frq.Select(flightreservation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (frq *FlightReservationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := frq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (frq *FlightReservationQuery) Count(ctx context.Context) (int, error) {
	if err := frq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return frq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (frq *FlightReservationQuery) CountX(ctx context.Context) int {
	count, err := frq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (frq *FlightReservationQuery) Exist(ctx context.Context) (bool, error) {
	if err := frq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return frq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (frq *FlightReservationQuery) ExistX(ctx context.Context) bool {
	exist, err := frq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FlightReservationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (frq *FlightReservationQuery) Clone() *FlightReservationQuery {
	if frq == nil {
		return nil
	}
	return &FlightReservationQuery{
		config:     frq.config,
		limit:      frq.limit,
		offset:     frq.offset,
		order:      append([]OrderFunc{}, frq.order...),
		predicates: append([]predicate.FlightReservation{}, frq.predicates...),
		// clone intermediate query.
		sql:  frq.sql.Clone(),
		path: frq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ReservationNumber string `json:"reservation_number,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FlightReservation.Query().
//		GroupBy(flightreservation.FieldReservationNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (frq *FlightReservationQuery) GroupBy(field string, fields ...string) *FlightReservationGroupBy {
	group := &FlightReservationGroupBy{config: frq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := frq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return frq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ReservationNumber string `json:"reservation_number,omitempty"`
//	}
//
//	client.FlightReservation.Query().
//		Select(flightreservation.FieldReservationNumber).
//		Scan(ctx, &v)
//
func (frq *FlightReservationQuery) Select(fields ...string) *FlightReservationSelect {
	frq.fields = append(frq.fields, fields...)
	return &FlightReservationSelect{FlightReservationQuery: frq}
}

func (frq *FlightReservationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range frq.fields {
		if !flightreservation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if frq.path != nil {
		prev, err := frq.path(ctx)
		if err != nil {
			return err
		}
		frq.sql = prev
	}
	return nil
}

func (frq *FlightReservationQuery) sqlAll(ctx context.Context) ([]*FlightReservation, error) {
	var (
		nodes = []*FlightReservation{}
		_spec = frq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &FlightReservation{config: frq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, frq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (frq *FlightReservationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := frq.querySpec()
	return sqlgraph.CountNodes(ctx, frq.driver, _spec)
}

func (frq *FlightReservationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := frq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (frq *FlightReservationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightreservation.Table,
			Columns: flightreservation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightreservation.FieldID,
			},
		},
		From:   frq.sql,
		Unique: true,
	}
	if unique := frq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := frq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flightreservation.FieldID)
		for i := range fields {
			if fields[i] != flightreservation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := frq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := frq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := frq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := frq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (frq *FlightReservationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(frq.driver.Dialect())
	t1 := builder.Table(flightreservation.Table)
	columns := frq.fields
	if len(columns) == 0 {
		columns = flightreservation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if frq.sql != nil {
		selector = frq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range frq.predicates {
		p(selector)
	}
	for _, p := range frq.order {
		p(selector)
	}
	if offset := frq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := frq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FlightReservationGroupBy is the group-by builder for FlightReservation entities.
type FlightReservationGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (frgb *FlightReservationGroupBy) Aggregate(fns ...AggregateFunc) *FlightReservationGroupBy {
	frgb.fns = append(frgb.fns, fns...)
	return frgb
}

// Scan applies the group-by query and scans the result into the given value.
func (frgb *FlightReservationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := frgb.path(ctx)
	if err != nil {
		return err
	}
	frgb.sql = query
	return frgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := frgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FlightReservationGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) StringsX(ctx context.Context) []string {
	v, err := frgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = frgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) StringX(ctx context.Context) string {
	v, err := frgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FlightReservationGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) IntsX(ctx context.Context) []int {
	v, err := frgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = frgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) IntX(ctx context.Context) int {
	v, err := frgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FlightReservationGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := frgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = frgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) Float64X(ctx context.Context) float64 {
	v, err := frgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FlightReservationGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := frgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (frgb *FlightReservationGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = frgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (frgb *FlightReservationGroupBy) BoolX(ctx context.Context) bool {
	v, err := frgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (frgb *FlightReservationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range frgb.fields {
		if !flightreservation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := frgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := frgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (frgb *FlightReservationGroupBy) sqlQuery() *sql.Selector {
	selector := frgb.sql.Select()
	aggregation := make([]string, 0, len(frgb.fns))
	for _, fn := range frgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(frgb.fields)+len(frgb.fns))
		for _, f := range frgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(frgb.fields...)...)
}

// FlightReservationSelect is the builder for selecting fields of FlightReservation entities.
type FlightReservationSelect struct {
	*FlightReservationQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (frs *FlightReservationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := frs.prepareQuery(ctx); err != nil {
		return err
	}
	frs.sql = frs.FlightReservationQuery.sqlQuery(ctx)
	return frs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (frs *FlightReservationSelect) ScanX(ctx context.Context, v interface{}) {
	if err := frs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) Strings(ctx context.Context) ([]string, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FlightReservationSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (frs *FlightReservationSelect) StringsX(ctx context.Context) []string {
	v, err := frs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = frs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (frs *FlightReservationSelect) StringX(ctx context.Context) string {
	v, err := frs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) Ints(ctx context.Context) ([]int, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FlightReservationSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (frs *FlightReservationSelect) IntsX(ctx context.Context) []int {
	v, err := frs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = frs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (frs *FlightReservationSelect) IntX(ctx context.Context) int {
	v, err := frs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FlightReservationSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (frs *FlightReservationSelect) Float64sX(ctx context.Context) []float64 {
	v, err := frs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = frs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (frs *FlightReservationSelect) Float64X(ctx context.Context) float64 {
	v, err := frs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FlightReservationSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (frs *FlightReservationSelect) BoolsX(ctx context.Context) []bool {
	v, err := frs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (frs *FlightReservationSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = frs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{flightreservation.Label}
	default:
		err = fmt.Errorf("ent: FlightReservationSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (frs *FlightReservationSelect) BoolX(ctx context.Context) bool {
	v, err := frs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (frs *FlightReservationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := frs.sql.Query()
	if err := frs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
