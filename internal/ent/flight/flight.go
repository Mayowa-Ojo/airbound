// Code generated by entc, DO NOT EDIT.

package flight

import (
	"airbound/internal/ent/enums"
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the flight type in the database.
	Label = "flight"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFlightNumber holds the string denoting the flight_number field in the database.
	FieldFlightNumber = "flight_number"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldDistance holds the string denoting the distance field in the database.
	FieldDistance = "distance"
	// FieldBoardingPolicy holds the string denoting the boarding_policy field in the database.
	FieldBoardingPolicy = "boarding_policy"
	// FieldTripType holds the string denoting the trip_type field in the database.
	FieldTripType = "trip_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFlightInstances holds the string denoting the flight_instances edge name in mutations.
	EdgeFlightInstances = "flight_instances"
	// EdgeFlightSchedules holds the string denoting the flight_schedules edge name in mutations.
	EdgeFlightSchedules = "flight_schedules"
	// EdgeCrews holds the string denoting the crews edge name in mutations.
	EdgeCrews = "crews"
	// EdgeDepartureAirport holds the string denoting the departure_airport edge name in mutations.
	EdgeDepartureAirport = "departure_airport"
	// EdgeArrivalAirport holds the string denoting the arrival_airport edge name in mutations.
	EdgeArrivalAirport = "arrival_airport"
	// EdgeAirline holds the string denoting the airline edge name in mutations.
	EdgeAirline = "airline"
	// Table holds the table name of the flight in the database.
	Table = "flights"
	// FlightInstancesTable is the table that holds the flight_instances relation/edge.
	FlightInstancesTable = "flight_instances"
	// FlightInstancesInverseTable is the table name for the FlightInstance entity.
	// It exists in this package in order to avoid circular dependency with the "flightinstance" package.
	FlightInstancesInverseTable = "flight_instances"
	// FlightInstancesColumn is the table column denoting the flight_instances relation/edge.
	FlightInstancesColumn = "flight_id"
	// FlightSchedulesTable is the table that holds the flight_schedules relation/edge.
	FlightSchedulesTable = "flight_schedules"
	// FlightSchedulesInverseTable is the table name for the FlightSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "flightschedule" package.
	FlightSchedulesInverseTable = "flight_schedules"
	// FlightSchedulesColumn is the table column denoting the flight_schedules relation/edge.
	FlightSchedulesColumn = "flight_id"
	// CrewsTable is the table that holds the crews relation/edge. The primary key declared below.
	CrewsTable = "flight_crew"
	// CrewsInverseTable is the table name for the Crew entity.
	// It exists in this package in order to avoid circular dependency with the "crew" package.
	CrewsInverseTable = "crews"
	// DepartureAirportTable is the table that holds the departure_airport relation/edge.
	DepartureAirportTable = "flights"
	// DepartureAirportInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	DepartureAirportInverseTable = "airports"
	// DepartureAirportColumn is the table column denoting the departure_airport relation/edge.
	DepartureAirportColumn = "depature_airport_id"
	// ArrivalAirportTable is the table that holds the arrival_airport relation/edge.
	ArrivalAirportTable = "flights"
	// ArrivalAirportInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	ArrivalAirportInverseTable = "airports"
	// ArrivalAirportColumn is the table column denoting the arrival_airport relation/edge.
	ArrivalAirportColumn = "arrival_airport_id"
	// AirlineTable is the table that holds the airline relation/edge.
	AirlineTable = "flights"
	// AirlineInverseTable is the table name for the Airline entity.
	// It exists in this package in order to avoid circular dependency with the "airline" package.
	AirlineInverseTable = "airlines"
	// AirlineColumn is the table column denoting the airline relation/edge.
	AirlineColumn = "airline_id"
)

// Columns holds all SQL columns for flight fields.
var Columns = []string{
	FieldID,
	FieldFlightNumber,
	FieldDuration,
	FieldDistance,
	FieldBoardingPolicy,
	FieldTripType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "flights"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"airline_id",
	"depature_airport_id",
	"arrival_airport_id",
}

var (
	// CrewsPrimaryKey and CrewsColumn2 are the table columns denoting the
	// primary key for the crews relation (M2M).
	CrewsPrimaryKey = []string{"flight_id", "crew_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FlightNumberValidator is a validator for the "flight_number" field. It is called by the builders before save.
	FlightNumberValidator func(string) error
	// DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	DurationValidator func(int) error
	// DistanceValidator is a validator for the "distance" field. It is called by the builders before save.
	DistanceValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// BoardingPolicyValidator is a validator for the "boarding_policy" field enum values. It is called by the builders before save.
func BoardingPolicyValidator(bp enums.BoardingPolicy) error {
	switch bp {
	case "GROUP_BASED", "ZONE_BASED":
		return nil
	default:
		return fmt.Errorf("flight: invalid enum value for boarding_policy field: %q", bp)
	}
}

// TripTypeValidator is a validator for the "trip_type" field enum values. It is called by the builders before save.
func TripTypeValidator(tt enums.TripType) error {
	switch tt {
	case "ONE_WAY", "ROUND_TRIP":
		return nil
	default:
		return fmt.Errorf("flight: invalid enum value for trip_type field: %q", tt)
	}
}
