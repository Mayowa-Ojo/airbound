// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/aircraft"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/flightreservation"
	"airbound/internal/ent/flightseat"
	"airbound/internal/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightInstanceUpdate is the builder for updating FlightInstance entities.
type FlightInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *FlightInstanceMutation
}

// Where appends a list predicates to the FlightInstanceUpdate builder.
func (fiu *FlightInstanceUpdate) Where(ps ...predicate.FlightInstance) *FlightInstanceUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetDepartureGate sets the "departure_gate" field.
func (fiu *FlightInstanceUpdate) SetDepartureGate(i int) *FlightInstanceUpdate {
	fiu.mutation.ResetDepartureGate()
	fiu.mutation.SetDepartureGate(i)
	return fiu
}

// AddDepartureGate adds i to the "departure_gate" field.
func (fiu *FlightInstanceUpdate) AddDepartureGate(i int) *FlightInstanceUpdate {
	fiu.mutation.AddDepartureGate(i)
	return fiu
}

// SetArrivalGate sets the "arrival_gate" field.
func (fiu *FlightInstanceUpdate) SetArrivalGate(i int) *FlightInstanceUpdate {
	fiu.mutation.ResetArrivalGate()
	fiu.mutation.SetArrivalGate(i)
	return fiu
}

// AddArrivalGate adds i to the "arrival_gate" field.
func (fiu *FlightInstanceUpdate) AddArrivalGate(i int) *FlightInstanceUpdate {
	fiu.mutation.AddArrivalGate(i)
	return fiu
}

// SetFlightStatus sets the "flight_status" field.
func (fiu *FlightInstanceUpdate) SetFlightStatus(es enums.FlightStatus) *FlightInstanceUpdate {
	fiu.mutation.SetFlightStatus(es)
	return fiu
}

// SetCreatedAt sets the "created_at" field.
func (fiu *FlightInstanceUpdate) SetCreatedAt(t time.Time) *FlightInstanceUpdate {
	fiu.mutation.SetCreatedAt(t)
	return fiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fiu *FlightInstanceUpdate) SetNillableCreatedAt(t *time.Time) *FlightInstanceUpdate {
	if t != nil {
		fiu.SetCreatedAt(*t)
	}
	return fiu
}

// SetUpdatedAt sets the "updated_at" field.
func (fiu *FlightInstanceUpdate) SetUpdatedAt(t time.Time) *FlightInstanceUpdate {
	fiu.mutation.SetUpdatedAt(t)
	return fiu
}

// SetFlightID sets the "flight" edge to the Flight entity by ID.
func (fiu *FlightInstanceUpdate) SetFlightID(id uuid.UUID) *FlightInstanceUpdate {
	fiu.mutation.SetFlightID(id)
	return fiu
}

// SetNillableFlightID sets the "flight" edge to the Flight entity by ID if the given value is not nil.
func (fiu *FlightInstanceUpdate) SetNillableFlightID(id *uuid.UUID) *FlightInstanceUpdate {
	if id != nil {
		fiu = fiu.SetFlightID(*id)
	}
	return fiu
}

// SetFlight sets the "flight" edge to the Flight entity.
func (fiu *FlightInstanceUpdate) SetFlight(f *Flight) *FlightInstanceUpdate {
	return fiu.SetFlightID(f.ID)
}

// SetAircraftID sets the "aircraft" edge to the Aircraft entity by ID.
func (fiu *FlightInstanceUpdate) SetAircraftID(id uuid.UUID) *FlightInstanceUpdate {
	fiu.mutation.SetAircraftID(id)
	return fiu
}

// SetNillableAircraftID sets the "aircraft" edge to the Aircraft entity by ID if the given value is not nil.
func (fiu *FlightInstanceUpdate) SetNillableAircraftID(id *uuid.UUID) *FlightInstanceUpdate {
	if id != nil {
		fiu = fiu.SetAircraftID(*id)
	}
	return fiu
}

// SetAircraft sets the "aircraft" edge to the Aircraft entity.
func (fiu *FlightInstanceUpdate) SetAircraft(a *Aircraft) *FlightInstanceUpdate {
	return fiu.SetAircraftID(a.ID)
}

// AddFlightReservationIDs adds the "flight_reservations" edge to the FlightReservation entity by IDs.
func (fiu *FlightInstanceUpdate) AddFlightReservationIDs(ids ...uuid.UUID) *FlightInstanceUpdate {
	fiu.mutation.AddFlightReservationIDs(ids...)
	return fiu
}

// AddFlightReservations adds the "flight_reservations" edges to the FlightReservation entity.
func (fiu *FlightInstanceUpdate) AddFlightReservations(f ...*FlightReservation) *FlightInstanceUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.AddFlightReservationIDs(ids...)
}

// AddFlightSeatIDs adds the "flight_seats" edge to the FlightSeat entity by IDs.
func (fiu *FlightInstanceUpdate) AddFlightSeatIDs(ids ...uuid.UUID) *FlightInstanceUpdate {
	fiu.mutation.AddFlightSeatIDs(ids...)
	return fiu
}

// AddFlightSeats adds the "flight_seats" edges to the FlightSeat entity.
func (fiu *FlightInstanceUpdate) AddFlightSeats(f ...*FlightSeat) *FlightInstanceUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.AddFlightSeatIDs(ids...)
}

// Mutation returns the FlightInstanceMutation object of the builder.
func (fiu *FlightInstanceUpdate) Mutation() *FlightInstanceMutation {
	return fiu.mutation
}

// ClearFlight clears the "flight" edge to the Flight entity.
func (fiu *FlightInstanceUpdate) ClearFlight() *FlightInstanceUpdate {
	fiu.mutation.ClearFlight()
	return fiu
}

// ClearAircraft clears the "aircraft" edge to the Aircraft entity.
func (fiu *FlightInstanceUpdate) ClearAircraft() *FlightInstanceUpdate {
	fiu.mutation.ClearAircraft()
	return fiu
}

// ClearFlightReservations clears all "flight_reservations" edges to the FlightReservation entity.
func (fiu *FlightInstanceUpdate) ClearFlightReservations() *FlightInstanceUpdate {
	fiu.mutation.ClearFlightReservations()
	return fiu
}

// RemoveFlightReservationIDs removes the "flight_reservations" edge to FlightReservation entities by IDs.
func (fiu *FlightInstanceUpdate) RemoveFlightReservationIDs(ids ...uuid.UUID) *FlightInstanceUpdate {
	fiu.mutation.RemoveFlightReservationIDs(ids...)
	return fiu
}

// RemoveFlightReservations removes "flight_reservations" edges to FlightReservation entities.
func (fiu *FlightInstanceUpdate) RemoveFlightReservations(f ...*FlightReservation) *FlightInstanceUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.RemoveFlightReservationIDs(ids...)
}

// ClearFlightSeats clears all "flight_seats" edges to the FlightSeat entity.
func (fiu *FlightInstanceUpdate) ClearFlightSeats() *FlightInstanceUpdate {
	fiu.mutation.ClearFlightSeats()
	return fiu
}

// RemoveFlightSeatIDs removes the "flight_seats" edge to FlightSeat entities by IDs.
func (fiu *FlightInstanceUpdate) RemoveFlightSeatIDs(ids ...uuid.UUID) *FlightInstanceUpdate {
	fiu.mutation.RemoveFlightSeatIDs(ids...)
	return fiu
}

// RemoveFlightSeats removes "flight_seats" edges to FlightSeat entities.
func (fiu *FlightInstanceUpdate) RemoveFlightSeats(f ...*FlightSeat) *FlightInstanceUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.RemoveFlightSeatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FlightInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fiu.defaults()
	if len(fiu.hooks) == 0 {
		if err = fiu.check(); err != nil {
			return 0, err
		}
		affected, err = fiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fiu.check(); err != nil {
				return 0, err
			}
			fiu.mutation = mutation
			affected, err = fiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fiu.hooks) - 1; i >= 0; i-- {
			if fiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FlightInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FlightInstanceUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FlightInstanceUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiu *FlightInstanceUpdate) defaults() {
	if _, ok := fiu.mutation.UpdatedAt(); !ok {
		v := flightinstance.UpdateDefaultUpdatedAt()
		fiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FlightInstanceUpdate) check() error {
	if v, ok := fiu.mutation.DepartureGate(); ok {
		if err := flightinstance.DepartureGateValidator(v); err != nil {
			return &ValidationError{Name: "departure_gate", err: fmt.Errorf("ent: validator failed for field \"departure_gate\": %w", err)}
		}
	}
	if v, ok := fiu.mutation.ArrivalGate(); ok {
		if err := flightinstance.ArrivalGateValidator(v); err != nil {
			return &ValidationError{Name: "arrival_gate", err: fmt.Errorf("ent: validator failed for field \"arrival_gate\": %w", err)}
		}
	}
	if v, ok := fiu.mutation.FlightStatus(); ok {
		if err := flightinstance.FlightStatusValidator(v); err != nil {
			return &ValidationError{Name: "flight_status", err: fmt.Errorf("ent: validator failed for field \"flight_status\": %w", err)}
		}
	}
	return nil
}

func (fiu *FlightInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightinstance.Table,
			Columns: flightinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightinstance.FieldID,
			},
		},
	}
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.DepartureGate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldDepartureGate,
		})
	}
	if value, ok := fiu.mutation.AddedDepartureGate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldDepartureGate,
		})
	}
	if value, ok := fiu.mutation.ArrivalGate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldArrivalGate,
		})
	}
	if value, ok := fiu.mutation.AddedArrivalGate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldArrivalGate,
		})
	}
	if value, ok := fiu.mutation.FlightStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightinstance.FieldFlightStatus,
		})
	}
	if value, ok := fiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightinstance.FieldCreatedAt,
		})
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightinstance.FieldUpdatedAt,
		})
	}
	if fiu.mutation.FlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightinstance.FlightTable,
			Columns: []string{flightinstance.FlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightinstance.FlightTable,
			Columns: []string{flightinstance.FlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.AircraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flightinstance.AircraftTable,
			Columns: []string{flightinstance.AircraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: aircraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.AircraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flightinstance.AircraftTable,
			Columns: []string{flightinstance.AircraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: aircraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.FlightReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightReservationsTable,
			Columns: []string{flightinstance.FlightReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.RemovedFlightReservationsIDs(); len(nodes) > 0 && !fiu.mutation.FlightReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightReservationsTable,
			Columns: []string{flightinstance.FlightReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FlightReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightReservationsTable,
			Columns: []string{flightinstance.FlightReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.FlightSeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightSeatsTable,
			Columns: []string{flightinstance.FlightSeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.RemovedFlightSeatsIDs(); len(nodes) > 0 && !fiu.mutation.FlightSeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightSeatsTable,
			Columns: []string{flightinstance.FlightSeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FlightSeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightSeatsTable,
			Columns: []string{flightinstance.FlightSeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlightInstanceUpdateOne is the builder for updating a single FlightInstance entity.
type FlightInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightInstanceMutation
}

// SetDepartureGate sets the "departure_gate" field.
func (fiuo *FlightInstanceUpdateOne) SetDepartureGate(i int) *FlightInstanceUpdateOne {
	fiuo.mutation.ResetDepartureGate()
	fiuo.mutation.SetDepartureGate(i)
	return fiuo
}

// AddDepartureGate adds i to the "departure_gate" field.
func (fiuo *FlightInstanceUpdateOne) AddDepartureGate(i int) *FlightInstanceUpdateOne {
	fiuo.mutation.AddDepartureGate(i)
	return fiuo
}

// SetArrivalGate sets the "arrival_gate" field.
func (fiuo *FlightInstanceUpdateOne) SetArrivalGate(i int) *FlightInstanceUpdateOne {
	fiuo.mutation.ResetArrivalGate()
	fiuo.mutation.SetArrivalGate(i)
	return fiuo
}

// AddArrivalGate adds i to the "arrival_gate" field.
func (fiuo *FlightInstanceUpdateOne) AddArrivalGate(i int) *FlightInstanceUpdateOne {
	fiuo.mutation.AddArrivalGate(i)
	return fiuo
}

// SetFlightStatus sets the "flight_status" field.
func (fiuo *FlightInstanceUpdateOne) SetFlightStatus(es enums.FlightStatus) *FlightInstanceUpdateOne {
	fiuo.mutation.SetFlightStatus(es)
	return fiuo
}

// SetCreatedAt sets the "created_at" field.
func (fiuo *FlightInstanceUpdateOne) SetCreatedAt(t time.Time) *FlightInstanceUpdateOne {
	fiuo.mutation.SetCreatedAt(t)
	return fiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fiuo *FlightInstanceUpdateOne) SetNillableCreatedAt(t *time.Time) *FlightInstanceUpdateOne {
	if t != nil {
		fiuo.SetCreatedAt(*t)
	}
	return fiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fiuo *FlightInstanceUpdateOne) SetUpdatedAt(t time.Time) *FlightInstanceUpdateOne {
	fiuo.mutation.SetUpdatedAt(t)
	return fiuo
}

// SetFlightID sets the "flight" edge to the Flight entity by ID.
func (fiuo *FlightInstanceUpdateOne) SetFlightID(id uuid.UUID) *FlightInstanceUpdateOne {
	fiuo.mutation.SetFlightID(id)
	return fiuo
}

// SetNillableFlightID sets the "flight" edge to the Flight entity by ID if the given value is not nil.
func (fiuo *FlightInstanceUpdateOne) SetNillableFlightID(id *uuid.UUID) *FlightInstanceUpdateOne {
	if id != nil {
		fiuo = fiuo.SetFlightID(*id)
	}
	return fiuo
}

// SetFlight sets the "flight" edge to the Flight entity.
func (fiuo *FlightInstanceUpdateOne) SetFlight(f *Flight) *FlightInstanceUpdateOne {
	return fiuo.SetFlightID(f.ID)
}

// SetAircraftID sets the "aircraft" edge to the Aircraft entity by ID.
func (fiuo *FlightInstanceUpdateOne) SetAircraftID(id uuid.UUID) *FlightInstanceUpdateOne {
	fiuo.mutation.SetAircraftID(id)
	return fiuo
}

// SetNillableAircraftID sets the "aircraft" edge to the Aircraft entity by ID if the given value is not nil.
func (fiuo *FlightInstanceUpdateOne) SetNillableAircraftID(id *uuid.UUID) *FlightInstanceUpdateOne {
	if id != nil {
		fiuo = fiuo.SetAircraftID(*id)
	}
	return fiuo
}

// SetAircraft sets the "aircraft" edge to the Aircraft entity.
func (fiuo *FlightInstanceUpdateOne) SetAircraft(a *Aircraft) *FlightInstanceUpdateOne {
	return fiuo.SetAircraftID(a.ID)
}

// AddFlightReservationIDs adds the "flight_reservations" edge to the FlightReservation entity by IDs.
func (fiuo *FlightInstanceUpdateOne) AddFlightReservationIDs(ids ...uuid.UUID) *FlightInstanceUpdateOne {
	fiuo.mutation.AddFlightReservationIDs(ids...)
	return fiuo
}

// AddFlightReservations adds the "flight_reservations" edges to the FlightReservation entity.
func (fiuo *FlightInstanceUpdateOne) AddFlightReservations(f ...*FlightReservation) *FlightInstanceUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.AddFlightReservationIDs(ids...)
}

// AddFlightSeatIDs adds the "flight_seats" edge to the FlightSeat entity by IDs.
func (fiuo *FlightInstanceUpdateOne) AddFlightSeatIDs(ids ...uuid.UUID) *FlightInstanceUpdateOne {
	fiuo.mutation.AddFlightSeatIDs(ids...)
	return fiuo
}

// AddFlightSeats adds the "flight_seats" edges to the FlightSeat entity.
func (fiuo *FlightInstanceUpdateOne) AddFlightSeats(f ...*FlightSeat) *FlightInstanceUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.AddFlightSeatIDs(ids...)
}

// Mutation returns the FlightInstanceMutation object of the builder.
func (fiuo *FlightInstanceUpdateOne) Mutation() *FlightInstanceMutation {
	return fiuo.mutation
}

// ClearFlight clears the "flight" edge to the Flight entity.
func (fiuo *FlightInstanceUpdateOne) ClearFlight() *FlightInstanceUpdateOne {
	fiuo.mutation.ClearFlight()
	return fiuo
}

// ClearAircraft clears the "aircraft" edge to the Aircraft entity.
func (fiuo *FlightInstanceUpdateOne) ClearAircraft() *FlightInstanceUpdateOne {
	fiuo.mutation.ClearAircraft()
	return fiuo
}

// ClearFlightReservations clears all "flight_reservations" edges to the FlightReservation entity.
func (fiuo *FlightInstanceUpdateOne) ClearFlightReservations() *FlightInstanceUpdateOne {
	fiuo.mutation.ClearFlightReservations()
	return fiuo
}

// RemoveFlightReservationIDs removes the "flight_reservations" edge to FlightReservation entities by IDs.
func (fiuo *FlightInstanceUpdateOne) RemoveFlightReservationIDs(ids ...uuid.UUID) *FlightInstanceUpdateOne {
	fiuo.mutation.RemoveFlightReservationIDs(ids...)
	return fiuo
}

// RemoveFlightReservations removes "flight_reservations" edges to FlightReservation entities.
func (fiuo *FlightInstanceUpdateOne) RemoveFlightReservations(f ...*FlightReservation) *FlightInstanceUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.RemoveFlightReservationIDs(ids...)
}

// ClearFlightSeats clears all "flight_seats" edges to the FlightSeat entity.
func (fiuo *FlightInstanceUpdateOne) ClearFlightSeats() *FlightInstanceUpdateOne {
	fiuo.mutation.ClearFlightSeats()
	return fiuo
}

// RemoveFlightSeatIDs removes the "flight_seats" edge to FlightSeat entities by IDs.
func (fiuo *FlightInstanceUpdateOne) RemoveFlightSeatIDs(ids ...uuid.UUID) *FlightInstanceUpdateOne {
	fiuo.mutation.RemoveFlightSeatIDs(ids...)
	return fiuo
}

// RemoveFlightSeats removes "flight_seats" edges to FlightSeat entities.
func (fiuo *FlightInstanceUpdateOne) RemoveFlightSeats(f ...*FlightSeat) *FlightInstanceUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.RemoveFlightSeatIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FlightInstanceUpdateOne) Select(field string, fields ...string) *FlightInstanceUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FlightInstance entity.
func (fiuo *FlightInstanceUpdateOne) Save(ctx context.Context) (*FlightInstance, error) {
	var (
		err  error
		node *FlightInstance
	)
	fiuo.defaults()
	if len(fiuo.hooks) == 0 {
		if err = fiuo.check(); err != nil {
			return nil, err
		}
		node, err = fiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fiuo.check(); err != nil {
				return nil, err
			}
			fiuo.mutation = mutation
			node, err = fiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fiuo.hooks) - 1; i >= 0; i-- {
			if fiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FlightInstanceUpdateOne) SaveX(ctx context.Context) *FlightInstance {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FlightInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FlightInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiuo *FlightInstanceUpdateOne) defaults() {
	if _, ok := fiuo.mutation.UpdatedAt(); !ok {
		v := flightinstance.UpdateDefaultUpdatedAt()
		fiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FlightInstanceUpdateOne) check() error {
	if v, ok := fiuo.mutation.DepartureGate(); ok {
		if err := flightinstance.DepartureGateValidator(v); err != nil {
			return &ValidationError{Name: "departure_gate", err: fmt.Errorf("ent: validator failed for field \"departure_gate\": %w", err)}
		}
	}
	if v, ok := fiuo.mutation.ArrivalGate(); ok {
		if err := flightinstance.ArrivalGateValidator(v); err != nil {
			return &ValidationError{Name: "arrival_gate", err: fmt.Errorf("ent: validator failed for field \"arrival_gate\": %w", err)}
		}
	}
	if v, ok := fiuo.mutation.FlightStatus(); ok {
		if err := flightinstance.FlightStatusValidator(v); err != nil {
			return &ValidationError{Name: "flight_status", err: fmt.Errorf("ent: validator failed for field \"flight_status\": %w", err)}
		}
	}
	return nil
}

func (fiuo *FlightInstanceUpdateOne) sqlSave(ctx context.Context) (_node *FlightInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightinstance.Table,
			Columns: flightinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightinstance.FieldID,
			},
		},
	}
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FlightInstance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flightinstance.FieldID)
		for _, f := range fields {
			if !flightinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flightinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.DepartureGate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldDepartureGate,
		})
	}
	if value, ok := fiuo.mutation.AddedDepartureGate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldDepartureGate,
		})
	}
	if value, ok := fiuo.mutation.ArrivalGate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldArrivalGate,
		})
	}
	if value, ok := fiuo.mutation.AddedArrivalGate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldArrivalGate,
		})
	}
	if value, ok := fiuo.mutation.FlightStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightinstance.FieldFlightStatus,
		})
	}
	if value, ok := fiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightinstance.FieldCreatedAt,
		})
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightinstance.FieldUpdatedAt,
		})
	}
	if fiuo.mutation.FlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightinstance.FlightTable,
			Columns: []string{flightinstance.FlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightinstance.FlightTable,
			Columns: []string{flightinstance.FlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.AircraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flightinstance.AircraftTable,
			Columns: []string{flightinstance.AircraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: aircraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.AircraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flightinstance.AircraftTable,
			Columns: []string{flightinstance.AircraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: aircraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.FlightReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightReservationsTable,
			Columns: []string{flightinstance.FlightReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.RemovedFlightReservationsIDs(); len(nodes) > 0 && !fiuo.mutation.FlightReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightReservationsTable,
			Columns: []string{flightinstance.FlightReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FlightReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightReservationsTable,
			Columns: []string{flightinstance.FlightReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.FlightSeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightSeatsTable,
			Columns: []string{flightinstance.FlightSeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.RemovedFlightSeatsIDs(); len(nodes) > 0 && !fiuo.mutation.FlightSeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightSeatsTable,
			Columns: []string{flightinstance.FlightSeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FlightSeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightSeatsTable,
			Columns: []string{flightinstance.FlightSeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FlightInstance{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
