// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/customtypes"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/flightschedule"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FlightSchedule is the model entity for the FlightSchedule schema.
type FlightSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Weekday holds the value of the "weekday" field.
	Weekday enums.WeekDay `json:"weekday,omitempty"`
	// ScheduleType holds the value of the "schedule_type" field.
	ScheduleType enums.FlightScheduleType `json:"schedule_type,omitempty"`
	// CustomDate holds the value of the "custom_date" field.
	CustomDate customtypes.Date `json:"custom_date,omitempty"`
	// DepartsAt holds the value of the "departs_at" field.
	DepartsAt customtypes.Time `json:"departs_at,omitempty"`
	// ArrivesAt holds the value of the "arrives_at" field.
	ArrivesAt customtypes.Time `json:"arrives_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlightScheduleQuery when eager-loading is set.
	Edges     FlightScheduleEdges `json:"edges"`
	flight_id *uuid.UUID
}

// FlightScheduleEdges holds the relations/edges for other nodes in the graph.
type FlightScheduleEdges struct {
	// Flight holds the value of the flight edge.
	Flight *Flight `json:"flight,omitempty"`
	// FlightInstances holds the value of the flight_instances edge.
	FlightInstances []*FlightInstance `json:"flight_instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FlightOrErr returns the Flight value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlightScheduleEdges) FlightOrErr() (*Flight, error) {
	if e.loadedTypes[0] {
		if e.Flight == nil {
			// The edge flight was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flight.Label}
		}
		return e.Flight, nil
	}
	return nil, &NotLoadedError{edge: "flight"}
}

// FlightInstancesOrErr returns the FlightInstances value or an error if the edge
// was not loaded in eager-loading.
func (e FlightScheduleEdges) FlightInstancesOrErr() ([]*FlightInstance, error) {
	if e.loadedTypes[1] {
		return e.FlightInstances, nil
	}
	return nil, &NotLoadedError{edge: "flight_instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlightSchedule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case flightschedule.FieldCustomDate:
			values[i] = new(customtypes.Date)
		case flightschedule.FieldDepartsAt, flightschedule.FieldArrivesAt:
			values[i] = new(customtypes.Time)
		case flightschedule.FieldWeekday:
			values[i] = new(enums.WeekDay)
		case flightschedule.FieldScheduleType:
			values[i] = new(sql.NullString)
		case flightschedule.FieldCreatedAt, flightschedule.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case flightschedule.FieldID:
			values[i] = new(uuid.UUID)
		case flightschedule.ForeignKeys[0]: // flight_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type FlightSchedule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlightSchedule fields.
func (fs *FlightSchedule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flightschedule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fs.ID = *value
			}
		case flightschedule.FieldWeekday:
			if value, ok := values[i].(*enums.WeekDay); !ok {
				return fmt.Errorf("unexpected type %T for field weekday", values[i])
			} else if value != nil {
				fs.Weekday = *value
			}
		case flightschedule.FieldScheduleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_type", values[i])
			} else if value.Valid {
				fs.ScheduleType = enums.FlightScheduleType(value.String)
			}
		case flightschedule.FieldCustomDate:
			if value, ok := values[i].(*customtypes.Date); !ok {
				return fmt.Errorf("unexpected type %T for field custom_date", values[i])
			} else if value != nil {
				fs.CustomDate = *value
			}
		case flightschedule.FieldDepartsAt:
			if value, ok := values[i].(*customtypes.Time); !ok {
				return fmt.Errorf("unexpected type %T for field departs_at", values[i])
			} else if value != nil {
				fs.DepartsAt = *value
			}
		case flightschedule.FieldArrivesAt:
			if value, ok := values[i].(*customtypes.Time); !ok {
				return fmt.Errorf("unexpected type %T for field arrives_at", values[i])
			} else if value != nil {
				fs.ArrivesAt = *value
			}
		case flightschedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fs.CreatedAt = value.Time
			}
		case flightschedule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fs.UpdatedAt = value.Time
			}
		case flightschedule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field flight_id", values[i])
			} else if value.Valid {
				fs.flight_id = new(uuid.UUID)
				*fs.flight_id = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryFlight queries the "flight" edge of the FlightSchedule entity.
func (fs *FlightSchedule) QueryFlight() *FlightQuery {
	return (&FlightScheduleClient{config: fs.config}).QueryFlight(fs)
}

// QueryFlightInstances queries the "flight_instances" edge of the FlightSchedule entity.
func (fs *FlightSchedule) QueryFlightInstances() *FlightInstanceQuery {
	return (&FlightScheduleClient{config: fs.config}).QueryFlightInstances(fs)
}

// Update returns a builder for updating this FlightSchedule.
// Note that you need to call FlightSchedule.Unwrap() before calling this method if this FlightSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FlightSchedule) Update() *FlightScheduleUpdateOne {
	return (&FlightScheduleClient{config: fs.config}).UpdateOne(fs)
}

// Unwrap unwraps the FlightSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FlightSchedule) Unwrap() *FlightSchedule {
	tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlightSchedule is not a transactional entity")
	}
	fs.config.driver = tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FlightSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("FlightSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v", fs.ID))
	builder.WriteString(", weekday=")
	builder.WriteString(fmt.Sprintf("%v", fs.Weekday))
	builder.WriteString(", schedule_type=")
	builder.WriteString(fmt.Sprintf("%v", fs.ScheduleType))
	builder.WriteString(", custom_date=")
	builder.WriteString(fmt.Sprintf("%v", fs.CustomDate))
	builder.WriteString(", departs_at=")
	builder.WriteString(fmt.Sprintf("%v", fs.DepartsAt))
	builder.WriteString(", arrives_at=")
	builder.WriteString(fmt.Sprintf("%v", fs.ArrivesAt))
	builder.WriteString(", created_at=")
	builder.WriteString(fs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(fs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FlightSchedules is a parsable slice of FlightSchedule.
type FlightSchedules []*FlightSchedule

func (fs FlightSchedules) config(cfg config) {
	for _i := range fs {
		fs[_i].config = cfg
	}
}
