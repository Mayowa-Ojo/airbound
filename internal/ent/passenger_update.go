// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/flightreservation"
	"airbound/internal/ent/flightseat"
	"airbound/internal/ent/passenger"
	"airbound/internal/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PassengerUpdate is the builder for updating Passenger entities.
type PassengerUpdate struct {
	config
	hooks    []Hook
	mutation *PassengerMutation
}

// Where appends a list predicates to the PassengerUpdate builder.
func (pu *PassengerUpdate) Where(ps ...predicate.Passenger) *PassengerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetFirstname sets the "firstname" field.
func (pu *PassengerUpdate) SetFirstname(s string) *PassengerUpdate {
	pu.mutation.SetFirstname(s)
	return pu
}

// SetLastname sets the "lastname" field.
func (pu *PassengerUpdate) SetLastname(s string) *PassengerUpdate {
	pu.mutation.SetLastname(s)
	return pu
}

// SetAge sets the "age" field.
func (pu *PassengerUpdate) SetAge(i int) *PassengerUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// AddAge adds i to the "age" field.
func (pu *PassengerUpdate) AddAge(i int) *PassengerUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetPassportNumber sets the "passport_number" field.
func (pu *PassengerUpdate) SetPassportNumber(s string) *PassengerUpdate {
	pu.mutation.SetPassportNumber(s)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PassengerUpdate) SetCreatedAt(t time.Time) *PassengerUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PassengerUpdate) SetNillableCreatedAt(t *time.Time) *PassengerUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PassengerUpdate) SetUpdatedAt(t time.Time) *PassengerUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetFlightReservationID sets the "flight_reservation" edge to the FlightReservation entity by ID.
func (pu *PassengerUpdate) SetFlightReservationID(id uuid.UUID) *PassengerUpdate {
	pu.mutation.SetFlightReservationID(id)
	return pu
}

// SetNillableFlightReservationID sets the "flight_reservation" edge to the FlightReservation entity by ID if the given value is not nil.
func (pu *PassengerUpdate) SetNillableFlightReservationID(id *uuid.UUID) *PassengerUpdate {
	if id != nil {
		pu = pu.SetFlightReservationID(*id)
	}
	return pu
}

// SetFlightReservation sets the "flight_reservation" edge to the FlightReservation entity.
func (pu *PassengerUpdate) SetFlightReservation(f *FlightReservation) *PassengerUpdate {
	return pu.SetFlightReservationID(f.ID)
}

// SetFlightSeatID sets the "flight_seat" edge to the FlightSeat entity by ID.
func (pu *PassengerUpdate) SetFlightSeatID(id uuid.UUID) *PassengerUpdate {
	pu.mutation.SetFlightSeatID(id)
	return pu
}

// SetNillableFlightSeatID sets the "flight_seat" edge to the FlightSeat entity by ID if the given value is not nil.
func (pu *PassengerUpdate) SetNillableFlightSeatID(id *uuid.UUID) *PassengerUpdate {
	if id != nil {
		pu = pu.SetFlightSeatID(*id)
	}
	return pu
}

// SetFlightSeat sets the "flight_seat" edge to the FlightSeat entity.
func (pu *PassengerUpdate) SetFlightSeat(f *FlightSeat) *PassengerUpdate {
	return pu.SetFlightSeatID(f.ID)
}

// Mutation returns the PassengerMutation object of the builder.
func (pu *PassengerUpdate) Mutation() *PassengerMutation {
	return pu.mutation
}

// ClearFlightReservation clears the "flight_reservation" edge to the FlightReservation entity.
func (pu *PassengerUpdate) ClearFlightReservation() *PassengerUpdate {
	pu.mutation.ClearFlightReservation()
	return pu
}

// ClearFlightSeat clears the "flight_seat" edge to the FlightSeat entity.
func (pu *PassengerUpdate) ClearFlightSeat() *PassengerUpdate {
	pu.mutation.ClearFlightSeat()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PassengerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PassengerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PassengerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PassengerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PassengerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PassengerUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := passenger.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PassengerUpdate) check() error {
	if v, ok := pu.mutation.Firstname(); ok {
		if err := passenger.FirstnameValidator(v); err != nil {
			return &ValidationError{Name: "firstname", err: fmt.Errorf("ent: validator failed for field \"firstname\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Lastname(); ok {
		if err := passenger.LastnameValidator(v); err != nil {
			return &ValidationError{Name: "lastname", err: fmt.Errorf("ent: validator failed for field \"lastname\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Age(); ok {
		if err := passenger.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := pu.mutation.PassportNumber(); ok {
		if err := passenger.PassportNumberValidator(v); err != nil {
			return &ValidationError{Name: "passport_number", err: fmt.Errorf("ent: validator failed for field \"passport_number\": %w", err)}
		}
	}
	return nil
}

func (pu *PassengerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   passenger.Table,
			Columns: passenger.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: passenger.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Firstname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: passenger.FieldFirstname,
		})
	}
	if value, ok := pu.mutation.Lastname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: passenger.FieldLastname,
		})
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: passenger.FieldAge,
		})
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: passenger.FieldAge,
		})
	}
	if value, ok := pu.mutation.PassportNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: passenger.FieldPassportNumber,
		})
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: passenger.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: passenger.FieldUpdatedAt,
		})
	}
	if pu.mutation.FlightReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passenger.FlightReservationTable,
			Columns: []string{passenger.FlightReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FlightReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passenger.FlightReservationTable,
			Columns: []string{passenger.FlightReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FlightSeatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   passenger.FlightSeatTable,
			Columns: []string{passenger.FlightSeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FlightSeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   passenger.FlightSeatTable,
			Columns: []string{passenger.FlightSeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passenger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PassengerUpdateOne is the builder for updating a single Passenger entity.
type PassengerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PassengerMutation
}

// SetFirstname sets the "firstname" field.
func (puo *PassengerUpdateOne) SetFirstname(s string) *PassengerUpdateOne {
	puo.mutation.SetFirstname(s)
	return puo
}

// SetLastname sets the "lastname" field.
func (puo *PassengerUpdateOne) SetLastname(s string) *PassengerUpdateOne {
	puo.mutation.SetLastname(s)
	return puo
}

// SetAge sets the "age" field.
func (puo *PassengerUpdateOne) SetAge(i int) *PassengerUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// AddAge adds i to the "age" field.
func (puo *PassengerUpdateOne) AddAge(i int) *PassengerUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetPassportNumber sets the "passport_number" field.
func (puo *PassengerUpdateOne) SetPassportNumber(s string) *PassengerUpdateOne {
	puo.mutation.SetPassportNumber(s)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PassengerUpdateOne) SetCreatedAt(t time.Time) *PassengerUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PassengerUpdateOne) SetNillableCreatedAt(t *time.Time) *PassengerUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PassengerUpdateOne) SetUpdatedAt(t time.Time) *PassengerUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetFlightReservationID sets the "flight_reservation" edge to the FlightReservation entity by ID.
func (puo *PassengerUpdateOne) SetFlightReservationID(id uuid.UUID) *PassengerUpdateOne {
	puo.mutation.SetFlightReservationID(id)
	return puo
}

// SetNillableFlightReservationID sets the "flight_reservation" edge to the FlightReservation entity by ID if the given value is not nil.
func (puo *PassengerUpdateOne) SetNillableFlightReservationID(id *uuid.UUID) *PassengerUpdateOne {
	if id != nil {
		puo = puo.SetFlightReservationID(*id)
	}
	return puo
}

// SetFlightReservation sets the "flight_reservation" edge to the FlightReservation entity.
func (puo *PassengerUpdateOne) SetFlightReservation(f *FlightReservation) *PassengerUpdateOne {
	return puo.SetFlightReservationID(f.ID)
}

// SetFlightSeatID sets the "flight_seat" edge to the FlightSeat entity by ID.
func (puo *PassengerUpdateOne) SetFlightSeatID(id uuid.UUID) *PassengerUpdateOne {
	puo.mutation.SetFlightSeatID(id)
	return puo
}

// SetNillableFlightSeatID sets the "flight_seat" edge to the FlightSeat entity by ID if the given value is not nil.
func (puo *PassengerUpdateOne) SetNillableFlightSeatID(id *uuid.UUID) *PassengerUpdateOne {
	if id != nil {
		puo = puo.SetFlightSeatID(*id)
	}
	return puo
}

// SetFlightSeat sets the "flight_seat" edge to the FlightSeat entity.
func (puo *PassengerUpdateOne) SetFlightSeat(f *FlightSeat) *PassengerUpdateOne {
	return puo.SetFlightSeatID(f.ID)
}

// Mutation returns the PassengerMutation object of the builder.
func (puo *PassengerUpdateOne) Mutation() *PassengerMutation {
	return puo.mutation
}

// ClearFlightReservation clears the "flight_reservation" edge to the FlightReservation entity.
func (puo *PassengerUpdateOne) ClearFlightReservation() *PassengerUpdateOne {
	puo.mutation.ClearFlightReservation()
	return puo
}

// ClearFlightSeat clears the "flight_seat" edge to the FlightSeat entity.
func (puo *PassengerUpdateOne) ClearFlightSeat() *PassengerUpdateOne {
	puo.mutation.ClearFlightSeat()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PassengerUpdateOne) Select(field string, fields ...string) *PassengerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Passenger entity.
func (puo *PassengerUpdateOne) Save(ctx context.Context) (*Passenger, error) {
	var (
		err  error
		node *Passenger
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PassengerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PassengerUpdateOne) SaveX(ctx context.Context) *Passenger {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PassengerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PassengerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PassengerUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := passenger.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PassengerUpdateOne) check() error {
	if v, ok := puo.mutation.Firstname(); ok {
		if err := passenger.FirstnameValidator(v); err != nil {
			return &ValidationError{Name: "firstname", err: fmt.Errorf("ent: validator failed for field \"firstname\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Lastname(); ok {
		if err := passenger.LastnameValidator(v); err != nil {
			return &ValidationError{Name: "lastname", err: fmt.Errorf("ent: validator failed for field \"lastname\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Age(); ok {
		if err := passenger.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := puo.mutation.PassportNumber(); ok {
		if err := passenger.PassportNumberValidator(v); err != nil {
			return &ValidationError{Name: "passport_number", err: fmt.Errorf("ent: validator failed for field \"passport_number\": %w", err)}
		}
	}
	return nil
}

func (puo *PassengerUpdateOne) sqlSave(ctx context.Context) (_node *Passenger, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   passenger.Table,
			Columns: passenger.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: passenger.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Passenger.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passenger.FieldID)
		for _, f := range fields {
			if !passenger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != passenger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Firstname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: passenger.FieldFirstname,
		})
	}
	if value, ok := puo.mutation.Lastname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: passenger.FieldLastname,
		})
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: passenger.FieldAge,
		})
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: passenger.FieldAge,
		})
	}
	if value, ok := puo.mutation.PassportNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: passenger.FieldPassportNumber,
		})
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: passenger.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: passenger.FieldUpdatedAt,
		})
	}
	if puo.mutation.FlightReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passenger.FlightReservationTable,
			Columns: []string{passenger.FlightReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FlightReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passenger.FlightReservationTable,
			Columns: []string{passenger.FlightReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FlightSeatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   passenger.FlightSeatTable,
			Columns: []string{passenger.FlightSeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FlightSeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   passenger.FlightSeatTable,
			Columns: []string{passenger.FlightSeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Passenger{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passenger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
