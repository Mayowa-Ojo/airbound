// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/aircraft"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/flightreservation"
	"airbound/internal/ent/flightseat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FlightInstanceCreate is the builder for creating a FlightInstance entity.
type FlightInstanceCreate struct {
	config
	mutation *FlightInstanceMutation
	hooks    []Hook
}

// SetDepartureGate sets the "departure_gate" field.
func (fic *FlightInstanceCreate) SetDepartureGate(i int) *FlightInstanceCreate {
	fic.mutation.SetDepartureGate(i)
	return fic
}

// SetArrivalGate sets the "arrival_gate" field.
func (fic *FlightInstanceCreate) SetArrivalGate(i int) *FlightInstanceCreate {
	fic.mutation.SetArrivalGate(i)
	return fic
}

// SetFlightStatus sets the "flight_status" field.
func (fic *FlightInstanceCreate) SetFlightStatus(es enums.FlightStatus) *FlightInstanceCreate {
	fic.mutation.SetFlightStatus(es)
	return fic
}

// SetCreatedAt sets the "created_at" field.
func (fic *FlightInstanceCreate) SetCreatedAt(t time.Time) *FlightInstanceCreate {
	fic.mutation.SetCreatedAt(t)
	return fic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fic *FlightInstanceCreate) SetNillableCreatedAt(t *time.Time) *FlightInstanceCreate {
	if t != nil {
		fic.SetCreatedAt(*t)
	}
	return fic
}

// SetUpdatedAt sets the "updated_at" field.
func (fic *FlightInstanceCreate) SetUpdatedAt(t time.Time) *FlightInstanceCreate {
	fic.mutation.SetUpdatedAt(t)
	return fic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fic *FlightInstanceCreate) SetNillableUpdatedAt(t *time.Time) *FlightInstanceCreate {
	if t != nil {
		fic.SetUpdatedAt(*t)
	}
	return fic
}

// SetID sets the "id" field.
func (fic *FlightInstanceCreate) SetID(u uuid.UUID) *FlightInstanceCreate {
	fic.mutation.SetID(u)
	return fic
}

// SetFlightID sets the "flight" edge to the Flight entity by ID.
func (fic *FlightInstanceCreate) SetFlightID(id uuid.UUID) *FlightInstanceCreate {
	fic.mutation.SetFlightID(id)
	return fic
}

// SetNillableFlightID sets the "flight" edge to the Flight entity by ID if the given value is not nil.
func (fic *FlightInstanceCreate) SetNillableFlightID(id *uuid.UUID) *FlightInstanceCreate {
	if id != nil {
		fic = fic.SetFlightID(*id)
	}
	return fic
}

// SetFlight sets the "flight" edge to the Flight entity.
func (fic *FlightInstanceCreate) SetFlight(f *Flight) *FlightInstanceCreate {
	return fic.SetFlightID(f.ID)
}

// SetAircraftID sets the "aircraft" edge to the Aircraft entity by ID.
func (fic *FlightInstanceCreate) SetAircraftID(id uuid.UUID) *FlightInstanceCreate {
	fic.mutation.SetAircraftID(id)
	return fic
}

// SetNillableAircraftID sets the "aircraft" edge to the Aircraft entity by ID if the given value is not nil.
func (fic *FlightInstanceCreate) SetNillableAircraftID(id *uuid.UUID) *FlightInstanceCreate {
	if id != nil {
		fic = fic.SetAircraftID(*id)
	}
	return fic
}

// SetAircraft sets the "aircraft" edge to the Aircraft entity.
func (fic *FlightInstanceCreate) SetAircraft(a *Aircraft) *FlightInstanceCreate {
	return fic.SetAircraftID(a.ID)
}

// AddFlightReservationIDs adds the "flight_reservations" edge to the FlightReservation entity by IDs.
func (fic *FlightInstanceCreate) AddFlightReservationIDs(ids ...uuid.UUID) *FlightInstanceCreate {
	fic.mutation.AddFlightReservationIDs(ids...)
	return fic
}

// AddFlightReservations adds the "flight_reservations" edges to the FlightReservation entity.
func (fic *FlightInstanceCreate) AddFlightReservations(f ...*FlightReservation) *FlightInstanceCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fic.AddFlightReservationIDs(ids...)
}

// AddFlightSeatIDs adds the "flight_seats" edge to the FlightSeat entity by IDs.
func (fic *FlightInstanceCreate) AddFlightSeatIDs(ids ...uuid.UUID) *FlightInstanceCreate {
	fic.mutation.AddFlightSeatIDs(ids...)
	return fic
}

// AddFlightSeats adds the "flight_seats" edges to the FlightSeat entity.
func (fic *FlightInstanceCreate) AddFlightSeats(f ...*FlightSeat) *FlightInstanceCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fic.AddFlightSeatIDs(ids...)
}

// Mutation returns the FlightInstanceMutation object of the builder.
func (fic *FlightInstanceCreate) Mutation() *FlightInstanceMutation {
	return fic.mutation
}

// Save creates the FlightInstance in the database.
func (fic *FlightInstanceCreate) Save(ctx context.Context) (*FlightInstance, error) {
	var (
		err  error
		node *FlightInstance
	)
	fic.defaults()
	if len(fic.hooks) == 0 {
		if err = fic.check(); err != nil {
			return nil, err
		}
		node, err = fic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fic.check(); err != nil {
				return nil, err
			}
			fic.mutation = mutation
			if node, err = fic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fic.hooks) - 1; i >= 0; i-- {
			if fic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FlightInstanceCreate) SaveX(ctx context.Context) *FlightInstance {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FlightInstanceCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FlightInstanceCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FlightInstanceCreate) defaults() {
	if _, ok := fic.mutation.CreatedAt(); !ok {
		v := flightinstance.DefaultCreatedAt()
		fic.mutation.SetCreatedAt(v)
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		v := flightinstance.DefaultUpdatedAt()
		fic.mutation.SetUpdatedAt(v)
	}
	if _, ok := fic.mutation.ID(); !ok {
		v := flightinstance.DefaultID()
		fic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FlightInstanceCreate) check() error {
	if _, ok := fic.mutation.DepartureGate(); !ok {
		return &ValidationError{Name: "departure_gate", err: errors.New(`ent: missing required field "departure_gate"`)}
	}
	if v, ok := fic.mutation.DepartureGate(); ok {
		if err := flightinstance.DepartureGateValidator(v); err != nil {
			return &ValidationError{Name: "departure_gate", err: fmt.Errorf(`ent: validator failed for field "departure_gate": %w`, err)}
		}
	}
	if _, ok := fic.mutation.ArrivalGate(); !ok {
		return &ValidationError{Name: "arrival_gate", err: errors.New(`ent: missing required field "arrival_gate"`)}
	}
	if v, ok := fic.mutation.ArrivalGate(); ok {
		if err := flightinstance.ArrivalGateValidator(v); err != nil {
			return &ValidationError{Name: "arrival_gate", err: fmt.Errorf(`ent: validator failed for field "arrival_gate": %w`, err)}
		}
	}
	if _, ok := fic.mutation.FlightStatus(); !ok {
		return &ValidationError{Name: "flight_status", err: errors.New(`ent: missing required field "flight_status"`)}
	}
	if v, ok := fic.mutation.FlightStatus(); ok {
		if err := flightinstance.FlightStatusValidator(v); err != nil {
			return &ValidationError{Name: "flight_status", err: fmt.Errorf(`ent: validator failed for field "flight_status": %w`, err)}
		}
	}
	if _, ok := fic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (fic *FlightInstanceCreate) sqlSave(ctx context.Context) (*FlightInstance, error) {
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (fic *FlightInstanceCreate) createSpec() (*FlightInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &FlightInstance{config: fic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flightinstance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightinstance.FieldID,
			},
		}
	)
	if id, ok := fic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fic.mutation.DepartureGate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldDepartureGate,
		})
		_node.DepartureGate = value
	}
	if value, ok := fic.mutation.ArrivalGate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: flightinstance.FieldArrivalGate,
		})
		_node.ArrivalGate = value
	}
	if value, ok := fic.mutation.FlightStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flightinstance.FieldFlightStatus,
		})
		_node.FlightStatus = value
	}
	if value, ok := fic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightinstance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightinstance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := fic.mutation.FlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flightinstance.FlightTable,
			Columns: []string{flightinstance.FlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.flight_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.AircraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flightinstance.AircraftTable,
			Columns: []string{flightinstance.AircraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: aircraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.FlightReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightReservationsTable,
			Columns: []string{flightinstance.FlightReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightreservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.FlightSeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flightinstance.FlightSeatsTable,
			Columns: []string{flightinstance.FlightSeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightseat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FlightInstanceCreateBulk is the builder for creating many FlightInstance entities in bulk.
type FlightInstanceCreateBulk struct {
	config
	builders []*FlightInstanceCreate
}

// Save creates the FlightInstance entities in the database.
func (ficb *FlightInstanceCreateBulk) Save(ctx context.Context) ([]*FlightInstance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FlightInstance, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlightInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FlightInstanceCreateBulk) SaveX(ctx context.Context) []*FlightInstance {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FlightInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FlightInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
