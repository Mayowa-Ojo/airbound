// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/aircraft"
	"airbound/internal/ent/customtypes"
	"airbound/internal/ent/enums"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/flightschedule"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FlightInstance is the model entity for the FlightInstance schema.
type FlightInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DepartureDate holds the value of the "departure_date" field.
	DepartureDate customtypes.Date `json:"departure_date,omitempty"`
	// ArrivalDate holds the value of the "arrival_date" field.
	ArrivalDate customtypes.Date `json:"arrival_date,omitempty"`
	// DepartureGate holds the value of the "departure_gate" field.
	DepartureGate int `json:"departure_gate,omitempty"`
	// ArrivalGate holds the value of the "arrival_gate" field.
	ArrivalGate int `json:"arrival_gate,omitempty"`
	// FlightStatus holds the value of the "flight_status" field.
	FlightStatus enums.FlightStatus `json:"flight_status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlightInstanceQuery when eager-loading is set.
	Edges              FlightInstanceEdges `json:"edges"`
	flight_id          *uuid.UUID
	flight_schedule_id *uuid.UUID
}

// FlightInstanceEdges holds the relations/edges for other nodes in the graph.
type FlightInstanceEdges struct {
	// Flight holds the value of the flight edge.
	Flight *Flight `json:"flight,omitempty"`
	// FlightSchedule holds the value of the flight_schedule edge.
	FlightSchedule *FlightSchedule `json:"flight_schedule,omitempty"`
	// Aircraft holds the value of the aircraft edge.
	Aircraft *Aircraft `json:"aircraft,omitempty"`
	// FlightReservations holds the value of the flight_reservations edge.
	FlightReservations []*FlightReservation `json:"flight_reservations,omitempty"`
	// FlightSeats holds the value of the flight_seats edge.
	FlightSeats []*FlightSeat `json:"flight_seats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// FlightOrErr returns the Flight value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlightInstanceEdges) FlightOrErr() (*Flight, error) {
	if e.loadedTypes[0] {
		if e.Flight == nil {
			// The edge flight was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flight.Label}
		}
		return e.Flight, nil
	}
	return nil, &NotLoadedError{edge: "flight"}
}

// FlightScheduleOrErr returns the FlightSchedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlightInstanceEdges) FlightScheduleOrErr() (*FlightSchedule, error) {
	if e.loadedTypes[1] {
		if e.FlightSchedule == nil {
			// The edge flight_schedule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flightschedule.Label}
		}
		return e.FlightSchedule, nil
	}
	return nil, &NotLoadedError{edge: "flight_schedule"}
}

// AircraftOrErr returns the Aircraft value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlightInstanceEdges) AircraftOrErr() (*Aircraft, error) {
	if e.loadedTypes[2] {
		if e.Aircraft == nil {
			// The edge aircraft was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: aircraft.Label}
		}
		return e.Aircraft, nil
	}
	return nil, &NotLoadedError{edge: "aircraft"}
}

// FlightReservationsOrErr returns the FlightReservations value or an error if the edge
// was not loaded in eager-loading.
func (e FlightInstanceEdges) FlightReservationsOrErr() ([]*FlightReservation, error) {
	if e.loadedTypes[3] {
		return e.FlightReservations, nil
	}
	return nil, &NotLoadedError{edge: "flight_reservations"}
}

// FlightSeatsOrErr returns the FlightSeats value or an error if the edge
// was not loaded in eager-loading.
func (e FlightInstanceEdges) FlightSeatsOrErr() ([]*FlightSeat, error) {
	if e.loadedTypes[4] {
		return e.FlightSeats, nil
	}
	return nil, &NotLoadedError{edge: "flight_seats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlightInstance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case flightinstance.FieldDepartureDate, flightinstance.FieldArrivalDate:
			values[i] = new(customtypes.Date)
		case flightinstance.FieldDepartureGate, flightinstance.FieldArrivalGate:
			values[i] = new(sql.NullInt64)
		case flightinstance.FieldFlightStatus:
			values[i] = new(sql.NullString)
		case flightinstance.FieldCreatedAt, flightinstance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case flightinstance.FieldID:
			values[i] = new(uuid.UUID)
		case flightinstance.ForeignKeys[0]: // flight_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case flightinstance.ForeignKeys[1]: // flight_schedule_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type FlightInstance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlightInstance fields.
func (fi *FlightInstance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flightinstance.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fi.ID = *value
			}
		case flightinstance.FieldDepartureDate:
			if value, ok := values[i].(*customtypes.Date); !ok {
				return fmt.Errorf("unexpected type %T for field departure_date", values[i])
			} else if value != nil {
				fi.DepartureDate = *value
			}
		case flightinstance.FieldArrivalDate:
			if value, ok := values[i].(*customtypes.Date); !ok {
				return fmt.Errorf("unexpected type %T for field arrival_date", values[i])
			} else if value != nil {
				fi.ArrivalDate = *value
			}
		case flightinstance.FieldDepartureGate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field departure_gate", values[i])
			} else if value.Valid {
				fi.DepartureGate = int(value.Int64)
			}
		case flightinstance.FieldArrivalGate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field arrival_gate", values[i])
			} else if value.Valid {
				fi.ArrivalGate = int(value.Int64)
			}
		case flightinstance.FieldFlightStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flight_status", values[i])
			} else if value.Valid {
				fi.FlightStatus = enums.FlightStatus(value.String)
			}
		case flightinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fi.CreatedAt = value.Time
			}
		case flightinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fi.UpdatedAt = value.Time
			}
		case flightinstance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field flight_id", values[i])
			} else if value.Valid {
				fi.flight_id = new(uuid.UUID)
				*fi.flight_id = *value.S.(*uuid.UUID)
			}
		case flightinstance.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field flight_schedule_id", values[i])
			} else if value.Valid {
				fi.flight_schedule_id = new(uuid.UUID)
				*fi.flight_schedule_id = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryFlight queries the "flight" edge of the FlightInstance entity.
func (fi *FlightInstance) QueryFlight() *FlightQuery {
	return (&FlightInstanceClient{config: fi.config}).QueryFlight(fi)
}

// QueryFlightSchedule queries the "flight_schedule" edge of the FlightInstance entity.
func (fi *FlightInstance) QueryFlightSchedule() *FlightScheduleQuery {
	return (&FlightInstanceClient{config: fi.config}).QueryFlightSchedule(fi)
}

// QueryAircraft queries the "aircraft" edge of the FlightInstance entity.
func (fi *FlightInstance) QueryAircraft() *AircraftQuery {
	return (&FlightInstanceClient{config: fi.config}).QueryAircraft(fi)
}

// QueryFlightReservations queries the "flight_reservations" edge of the FlightInstance entity.
func (fi *FlightInstance) QueryFlightReservations() *FlightReservationQuery {
	return (&FlightInstanceClient{config: fi.config}).QueryFlightReservations(fi)
}

// QueryFlightSeats queries the "flight_seats" edge of the FlightInstance entity.
func (fi *FlightInstance) QueryFlightSeats() *FlightSeatQuery {
	return (&FlightInstanceClient{config: fi.config}).QueryFlightSeats(fi)
}

// Update returns a builder for updating this FlightInstance.
// Note that you need to call FlightInstance.Unwrap() before calling this method if this FlightInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FlightInstance) Update() *FlightInstanceUpdateOne {
	return (&FlightInstanceClient{config: fi.config}).UpdateOne(fi)
}

// Unwrap unwraps the FlightInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FlightInstance) Unwrap() *FlightInstance {
	tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlightInstance is not a transactional entity")
	}
	fi.config.driver = tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FlightInstance) String() string {
	var builder strings.Builder
	builder.WriteString("FlightInstance(")
	builder.WriteString(fmt.Sprintf("id=%v", fi.ID))
	builder.WriteString(", departure_date=")
	builder.WriteString(fmt.Sprintf("%v", fi.DepartureDate))
	builder.WriteString(", arrival_date=")
	builder.WriteString(fmt.Sprintf("%v", fi.ArrivalDate))
	builder.WriteString(", departure_gate=")
	builder.WriteString(fmt.Sprintf("%v", fi.DepartureGate))
	builder.WriteString(", arrival_gate=")
	builder.WriteString(fmt.Sprintf("%v", fi.ArrivalGate))
	builder.WriteString(", flight_status=")
	builder.WriteString(fmt.Sprintf("%v", fi.FlightStatus))
	builder.WriteString(", created_at=")
	builder.WriteString(fi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(fi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FlightInstances is a parsable slice of FlightInstance.
type FlightInstances []*FlightInstance

func (fi FlightInstances) config(cfg config) {
	for _i := range fi {
		fi[_i].config = cfg
	}
}
