// Code generated by entc, DO NOT EDIT.

package airline

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the airline type in the database.
	Label = "airline"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIataCode holds the string denoting the iata_code field in the database.
	FieldIataCode = "iata_code"
	// FieldIcaoCode holds the string denoting the icao_code field in the database.
	FieldIcaoCode = "icao_code"
	// FieldCallSign holds the string denoting the call_sign field in the database.
	FieldCallSign = "call_sign"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldLicenseCode holds the string denoting the license_code field in the database.
	FieldLicenseCode = "license_code"
	// FieldFleetSize holds the string denoting the fleet_size field in the database.
	FieldFleetSize = "fleet_size"
	// FieldRanking holds the string denoting the ranking field in the database.
	FieldRanking = "ranking"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAircrafts holds the string denoting the aircrafts edge name in mutations.
	EdgeAircrafts = "aircrafts"
	// EdgeCrews holds the string denoting the crews edge name in mutations.
	EdgeCrews = "crews"
	// EdgePilots holds the string denoting the pilots edge name in mutations.
	EdgePilots = "pilots"
	// EdgeFlights holds the string denoting the flights edge name in mutations.
	EdgeFlights = "flights"
	// Table holds the table name of the airline in the database.
	Table = "airlines"
	// AircraftsTable is the table that holds the aircrafts relation/edge.
	AircraftsTable = "aircrafts"
	// AircraftsInverseTable is the table name for the Aircraft entity.
	// It exists in this package in order to avoid circular dependency with the "aircraft" package.
	AircraftsInverseTable = "aircrafts"
	// AircraftsColumn is the table column denoting the aircrafts relation/edge.
	AircraftsColumn = "airline_id"
	// CrewsTable is the table that holds the crews relation/edge.
	CrewsTable = "crews"
	// CrewsInverseTable is the table name for the Crew entity.
	// It exists in this package in order to avoid circular dependency with the "crew" package.
	CrewsInverseTable = "crews"
	// CrewsColumn is the table column denoting the crews relation/edge.
	CrewsColumn = "airline_id"
	// PilotsTable is the table that holds the pilots relation/edge.
	PilotsTable = "pilots"
	// PilotsInverseTable is the table name for the Pilot entity.
	// It exists in this package in order to avoid circular dependency with the "pilot" package.
	PilotsInverseTable = "pilots"
	// PilotsColumn is the table column denoting the pilots relation/edge.
	PilotsColumn = "airline_id"
	// FlightsTable is the table that holds the flights relation/edge.
	FlightsTable = "flights"
	// FlightsInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	FlightsInverseTable = "flights"
	// FlightsColumn is the table column denoting the flights relation/edge.
	FlightsColumn = "airline_id"
)

// Columns holds all SQL columns for airline fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIataCode,
	FieldIcaoCode,
	FieldCallSign,
	FieldCountry,
	FieldLicenseCode,
	FieldFleetSize,
	FieldRanking,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// IataCodeValidator is a validator for the "iata_code" field. It is called by the builders before save.
	IataCodeValidator func(string) error
	// IcaoCodeValidator is a validator for the "icao_code" field. It is called by the builders before save.
	IcaoCodeValidator func(string) error
	// CallSignValidator is a validator for the "call_sign" field. It is called by the builders before save.
	CallSignValidator func(string) error
	// CountryValidator is a validator for the "country" field. It is called by the builders before save.
	CountryValidator func(string) error
	// LicenseCodeValidator is a validator for the "license_code" field. It is called by the builders before save.
	LicenseCodeValidator func(string) error
	// FleetSizeValidator is a validator for the "fleet_size" field. It is called by the builders before save.
	FleetSizeValidator func(int) error
	// RankingValidator is a validator for the "ranking" field. It is called by the builders before save.
	RankingValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
