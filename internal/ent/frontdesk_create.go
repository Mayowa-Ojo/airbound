// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/frontdesk"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FrontDeskCreate is the builder for creating a FrontDesk entity.
type FrontDeskCreate struct {
	config
	mutation *FrontDeskMutation
	hooks    []Hook
}

// SetEmployeeID sets the "employee_id" field.
func (fdc *FrontDeskCreate) SetEmployeeID(s string) *FrontDeskCreate {
	fdc.mutation.SetEmployeeID(s)
	return fdc
}

// SetCreatedAt sets the "created_at" field.
func (fdc *FrontDeskCreate) SetCreatedAt(t time.Time) *FrontDeskCreate {
	fdc.mutation.SetCreatedAt(t)
	return fdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fdc *FrontDeskCreate) SetNillableCreatedAt(t *time.Time) *FrontDeskCreate {
	if t != nil {
		fdc.SetCreatedAt(*t)
	}
	return fdc
}

// SetUpdatedAt sets the "updated_at" field.
func (fdc *FrontDeskCreate) SetUpdatedAt(t time.Time) *FrontDeskCreate {
	fdc.mutation.SetUpdatedAt(t)
	return fdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fdc *FrontDeskCreate) SetNillableUpdatedAt(t *time.Time) *FrontDeskCreate {
	if t != nil {
		fdc.SetUpdatedAt(*t)
	}
	return fdc
}

// SetID sets the "id" field.
func (fdc *FrontDeskCreate) SetID(u uuid.UUID) *FrontDeskCreate {
	fdc.mutation.SetID(u)
	return fdc
}

// Mutation returns the FrontDeskMutation object of the builder.
func (fdc *FrontDeskCreate) Mutation() *FrontDeskMutation {
	return fdc.mutation
}

// Save creates the FrontDesk in the database.
func (fdc *FrontDeskCreate) Save(ctx context.Context) (*FrontDesk, error) {
	var (
		err  error
		node *FrontDesk
	)
	fdc.defaults()
	if len(fdc.hooks) == 0 {
		if err = fdc.check(); err != nil {
			return nil, err
		}
		node, err = fdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrontDeskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fdc.check(); err != nil {
				return nil, err
			}
			fdc.mutation = mutation
			if node, err = fdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fdc.hooks) - 1; i >= 0; i-- {
			if fdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FrontDeskCreate) SaveX(ctx context.Context) *FrontDesk {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdc *FrontDeskCreate) Exec(ctx context.Context) error {
	_, err := fdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdc *FrontDeskCreate) ExecX(ctx context.Context) {
	if err := fdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdc *FrontDeskCreate) defaults() {
	if _, ok := fdc.mutation.CreatedAt(); !ok {
		v := frontdesk.DefaultCreatedAt()
		fdc.mutation.SetCreatedAt(v)
	}
	if _, ok := fdc.mutation.UpdatedAt(); !ok {
		v := frontdesk.DefaultUpdatedAt()
		fdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fdc.mutation.ID(); !ok {
		v := frontdesk.DefaultID()
		fdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdc *FrontDeskCreate) check() error {
	if _, ok := fdc.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "employee_id"`)}
	}
	if v, ok := fdc.mutation.EmployeeID(); ok {
		if err := frontdesk.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf(`ent: validator failed for field "employee_id": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := fdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (fdc *FrontDeskCreate) sqlSave(ctx context.Context) (*FrontDesk, error) {
	_node, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (fdc *FrontDeskCreate) createSpec() (*FrontDesk, *sqlgraph.CreateSpec) {
	var (
		_node = &FrontDesk{config: fdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: frontdesk.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: frontdesk.FieldID,
			},
		}
	)
	if id, ok := fdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fdc.mutation.EmployeeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontdesk.FieldEmployeeID,
		})
		_node.EmployeeID = value
	}
	if value, ok := fdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frontdesk.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: frontdesk.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// FrontDeskCreateBulk is the builder for creating many FrontDesk entities in bulk.
type FrontDeskCreateBulk struct {
	config
	builders []*FrontDeskCreate
}

// Save creates the FrontDesk entities in the database.
func (fdcb *FrontDeskCreateBulk) Save(ctx context.Context) ([]*FrontDesk, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fdcb.builders))
	nodes := make([]*FrontDesk, len(fdcb.builders))
	mutators := make([]Mutator, len(fdcb.builders))
	for i := range fdcb.builders {
		func(i int, root context.Context) {
			builder := fdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FrontDeskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdcb *FrontDeskCreateBulk) SaveX(ctx context.Context) []*FrontDesk {
	v, err := fdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdcb *FrontDeskCreateBulk) Exec(ctx context.Context) error {
	_, err := fdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdcb *FrontDeskCreateBulk) ExecX(ctx context.Context) {
	if err := fdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
