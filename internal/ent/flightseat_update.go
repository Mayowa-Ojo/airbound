// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/flightseat"
	"airbound/internal/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FlightSeatUpdate is the builder for updating FlightSeat entities.
type FlightSeatUpdate struct {
	config
	hooks    []Hook
	mutation *FlightSeatMutation
}

// Where appends a list predicates to the FlightSeatUpdate builder.
func (fsu *FlightSeatUpdate) Where(ps ...predicate.FlightSeat) *FlightSeatUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetFare sets the "fare" field.
func (fsu *FlightSeatUpdate) SetFare(f float64) *FlightSeatUpdate {
	fsu.mutation.ResetFare()
	fsu.mutation.SetFare(f)
	return fsu
}

// AddFare adds f to the "fare" field.
func (fsu *FlightSeatUpdate) AddFare(f float64) *FlightSeatUpdate {
	fsu.mutation.AddFare(f)
	return fsu
}

// SetCreatedAt sets the "created_at" field.
func (fsu *FlightSeatUpdate) SetCreatedAt(t time.Time) *FlightSeatUpdate {
	fsu.mutation.SetCreatedAt(t)
	return fsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsu *FlightSeatUpdate) SetNillableCreatedAt(t *time.Time) *FlightSeatUpdate {
	if t != nil {
		fsu.SetCreatedAt(*t)
	}
	return fsu
}

// SetUpdatedAt sets the "updated_at" field.
func (fsu *FlightSeatUpdate) SetUpdatedAt(t time.Time) *FlightSeatUpdate {
	fsu.mutation.SetUpdatedAt(t)
	return fsu
}

// Mutation returns the FlightSeatMutation object of the builder.
func (fsu *FlightSeatUpdate) Mutation() *FlightSeatMutation {
	return fsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FlightSeatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fsu.defaults()
	if len(fsu.hooks) == 0 {
		if err = fsu.check(); err != nil {
			return 0, err
		}
		affected, err = fsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightSeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fsu.check(); err != nil {
				return 0, err
			}
			fsu.mutation = mutation
			affected, err = fsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fsu.hooks) - 1; i >= 0; i-- {
			if fsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FlightSeatUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FlightSeatUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FlightSeatUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsu *FlightSeatUpdate) defaults() {
	if _, ok := fsu.mutation.UpdatedAt(); !ok {
		v := flightseat.UpdateDefaultUpdatedAt()
		fsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsu *FlightSeatUpdate) check() error {
	if v, ok := fsu.mutation.Fare(); ok {
		if err := flightseat.FareValidator(v); err != nil {
			return &ValidationError{Name: "fare", err: fmt.Errorf("ent: validator failed for field \"fare\": %w", err)}
		}
	}
	return nil
}

func (fsu *FlightSeatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightseat.Table,
			Columns: flightseat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightseat.FieldID,
			},
		},
	}
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.Fare(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: flightseat.FieldFare,
		})
	}
	if value, ok := fsu.mutation.AddedFare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: flightseat.FieldFare,
		})
	}
	if value, ok := fsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightseat.FieldCreatedAt,
		})
	}
	if value, ok := fsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightseat.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightseat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlightSeatUpdateOne is the builder for updating a single FlightSeat entity.
type FlightSeatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightSeatMutation
}

// SetFare sets the "fare" field.
func (fsuo *FlightSeatUpdateOne) SetFare(f float64) *FlightSeatUpdateOne {
	fsuo.mutation.ResetFare()
	fsuo.mutation.SetFare(f)
	return fsuo
}

// AddFare adds f to the "fare" field.
func (fsuo *FlightSeatUpdateOne) AddFare(f float64) *FlightSeatUpdateOne {
	fsuo.mutation.AddFare(f)
	return fsuo
}

// SetCreatedAt sets the "created_at" field.
func (fsuo *FlightSeatUpdateOne) SetCreatedAt(t time.Time) *FlightSeatUpdateOne {
	fsuo.mutation.SetCreatedAt(t)
	return fsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsuo *FlightSeatUpdateOne) SetNillableCreatedAt(t *time.Time) *FlightSeatUpdateOne {
	if t != nil {
		fsuo.SetCreatedAt(*t)
	}
	return fsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fsuo *FlightSeatUpdateOne) SetUpdatedAt(t time.Time) *FlightSeatUpdateOne {
	fsuo.mutation.SetUpdatedAt(t)
	return fsuo
}

// Mutation returns the FlightSeatMutation object of the builder.
func (fsuo *FlightSeatUpdateOne) Mutation() *FlightSeatMutation {
	return fsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FlightSeatUpdateOne) Select(field string, fields ...string) *FlightSeatUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FlightSeat entity.
func (fsuo *FlightSeatUpdateOne) Save(ctx context.Context) (*FlightSeat, error) {
	var (
		err  error
		node *FlightSeat
	)
	fsuo.defaults()
	if len(fsuo.hooks) == 0 {
		if err = fsuo.check(); err != nil {
			return nil, err
		}
		node, err = fsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlightSeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fsuo.check(); err != nil {
				return nil, err
			}
			fsuo.mutation = mutation
			node, err = fsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fsuo.hooks) - 1; i >= 0; i-- {
			if fsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FlightSeatUpdateOne) SaveX(ctx context.Context) *FlightSeat {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FlightSeatUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FlightSeatUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsuo *FlightSeatUpdateOne) defaults() {
	if _, ok := fsuo.mutation.UpdatedAt(); !ok {
		v := flightseat.UpdateDefaultUpdatedAt()
		fsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsuo *FlightSeatUpdateOne) check() error {
	if v, ok := fsuo.mutation.Fare(); ok {
		if err := flightseat.FareValidator(v); err != nil {
			return &ValidationError{Name: "fare", err: fmt.Errorf("ent: validator failed for field \"fare\": %w", err)}
		}
	}
	return nil
}

func (fsuo *FlightSeatUpdateOne) sqlSave(ctx context.Context) (_node *FlightSeat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flightseat.Table,
			Columns: flightseat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flightseat.FieldID,
			},
		},
	}
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FlightSeat.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flightseat.FieldID)
		for _, f := range fields {
			if !flightseat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flightseat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.Fare(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: flightseat.FieldFare,
		})
	}
	if value, ok := fsuo.mutation.AddedFare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: flightseat.FieldFare,
		})
	}
	if value, ok := fsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightseat.FieldCreatedAt,
		})
	}
	if value, ok := fsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flightseat.FieldUpdatedAt,
		})
	}
	_node = &FlightSeat{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flightseat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
