// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/airline"
	"airbound/internal/ent/crew"
	"airbound/internal/ent/flight"
	"airbound/internal/ent/predicate"
	"airbound/internal/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CrewUpdate is the builder for updating Crew entities.
type CrewUpdate struct {
	config
	hooks    []Hook
	mutation *CrewMutation
}

// Where appends a list predicates to the CrewUpdate builder.
func (cu *CrewUpdate) Where(ps ...predicate.Crew) *CrewUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetEmployeeID sets the "employee_id" field.
func (cu *CrewUpdate) SetEmployeeID(s string) *CrewUpdate {
	cu.mutation.SetEmployeeID(s)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CrewUpdate) SetCreatedAt(t time.Time) *CrewUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CrewUpdate) SetNillableCreatedAt(t *time.Time) *CrewUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CrewUpdate) SetUpdatedAt(t time.Time) *CrewUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cu *CrewUpdate) SetUserID(id uuid.UUID) *CrewUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CrewUpdate) SetUser(u *User) *CrewUpdate {
	return cu.SetUserID(u.ID)
}

// SetAirlineID sets the "airline" edge to the Airline entity by ID.
func (cu *CrewUpdate) SetAirlineID(id uuid.UUID) *CrewUpdate {
	cu.mutation.SetAirlineID(id)
	return cu
}

// SetNillableAirlineID sets the "airline" edge to the Airline entity by ID if the given value is not nil.
func (cu *CrewUpdate) SetNillableAirlineID(id *uuid.UUID) *CrewUpdate {
	if id != nil {
		cu = cu.SetAirlineID(*id)
	}
	return cu
}

// SetAirline sets the "airline" edge to the Airline entity.
func (cu *CrewUpdate) SetAirline(a *Airline) *CrewUpdate {
	return cu.SetAirlineID(a.ID)
}

// AddFlightIDs adds the "flights" edge to the Flight entity by IDs.
func (cu *CrewUpdate) AddFlightIDs(ids ...uuid.UUID) *CrewUpdate {
	cu.mutation.AddFlightIDs(ids...)
	return cu
}

// AddFlights adds the "flights" edges to the Flight entity.
func (cu *CrewUpdate) AddFlights(f ...*Flight) *CrewUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.AddFlightIDs(ids...)
}

// Mutation returns the CrewMutation object of the builder.
func (cu *CrewUpdate) Mutation() *CrewMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CrewUpdate) ClearUser() *CrewUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearAirline clears the "airline" edge to the Airline entity.
func (cu *CrewUpdate) ClearAirline() *CrewUpdate {
	cu.mutation.ClearAirline()
	return cu
}

// ClearFlights clears all "flights" edges to the Flight entity.
func (cu *CrewUpdate) ClearFlights() *CrewUpdate {
	cu.mutation.ClearFlights()
	return cu
}

// RemoveFlightIDs removes the "flights" edge to Flight entities by IDs.
func (cu *CrewUpdate) RemoveFlightIDs(ids ...uuid.UUID) *CrewUpdate {
	cu.mutation.RemoveFlightIDs(ids...)
	return cu
}

// RemoveFlights removes "flights" edges to Flight entities.
func (cu *CrewUpdate) RemoveFlights(f ...*Flight) *CrewUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.RemoveFlightIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CrewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CrewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CrewUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CrewUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CrewUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CrewUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := crew.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CrewUpdate) check() error {
	if v, ok := cu.mutation.EmployeeID(); ok {
		if err := crew.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf(`ent: validator failed for field "Crew.employee_id": %w`, err)}
		}
	}
	if _, ok := cu.mutation.UserID(); cu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Crew.user"`)
	}
	return nil
}

func (cu *CrewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crew.Table,
			Columns: crew.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: crew.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.EmployeeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crew.FieldEmployeeID,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crew.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crew.FieldUpdatedAt,
		})
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   crew.UserTable,
			Columns: []string{crew.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   crew.UserTable,
			Columns: []string{crew.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AirlineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crew.AirlineTable,
			Columns: []string{crew.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AirlineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crew.AirlineTable,
			Columns: []string{crew.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.FlightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crew.FlightsTable,
			Columns: crew.FlightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFlightsIDs(); len(nodes) > 0 && !cu.mutation.FlightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crew.FlightsTable,
			Columns: crew.FlightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FlightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crew.FlightsTable,
			Columns: crew.FlightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CrewUpdateOne is the builder for updating a single Crew entity.
type CrewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CrewMutation
}

// SetEmployeeID sets the "employee_id" field.
func (cuo *CrewUpdateOne) SetEmployeeID(s string) *CrewUpdateOne {
	cuo.mutation.SetEmployeeID(s)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CrewUpdateOne) SetCreatedAt(t time.Time) *CrewUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CrewUpdateOne) SetNillableCreatedAt(t *time.Time) *CrewUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CrewUpdateOne) SetUpdatedAt(t time.Time) *CrewUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cuo *CrewUpdateOne) SetUserID(id uuid.UUID) *CrewUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CrewUpdateOne) SetUser(u *User) *CrewUpdateOne {
	return cuo.SetUserID(u.ID)
}

// SetAirlineID sets the "airline" edge to the Airline entity by ID.
func (cuo *CrewUpdateOne) SetAirlineID(id uuid.UUID) *CrewUpdateOne {
	cuo.mutation.SetAirlineID(id)
	return cuo
}

// SetNillableAirlineID sets the "airline" edge to the Airline entity by ID if the given value is not nil.
func (cuo *CrewUpdateOne) SetNillableAirlineID(id *uuid.UUID) *CrewUpdateOne {
	if id != nil {
		cuo = cuo.SetAirlineID(*id)
	}
	return cuo
}

// SetAirline sets the "airline" edge to the Airline entity.
func (cuo *CrewUpdateOne) SetAirline(a *Airline) *CrewUpdateOne {
	return cuo.SetAirlineID(a.ID)
}

// AddFlightIDs adds the "flights" edge to the Flight entity by IDs.
func (cuo *CrewUpdateOne) AddFlightIDs(ids ...uuid.UUID) *CrewUpdateOne {
	cuo.mutation.AddFlightIDs(ids...)
	return cuo
}

// AddFlights adds the "flights" edges to the Flight entity.
func (cuo *CrewUpdateOne) AddFlights(f ...*Flight) *CrewUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.AddFlightIDs(ids...)
}

// Mutation returns the CrewMutation object of the builder.
func (cuo *CrewUpdateOne) Mutation() *CrewMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CrewUpdateOne) ClearUser() *CrewUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearAirline clears the "airline" edge to the Airline entity.
func (cuo *CrewUpdateOne) ClearAirline() *CrewUpdateOne {
	cuo.mutation.ClearAirline()
	return cuo
}

// ClearFlights clears all "flights" edges to the Flight entity.
func (cuo *CrewUpdateOne) ClearFlights() *CrewUpdateOne {
	cuo.mutation.ClearFlights()
	return cuo
}

// RemoveFlightIDs removes the "flights" edge to Flight entities by IDs.
func (cuo *CrewUpdateOne) RemoveFlightIDs(ids ...uuid.UUID) *CrewUpdateOne {
	cuo.mutation.RemoveFlightIDs(ids...)
	return cuo
}

// RemoveFlights removes "flights" edges to Flight entities.
func (cuo *CrewUpdateOne) RemoveFlights(f ...*Flight) *CrewUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.RemoveFlightIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CrewUpdateOne) Select(field string, fields ...string) *CrewUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Crew entity.
func (cuo *CrewUpdateOne) Save(ctx context.Context) (*Crew, error) {
	var (
		err  error
		node *Crew
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CrewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CrewUpdateOne) SaveX(ctx context.Context) *Crew {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CrewUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CrewUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CrewUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := crew.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CrewUpdateOne) check() error {
	if v, ok := cuo.mutation.EmployeeID(); ok {
		if err := crew.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf(`ent: validator failed for field "Crew.employee_id": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.UserID(); cuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Crew.user"`)
	}
	return nil
}

func (cuo *CrewUpdateOne) sqlSave(ctx context.Context) (_node *Crew, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crew.Table,
			Columns: crew.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: crew.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Crew.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, crew.FieldID)
		for _, f := range fields {
			if !crew.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != crew.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.EmployeeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crew.FieldEmployeeID,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crew.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crew.FieldUpdatedAt,
		})
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   crew.UserTable,
			Columns: []string{crew.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   crew.UserTable,
			Columns: []string{crew.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AirlineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crew.AirlineTable,
			Columns: []string{crew.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AirlineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crew.AirlineTable,
			Columns: []string{crew.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.FlightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crew.FlightsTable,
			Columns: crew.FlightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFlightsIDs(); len(nodes) > 0 && !cuo.mutation.FlightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crew.FlightsTable,
			Columns: crew.FlightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FlightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   crew.FlightsTable,
			Columns: crew.FlightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Crew{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
