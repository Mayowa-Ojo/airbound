// Code generated by entc, DO NOT EDIT.

package passenger

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the passenger type in the database.
	Label = "passenger"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldPassportNumber holds the string denoting the passport_number field in the database.
	FieldPassportNumber = "passport_number"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFlightReservation holds the string denoting the flight_reservation edge name in mutations.
	EdgeFlightReservation = "flight_reservation"
	// EdgeFlightSeat holds the string denoting the flight_seat edge name in mutations.
	EdgeFlightSeat = "flight_seat"
	// Table holds the table name of the passenger in the database.
	Table = "passengers"
	// FlightReservationTable is the table that holds the flight_reservation relation/edge.
	FlightReservationTable = "passengers"
	// FlightReservationInverseTable is the table name for the FlightReservation entity.
	// It exists in this package in order to avoid circular dependency with the "flightreservation" package.
	FlightReservationInverseTable = "flight_reservations"
	// FlightReservationColumn is the table column denoting the flight_reservation relation/edge.
	FlightReservationColumn = "flight_reservation_id"
	// FlightSeatTable is the table that holds the flight_seat relation/edge.
	FlightSeatTable = "flight_seats"
	// FlightSeatInverseTable is the table name for the FlightSeat entity.
	// It exists in this package in order to avoid circular dependency with the "flightseat" package.
	FlightSeatInverseTable = "flight_seats"
	// FlightSeatColumn is the table column denoting the flight_seat relation/edge.
	FlightSeatColumn = "passenger_flight_seat"
)

// Columns holds all SQL columns for passenger fields.
var Columns = []string{
	FieldID,
	FieldFirstname,
	FieldLastname,
	FieldAge,
	FieldPassportNumber,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "passengers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"flight_reservation_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FirstnameValidator is a validator for the "firstname" field. It is called by the builders before save.
	FirstnameValidator func(string) error
	// LastnameValidator is a validator for the "lastname" field. It is called by the builders before save.
	LastnameValidator func(string) error
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// PassportNumberValidator is a validator for the "passport_number" field. It is called by the builders before save.
	PassportNumberValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
