// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airbound/internal/ent/aircraft"
	"airbound/internal/ent/airline"
	"airbound/internal/ent/flightinstance"
	"airbound/internal/ent/predicate"
	"airbound/internal/ent/seat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AircraftUpdate is the builder for updating Aircraft entities.
type AircraftUpdate struct {
	config
	hooks    []Hook
	mutation *AircraftMutation
}

// Where appends a list predicates to the AircraftUpdate builder.
func (au *AircraftUpdate) Where(ps ...predicate.Aircraft) *AircraftUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTailNumber sets the "tail_number" field.
func (au *AircraftUpdate) SetTailNumber(s string) *AircraftUpdate {
	au.mutation.SetTailNumber(s)
	return au
}

// SetManufacturer sets the "manufacturer" field.
func (au *AircraftUpdate) SetManufacturer(s string) *AircraftUpdate {
	au.mutation.SetManufacturer(s)
	return au
}

// SetModel sets the "model" field.
func (au *AircraftUpdate) SetModel(s string) *AircraftUpdate {
	au.mutation.SetModel(s)
	return au
}

// SetCapacity sets the "capacity" field.
func (au *AircraftUpdate) SetCapacity(i int) *AircraftUpdate {
	au.mutation.ResetCapacity()
	au.mutation.SetCapacity(i)
	return au
}

// AddCapacity adds i to the "capacity" field.
func (au *AircraftUpdate) AddCapacity(i int) *AircraftUpdate {
	au.mutation.AddCapacity(i)
	return au
}

// SetRange sets the "range" field.
func (au *AircraftUpdate) SetRange(i int) *AircraftUpdate {
	au.mutation.ResetRange()
	au.mutation.SetRange(i)
	return au
}

// AddRange adds i to the "range" field.
func (au *AircraftUpdate) AddRange(i int) *AircraftUpdate {
	au.mutation.AddRange(i)
	return au
}

// SetManufacturedAt sets the "manufactured_at" field.
func (au *AircraftUpdate) SetManufacturedAt(t time.Time) *AircraftUpdate {
	au.mutation.SetManufacturedAt(t)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AircraftUpdate) SetCreatedAt(t time.Time) *AircraftUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableCreatedAt(t *time.Time) *AircraftUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AircraftUpdate) SetUpdatedAt(t time.Time) *AircraftUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetAirlineID sets the "airline" edge to the Airline entity by ID.
func (au *AircraftUpdate) SetAirlineID(id uuid.UUID) *AircraftUpdate {
	au.mutation.SetAirlineID(id)
	return au
}

// SetNillableAirlineID sets the "airline" edge to the Airline entity by ID if the given value is not nil.
func (au *AircraftUpdate) SetNillableAirlineID(id *uuid.UUID) *AircraftUpdate {
	if id != nil {
		au = au.SetAirlineID(*id)
	}
	return au
}

// SetAirline sets the "airline" edge to the Airline entity.
func (au *AircraftUpdate) SetAirline(a *Airline) *AircraftUpdate {
	return au.SetAirlineID(a.ID)
}

// SetFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID.
func (au *AircraftUpdate) SetFlightInstanceID(id uuid.UUID) *AircraftUpdate {
	au.mutation.SetFlightInstanceID(id)
	return au
}

// SetNillableFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID if the given value is not nil.
func (au *AircraftUpdate) SetNillableFlightInstanceID(id *uuid.UUID) *AircraftUpdate {
	if id != nil {
		au = au.SetFlightInstanceID(*id)
	}
	return au
}

// SetFlightInstance sets the "flight_instance" edge to the FlightInstance entity.
func (au *AircraftUpdate) SetFlightInstance(f *FlightInstance) *AircraftUpdate {
	return au.SetFlightInstanceID(f.ID)
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (au *AircraftUpdate) AddSeatIDs(ids ...uuid.UUID) *AircraftUpdate {
	au.mutation.AddSeatIDs(ids...)
	return au
}

// AddSeats adds the "seats" edges to the Seat entity.
func (au *AircraftUpdate) AddSeats(s ...*Seat) *AircraftUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSeatIDs(ids...)
}

// Mutation returns the AircraftMutation object of the builder.
func (au *AircraftUpdate) Mutation() *AircraftMutation {
	return au.mutation
}

// ClearAirline clears the "airline" edge to the Airline entity.
func (au *AircraftUpdate) ClearAirline() *AircraftUpdate {
	au.mutation.ClearAirline()
	return au
}

// ClearFlightInstance clears the "flight_instance" edge to the FlightInstance entity.
func (au *AircraftUpdate) ClearFlightInstance() *AircraftUpdate {
	au.mutation.ClearFlightInstance()
	return au
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (au *AircraftUpdate) ClearSeats() *AircraftUpdate {
	au.mutation.ClearSeats()
	return au
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (au *AircraftUpdate) RemoveSeatIDs(ids ...uuid.UUID) *AircraftUpdate {
	au.mutation.RemoveSeatIDs(ids...)
	return au
}

// RemoveSeats removes "seats" edges to Seat entities.
func (au *AircraftUpdate) RemoveSeats(s ...*Seat) *AircraftUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSeatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AircraftUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AircraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AircraftUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AircraftUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AircraftUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AircraftUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := aircraft.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AircraftUpdate) check() error {
	if v, ok := au.mutation.TailNumber(); ok {
		if err := aircraft.TailNumberValidator(v); err != nil {
			return &ValidationError{Name: "tail_number", err: fmt.Errorf(`ent: validator failed for field "Aircraft.tail_number": %w`, err)}
		}
	}
	if v, ok := au.mutation.Manufacturer(); ok {
		if err := aircraft.ManufacturerValidator(v); err != nil {
			return &ValidationError{Name: "manufacturer", err: fmt.Errorf(`ent: validator failed for field "Aircraft.manufacturer": %w`, err)}
		}
	}
	if v, ok := au.mutation.Model(); ok {
		if err := aircraft.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Aircraft.model": %w`, err)}
		}
	}
	if v, ok := au.mutation.Capacity(); ok {
		if err := aircraft.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Aircraft.capacity": %w`, err)}
		}
	}
	if v, ok := au.mutation.Range(); ok {
		if err := aircraft.RangeValidator(v); err != nil {
			return &ValidationError{Name: "range", err: fmt.Errorf(`ent: validator failed for field "Aircraft.range": %w`, err)}
		}
	}
	return nil
}

func (au *AircraftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aircraft.Table,
			Columns: aircraft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: aircraft.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.TailNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldTailNumber,
		})
	}
	if value, ok := au.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldManufacturer,
		})
	}
	if value, ok := au.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldModel,
		})
	}
	if value, ok := au.mutation.Capacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCapacity,
		})
	}
	if value, ok := au.mutation.AddedCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCapacity,
		})
	}
	if value, ok := au.mutation.Range(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldRange,
		})
	}
	if value, ok := au.mutation.AddedRange(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldRange,
		})
	}
	if value, ok := au.mutation.ManufacturedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aircraft.FieldManufacturedAt,
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aircraft.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aircraft.FieldUpdatedAt,
		})
	}
	if au.mutation.AirlineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aircraft.AirlineTable,
			Columns: []string{aircraft.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AirlineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aircraft.AirlineTable,
			Columns: []string{aircraft.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FlightInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   aircraft.FlightInstanceTable,
			Columns: []string{aircraft.FlightInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FlightInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   aircraft.FlightInstanceTable,
			Columns: []string{aircraft.FlightInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   aircraft.SeatsTable,
			Columns: []string{aircraft.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !au.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   aircraft.SeatsTable,
			Columns: []string{aircraft.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   aircraft.SeatsTable,
			Columns: []string{aircraft.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aircraft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AircraftUpdateOne is the builder for updating a single Aircraft entity.
type AircraftUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AircraftMutation
}

// SetTailNumber sets the "tail_number" field.
func (auo *AircraftUpdateOne) SetTailNumber(s string) *AircraftUpdateOne {
	auo.mutation.SetTailNumber(s)
	return auo
}

// SetManufacturer sets the "manufacturer" field.
func (auo *AircraftUpdateOne) SetManufacturer(s string) *AircraftUpdateOne {
	auo.mutation.SetManufacturer(s)
	return auo
}

// SetModel sets the "model" field.
func (auo *AircraftUpdateOne) SetModel(s string) *AircraftUpdateOne {
	auo.mutation.SetModel(s)
	return auo
}

// SetCapacity sets the "capacity" field.
func (auo *AircraftUpdateOne) SetCapacity(i int) *AircraftUpdateOne {
	auo.mutation.ResetCapacity()
	auo.mutation.SetCapacity(i)
	return auo
}

// AddCapacity adds i to the "capacity" field.
func (auo *AircraftUpdateOne) AddCapacity(i int) *AircraftUpdateOne {
	auo.mutation.AddCapacity(i)
	return auo
}

// SetRange sets the "range" field.
func (auo *AircraftUpdateOne) SetRange(i int) *AircraftUpdateOne {
	auo.mutation.ResetRange()
	auo.mutation.SetRange(i)
	return auo
}

// AddRange adds i to the "range" field.
func (auo *AircraftUpdateOne) AddRange(i int) *AircraftUpdateOne {
	auo.mutation.AddRange(i)
	return auo
}

// SetManufacturedAt sets the "manufactured_at" field.
func (auo *AircraftUpdateOne) SetManufacturedAt(t time.Time) *AircraftUpdateOne {
	auo.mutation.SetManufacturedAt(t)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AircraftUpdateOne) SetCreatedAt(t time.Time) *AircraftUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableCreatedAt(t *time.Time) *AircraftUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AircraftUpdateOne) SetUpdatedAt(t time.Time) *AircraftUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetAirlineID sets the "airline" edge to the Airline entity by ID.
func (auo *AircraftUpdateOne) SetAirlineID(id uuid.UUID) *AircraftUpdateOne {
	auo.mutation.SetAirlineID(id)
	return auo
}

// SetNillableAirlineID sets the "airline" edge to the Airline entity by ID if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableAirlineID(id *uuid.UUID) *AircraftUpdateOne {
	if id != nil {
		auo = auo.SetAirlineID(*id)
	}
	return auo
}

// SetAirline sets the "airline" edge to the Airline entity.
func (auo *AircraftUpdateOne) SetAirline(a *Airline) *AircraftUpdateOne {
	return auo.SetAirlineID(a.ID)
}

// SetFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID.
func (auo *AircraftUpdateOne) SetFlightInstanceID(id uuid.UUID) *AircraftUpdateOne {
	auo.mutation.SetFlightInstanceID(id)
	return auo
}

// SetNillableFlightInstanceID sets the "flight_instance" edge to the FlightInstance entity by ID if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableFlightInstanceID(id *uuid.UUID) *AircraftUpdateOne {
	if id != nil {
		auo = auo.SetFlightInstanceID(*id)
	}
	return auo
}

// SetFlightInstance sets the "flight_instance" edge to the FlightInstance entity.
func (auo *AircraftUpdateOne) SetFlightInstance(f *FlightInstance) *AircraftUpdateOne {
	return auo.SetFlightInstanceID(f.ID)
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (auo *AircraftUpdateOne) AddSeatIDs(ids ...uuid.UUID) *AircraftUpdateOne {
	auo.mutation.AddSeatIDs(ids...)
	return auo
}

// AddSeats adds the "seats" edges to the Seat entity.
func (auo *AircraftUpdateOne) AddSeats(s ...*Seat) *AircraftUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSeatIDs(ids...)
}

// Mutation returns the AircraftMutation object of the builder.
func (auo *AircraftUpdateOne) Mutation() *AircraftMutation {
	return auo.mutation
}

// ClearAirline clears the "airline" edge to the Airline entity.
func (auo *AircraftUpdateOne) ClearAirline() *AircraftUpdateOne {
	auo.mutation.ClearAirline()
	return auo
}

// ClearFlightInstance clears the "flight_instance" edge to the FlightInstance entity.
func (auo *AircraftUpdateOne) ClearFlightInstance() *AircraftUpdateOne {
	auo.mutation.ClearFlightInstance()
	return auo
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (auo *AircraftUpdateOne) ClearSeats() *AircraftUpdateOne {
	auo.mutation.ClearSeats()
	return auo
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (auo *AircraftUpdateOne) RemoveSeatIDs(ids ...uuid.UUID) *AircraftUpdateOne {
	auo.mutation.RemoveSeatIDs(ids...)
	return auo
}

// RemoveSeats removes "seats" edges to Seat entities.
func (auo *AircraftUpdateOne) RemoveSeats(s ...*Seat) *AircraftUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSeatIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AircraftUpdateOne) Select(field string, fields ...string) *AircraftUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Aircraft entity.
func (auo *AircraftUpdateOne) Save(ctx context.Context) (*Aircraft, error) {
	var (
		err  error
		node *Aircraft
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AircraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AircraftUpdateOne) SaveX(ctx context.Context) *Aircraft {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AircraftUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AircraftUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AircraftUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := aircraft.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AircraftUpdateOne) check() error {
	if v, ok := auo.mutation.TailNumber(); ok {
		if err := aircraft.TailNumberValidator(v); err != nil {
			return &ValidationError{Name: "tail_number", err: fmt.Errorf(`ent: validator failed for field "Aircraft.tail_number": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Manufacturer(); ok {
		if err := aircraft.ManufacturerValidator(v); err != nil {
			return &ValidationError{Name: "manufacturer", err: fmt.Errorf(`ent: validator failed for field "Aircraft.manufacturer": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Model(); ok {
		if err := aircraft.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "Aircraft.model": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Capacity(); ok {
		if err := aircraft.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Aircraft.capacity": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Range(); ok {
		if err := aircraft.RangeValidator(v); err != nil {
			return &ValidationError{Name: "range", err: fmt.Errorf(`ent: validator failed for field "Aircraft.range": %w`, err)}
		}
	}
	return nil
}

func (auo *AircraftUpdateOne) sqlSave(ctx context.Context) (_node *Aircraft, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aircraft.Table,
			Columns: aircraft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: aircraft.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Aircraft.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aircraft.FieldID)
		for _, f := range fields {
			if !aircraft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != aircraft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.TailNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldTailNumber,
		})
	}
	if value, ok := auo.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldManufacturer,
		})
	}
	if value, ok := auo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldModel,
		})
	}
	if value, ok := auo.mutation.Capacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCapacity,
		})
	}
	if value, ok := auo.mutation.AddedCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCapacity,
		})
	}
	if value, ok := auo.mutation.Range(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldRange,
		})
	}
	if value, ok := auo.mutation.AddedRange(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldRange,
		})
	}
	if value, ok := auo.mutation.ManufacturedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aircraft.FieldManufacturedAt,
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aircraft.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aircraft.FieldUpdatedAt,
		})
	}
	if auo.mutation.AirlineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aircraft.AirlineTable,
			Columns: []string{aircraft.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AirlineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aircraft.AirlineTable,
			Columns: []string{aircraft.AirlineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: airline.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FlightInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   aircraft.FlightInstanceTable,
			Columns: []string{aircraft.FlightInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FlightInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   aircraft.FlightInstanceTable,
			Columns: []string{aircraft.FlightInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flightinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   aircraft.SeatsTable,
			Columns: []string{aircraft.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !auo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   aircraft.SeatsTable,
			Columns: []string{aircraft.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   aircraft.SeatsTable,
			Columns: []string{aircraft.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Aircraft{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aircraft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
